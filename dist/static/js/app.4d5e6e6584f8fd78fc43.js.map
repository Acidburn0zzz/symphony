{"version":3,"sources":["webpack:///static/js/app.4d5e6e6584f8fd78fc43.js","webpack:///./src/js/Stage.js","webpack:///./src/js/merkle-tree-gen/index.js","webpack:///./src/js/materials/PointsMaterial/PointsMaterial.vert","webpack:///./src/js/materials/BlockMaterial/BlockMaterial.js","webpack:///./src/js/materials/PointsMaterial/PointsMaterial.frag","webpack:///./src/js/shaders/RGBShift.js","webpack:///./src/js/Config.js","webpack:///./src/js/shaders/FXAA.js","webpack:///./src/js/merkle-tree-gen/lib/hash-array.js","webpack:///./src/js/materials/PointsMaterial/PointsMaterial.js","webpack:///./src/js/workers/treeBuilder.js","webpack:///./src/js/postprocessing/EffectComposer.js","webpack:///./src/js/shaders/Film.js","webpack:///./src/js/audio/audio.js","webpack:///./src/js/materials/MerkleMaterial/MerkleMaterial.js","webpack:///./src/js/workers/dayBuilder.js","webpack:///./src/js/merkle-tree-gen/lib/merkle-gen.js","webpack:///./src/js/shaders/HueSaturation.js","webpack:///./src/js/shaders/Vignette.js","webpack:///./src/utils/math.js","webpack:///./src/js/materials/BlockMaterial/BlockMaterial.vert","webpack:///./src/js/shaders/HorizontalTiltShiftShader.js","webpack:///./src/js/postprocessing/CopyShader.js","webpack:///./src/js/scenes/MainScene.js","webpack:///./src/js/helpers/BufferGeometryUtils.js","webpack:///./src/js/materials/MerkleMaterial/MerkleMaterial.vert","webpack:///./src/js/helpers/GenerateBlockGeometry.js","webpack:///./~/moment/locale ^\\.\\/.*$","webpack:///./src/js/api/btc.js","webpack:///./src/js/materials/BlockMaterial/BlockMaterial.frag","webpack:///./src/js/main.js"],"names":["webpackJsonp","/w9m","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_three","THREE","newObj","key","prototype","hasOwnProperty","call","_EffectComposer","_FXAA","_FXAA2","_HueSaturation","_HueSaturation2","_RGBShift","_RGBShift2","_Vignette","_Vignette2","_Film","_BrightnessContrast","_BrightnessContrast2","_HorizontalTiltShiftShader","_Config","_Config2","Stage","this","init","initScene","initCamera","initRenderer","initPost","addLights","addEvents","resize","animate","composer","EffectComposer","renderer","addPass","RenderPass","scene","camera","VignettePass","ShaderPass","BrightnessContrastPass","HueSaturationPass","FXAAPass","RGBShiftPass","renderToScreen","Scene","fog","FogExp2","bgColor","fogFar","background","Color","defaultCameraPos","Vector3","cameraDriftLimitMax","x","y","cameraDriftLimitMin","cameraMoveStep","cameraLerpSpeed","PerspectiveCamera","fov","window","innerWidth","innerHeight","position","set","z","updateMatrixWorld","cameraPos","clone","targetCameraPos","cameraLookAtPos","targetCameraLookAt","lookAt","cameraFromQuaternion","Quaternion","copy","quaternion","cameraToRotation","Euler","rotation","cameraToQuaternion","setFromEuler","cameraMoveQuaternion","canvas","document","getElementById","style","touchAction","WebGLRenderer","antialias","setClearColor","setPixelRatio","devicePixelRatio","setSize","autoClear","sortObjects","_this","preUpdate","Event","postUpdate","cameraMoveEvent","mousePos","Vector2","targetMousePos","addEventListener","onDocumentMouseMove","bind","evt","preventDefault","changedTouches","touches","ambLight","AmbientLight","add","pointLight","PointLight","aspect","updateProjectionMatrix","material","uniforms","resolution","event","rect","domElement","getBoundingClientRect","clientX","left","clientY","top","lerp","dispatchEvent","updateMouse","cameraFollowMouse","render","reqID","requestAnimationFrame","update","0","0RWK","_values","_values2","fromArray","args","cb","array","hashalgo","hashlist","length","HashArray","genMerkle","arrayHasher","fastMap","hashElements","treeObj","sortedTree","element","type","parent","children","right","tree","sort","a","b","level","1084","1ome","_getPrototypeOf","_getPrototypeOf2","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_BlockMaterial","_BlockMaterial2","_BlockMaterial3","_BlockMaterial4","BlockMaterial","_THREE$MeshStandardMa","cfg","__proto__","ShaderLib","standard","uRefractionRatio","uFresnelBias","uFresnelScale","uFresnelPower","vertexShader","fragmentShader","MeshStandardMaterial","2nw3","34JK","RGBShiftShader","tDiffuse","amount","angle","6bm0","Config","daysEitherSide","showGUI","shadowsOn","postProcessing","effectDownscaleDivisor","8TtI","FXAAShader","8yMH","hA","arguments","undefined","hL","hashAlgorithm","FastMap","index","9GTs","_PointsMaterial","_PointsMaterial2","_PointsMaterial3","_PointsMaterial4","PointsMaterial","_THREE$PointsMaterial","points","uTime","uColor","pointCount","Adlg","_GenerateBlockGeometry","_GenerateBlockGeometry2","self","e","data","cmd","block","feeToInputRatio","fee","input","geoData","console","log","size","returnData","vertices","treeGeo","attributes","boxCenter","offset","endPoints","Float32Array","postMessage","close","AjHq","UnrealBloomPass","Pass","_create","_create2","_assign","_assign2","_CopyShader","_CopyShader2","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","getDrawingBufferSize","WebGLRenderTarget","width","height","texture","name","renderTarget1","renderTarget2","writeBuffer","readBuffer","passes","error","copyPass","swapBuffers","tmp","pass","push","insertPass","splice","delta","i","maskActive","il","enabled","needsSwap","context","stencilFunc","NOTEQUAL","EQUAL","MaskPass","ClearMaskPass","reset","dispose","clear","shader","textureID","ShaderMaterial","UniformsUtils","defines","OrthographicCamera","quad","Mesh","PlaneBufferGeometry","frustumCulled","constructor","overrideMaterial","clearColor","clearAlpha","clearDepth","oldAutoClear","oldClearColor","oldClearAlpha","getClearColor","getHex","getClearAlpha","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","join","strength","radius","threshold","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","basic","MeshBasicMaterial","disable","STENCIL_TEST","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","enable","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomRadius","grayscale","F/9K","BrightnessContrast","brightness","contrast","Gqez","Film","time","nIntensity","sIntensity","sCount","GuZB","masterVol","_maxSafeInteger","_maxSafeInteger2","_promise","_promise2","_tone","_tone2","_lodash","_math","Audio","pointColors","path","samplerLoaded","loops","quantize","ambienceVol","ambiencePath","bpm","audioLoader","55","58.27","61.735","65.406","69.296","73.416","77.782","82.407","87.307","ambienceFilter","Q","103.826","chain","110","116.541","ambiencePlayer","123.471","130.813","onload","resolve","155.563","164.814","174.614","184.997","195.998","ambienceBus","207.652","220","233.082","246.942","261.626","277.183","293.665","311.127","329.628","349.228","369.994","391.995","415.305","loop","cancel","493.883","523.251","modes","ionian","dorian","phrygian","reject","lydian","loadCount","mixolydian","locrian","AudioLoader","Filter","Player","url","volume","linearRampToValueAtTime","_this3","preloadNotes","then","preloadAmbience","_this4","masterBus","Volume","toMaster","loadAmbience","start","Transport","loopMap","sampler","Sampler","A1","black","A#1","white","B1","C1","pointsMaterial","C#1","D1","minTime","D#1","maxTime","E1","F1","F#1","transaction","A2","A#2","transactions","C2","C#2","D2","D#2","E2","F2","F#2","G2","G#2","A3","point","positionsArray","A#3","B3","C3","C#3","D3","D#3","E3","F3","F#3","G3","G#3","frequency","blockObjectPosition","pointsMesh","_this5","minDiff","note","setTimeout","min","_index","_index2","_transaction","mode","aeolian","notes","noteName","replace","indexOf","diff","abs","that","timeLowRes","toFixed","Loop","triggerAttack","seconds","humanize","MTSG","_MerkleMaterial","_MerkleMaterial2","_MerkleMaterial3","MerkleMaterial","blocks","dayIndex","timeStamp","uAnimTime","Mclq","blockCount","focusOnBlock","deque1","deque2","_GenerateBlockGeometr","nextval","nl","PPUF","j","chash","Deque","currentlevel","shift","root","pop","saturation","len2","darkness","RzKr","Vignette","HueSaturationShader","hue","HALF_PI","DEG2RAD","PI","unMix","val","TbVk","smoothstep","VvTn","hash","sign","clamp","isPowerOfTwo","powerTwoCeilingBase","powerTwoCeiling","max","latLngBearing","cUnMix","mix","ratio","sin","lng2","lng1","cMix","dX","dY","n","latLngDistance","fract","p1","edge0","edge1","p0","t","c","floor","p2","hash2","val1","val2","t2","safeMod","ceil","absVal","mod","lat1","lat2","cos","atan2","distanceTo","sqrt","distanceSqrTo","distanceTo3","dZ","distanceSqrTo3","tLat","HorizontalTiltShiftShader","tLng","cubicBezier","p3","cubicBezierFn","ZlZk","CopyShader","h","r","cNRb","eyF1","opacity","f82t","_extends2","_extends3","_regenerator","_regenerator2","_asyncToGenerator2","_asyncToGenerator3","_from","_from2","_keys","_keys2","_map","_map2","TreeBuilderWorker","_moment2","_moment","_eventemitter","_eventemitter2","_audio","cubeCamera","_audio2","_btc","allBlocksObj3d","_btc2","lastHoveredBlock","stage","initProperties","addInteraction","dat","removeEventListener","DayBuilderWorker","work","TWEEN","MainScene","_EventEmitter","_ref","object","geometry","_ref$path","api","allBlocks","currentDate","inputDate","audio","newOffset","setupMaterials","initGui","initReflection","clock","Clock","addBlocksToStage","onUpdateBound","cancelAnimationFrame","merkleMetalness","merkleRoughness","merkleColor","merkleMaterial","color","merkleEmissive","traverse","createGuiForMaterial","gui","addFolder","mat","f","state","date","reflectivity","addColor","emissive","dayZOffset","closestDayIndex","loadBlocks","valueOf","lightFolder","param","sceneFolder","blockRoughness","blockMaterialFront","blockEmissive","backgroundColor","vignetteAmount","frameCount","dayData","step","onChange","Worker","fromDate","dayGroups","loadDayRequested","currentBlockObject","view","currentDay","blocksToAnimate","minCameraZPos","maxCameraZPos","visibleCount","startOf","toDate","endOf","group","Group","day","front","back","_ref2","sizes","blockMaterialBack","blockGroup","translateY","translateZ","boxGeometry","zPos","scale","materials","blockchainData","blockLoadZThreshold","crystalOpacity","pointLightTarget","cameraBlockFocusDistance","visible","intersected","selectBlock","dayChangedEvent","forEach","_that","remove","reverse","treeBuilderWorker","sie","currentHash","mesh","BoxBufferGeometry","treeGroup","BufferGeometry","raycaster","Raycaster","renderOrder","onBeforeRender","onUpdate","onCameraMove","createEvent","indices","onDocumentMouseDown","BufferAttribute","_ref3","blockObj3D","unloadSound","getWorldPosition","addAttribute","computeFaceNormals","positions","Array","fill","Points","get","generateMerkleSound","isAnimating","animateBlockOut","querySelector","contains","target","_getIntersections","blockObject","moveQuaternion","resetDayView","fromPos","toPos","initialPosition","setHex","CubeCamera","targetRotation","initialRotation","fromQuaternion","LinearMipMapLinearFilter","toQuaternion","animateBlock","envMap","duration","blockPos","Easing","blockWorldPos","Tween","to","_ref4","slerp","w","easing","currentBlock","getTransactionsForBlock","cubeMapUrls","_this6","metalnessMap","TextureLoader","load","roughnessMap","normalMap","bumpMap","bgMap","CubeTextureLoader","setPath","metalness","side","BackSide","bumpScale","roughness","envMapIntensity","catch","blockMaterialHighlight","MeshPhysicalMaterial","flatShading","DoubleSide","premultipliedAlpha","filter","LineBasicMaterial","box","intersections","vector","unproject","sub","normalize","values","boxes","intersectObjects","_this8","_getIntersections2","getIntersections","child","innerIndex","closest","MAX_VALUE","_day","dist","dayLoading","parseInt","reduce","output","latestDayIndex","earliestDayIndex","emit","signedIndex","parseFloat","_day2","subtract","loadDay","setDate","goToBlock","meshIndex","_ref5","dayGroup","mark","_callee","blockhash","existingBlock","wrap","_context","prev","next","abrupt","find","_ref6","buildTree","getBlock","sent","stop","_this9","updateLights","checkMouseIntersection","animateTree","getElapsedTime","Date","pointColorsTexture","createCubeMap","merge","animateBlockVisibility","aGeom","DataTexture","RGBFormat","Uint32ArrayConcat","NearestFilter","fnz4","Float32ArrayConcat","first","result","second","firstLength","Uint32Array","count","Y","yNegRotation","xPosRotation","xNegRotation","seedrandom","n_tx","uInQ","signatureAngle","setFromAxisAngle","yPosRotation","zNegRotation","Z","toString","tmpQuat","LineCurve3","baseAngle","startPosition","UP","axis","yReverseRotation","zPosRotation","magnitude","endPosition","levels","seeded","visualise","Geometry","node","randomness","random","X","isLeft","applyQuaternion","multiplyScalar","_merkle$fromArray","v","N","setFromPoints","quick","treeBuffer","fromGeometry","v1","v2","tubeGeo","TubeGeometry","Box3","getSize","getCenter","uslO","webpackContext","req","webpackContextResolve","id","Error","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","keys","w1qT","wIG/","times","_axios","_axios2","_firebase","_firebase2","BTC","initDataStore","initializeApp","apiKey","projectId","daysArray","collection","daysProcessed","hashRate","end","formatTimeSeries","startTimestamp","hashRates","toDay","_this2","getBlocksSince","numberOfDays","timestampInMs","getHashRateforDay","startAt","docs","sortDateAsc","fromDay","setMilliseconds","setSeconds","tryCount","setHours","where","getTime","orderBy","endAt","doc","_ref7","limit","_ref8","_ref9","orpheusApp","ref","params","preload","textureLoader","xFsn","_Stage","_Stage2","_MainScene","_MainScene2","canRun","WebGLRenderingContext","_"],"mappings":"AAAAA,cAAc,IAERC,OACA,SAAUC,EAAQC,EAASC,GAEjC,YAyDA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GApDvFG,OAAOC,eAAeP,EAAS,cAC7BQ,OAAO,GAGT,IAAIC,GAAmBR,EAAoB,QAEvCS,EAAmBR,EAAuBO,GAE1CE,EAAgBV,EAAoB,QAEpCW,EAAgBV,EAAuBS,GCjB3CE,EAAAZ,EAAA,QAAYa,EDyDZ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GApC9NF,GCnBpCO,EAAAnB,EAAA,QAEAoB,EAAApB,EAAA,QDuBIqB,EAASpB,EAAuBmB,GCtBpCE,EAAAtB,EAAA,QD0BIuB,EAAkBtB,EAAuBqB,GCzB7CE,EAAAxB,EAAA,QD6BIyB,EAAaxB,EAAuBuB,GC5BxCE,EAAA1B,EAAA,QDgCI2B,EAAa1B,EAAuByB,GC/BxCE,EAAA5B,EAAA,QACA6B,GDkCa5B,EAAuB2B,GClCpC5B,EAAA,SDsCI8B,EAAuB7B,EAAuB4B,GCrClDE,EAAA/B,EAAA,QAKAgC,GDoCkC/B,EAAuB8B,GCpCzD/B,EAAA,SDwCIiC,EAAWhC,EAAuB+B,GCnCjBE,ED4CT,WC3CV,QAAAA,MAAe,EAAAzB,EAAAL,SAAA+B,KAAAD,GACbC,KAAKC,ODoVP,OA9RA,EAAIzB,EAAcP,SAAS8B,IACzBnB,IAAK,OACLR,MAAO,WCjDP4B,KAAKE,YACLF,KAAKG,aACLH,KAAKI,eACLJ,KAAKK,WACLL,KAAKM,YACLN,KAAKO,YACLP,KAAKQ,SACLR,KAAKS,aDqDL7B,IAAK,WACLR,MAAO,WClDP4B,KAAKU,SAAW,GAAA1B,GAAA2B,eAAmBX,KAAKY,UACxCZ,KAAKU,SAASG,QAAQ,GAAA7B,GAAA8B,WAAed,KAAKe,MAAOf,KAAKgB,SAEtDhB,KAAKiB,aAAe,GAAAjC,GAAAkC,WAAA1B,EAAAvB,SACpB+B,KAAKU,SAASG,QAAQb,KAAKiB,cAE3BjB,KAAKmB,uBAAyB,GAAAnC,GAAAkC,WAAAvB,EAAA1B,SAC9B+B,KAAKU,SAASG,QAAQb,KAAKmB,wBAE3BnB,KAAKoB,kBAAoB,GAAApC,GAAAkC,WAAA9B,EAAAnB,SACzB+B,KAAKU,SAASG,QAAQb,KAAKoB,mBAE3BpB,KAAKqB,SAAW,GAAArC,GAAAkC,WAAAhC,EAAAjB,SAEhB+B,KAAKU,SAASG,QAAQb,KAAKqB,UAE3BrB,KAAKsB,aAAe,GAAAtC,GAAAkC,WAAA5B,EAAArB,SACpB+B,KAAKsB,aAAaC,gBAAiB,EACnCvB,KAAKU,SAASG,QAAQb,KAAKsB,iBDmE3B1C,IAAK,YACLR,MAAO,WCrDP4B,KAAKe,MAAQ,GAAIrC,GAAM8C,MACvBxB,KAAKe,MAAMU,IAAM,GAAI/C,GAAMgD,QAAQ5B,EAAA7B,QAAO8C,MAAMY,QAAS7B,EAAA7B,QAAO8C,MAAMa,QACtE5B,KAAKe,MAAMc,WAAa,GAAInD,GAAMoD,MAAMhC,EAAA7B,QAAO8C,MAAMY,YD8DrD/C,IAAK,aACLR,MAAO,WCvDP4B,KAAK+B,iBAAmB,GAAIrD,GAAMsD,QAAQ,EAAK,EAAK,MAGpDhC,KAAKiC,qBACHC,EAAG,IACHC,EAAG,KAELnC,KAAKoC,qBACHF,GAAI,IACJC,GAAI,KAGNnC,KAAKqC,eAAiB,IACtBrC,KAAKsC,gBAAkB,IAGvBtC,KAAKgB,OAAS,GAAItC,GAAM6D,kBAAkBzC,EAAA7B,QAAO+C,OAAOwB,IAAKC,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KACxG3C,KAAKgB,OAAO4B,SAASC,IAAI7C,KAAK+B,iBAAiBG,EAAGlC,KAAK+B,iBAAiBI,EAAGnC,KAAK+B,iBAAiBe,GACjG9C,KAAKgB,OAAO+B,oBAEZ/C,KAAKgD,UAAYhD,KAAKgB,OAAO4B,SAASK,QACtCjD,KAAKkD,gBAAkBlD,KAAKgD,UAAUC,QAEtCjD,KAAKmD,gBAAkB,GAAIzE,GAAMsD,QAAQ,EAAG,EAAG,GAC/ChC,KAAKoD,mBAAqB,GAAI1E,GAAMsD,QAAQ,EAAG,EAAG,GAClDhC,KAAKgB,OAAOqC,OAAOrD,KAAKmD,iBAGxBnD,KAAKsD,sBAAuB,GAAI5E,GAAM6E,YAAaC,KAAKxD,KAAKgB,OAAOyC,WACpE,IAAIC,IAAmB,GAAIhF,GAAMiF,OAAQH,KAAKxD,KAAKgB,OAAO4C,SAC1D5D,MAAK6D,oBAAqB,GAAInF,GAAM6E,YAAaO,aAAaJ,GAC9D1D,KAAK+D,qBAAuB,GAAIrF,GAAM6E,cDiEtC3E,IAAK,eACLR,MAAO,WC3DP4B,KAAKgE,OAASC,SAASC,eAAe,SAEtClE,KAAKgE,OAAOG,MAAMC,YAAc,OAEhCpE,KAAKY,SAAW,GAAIlC,GAAM2F,eACxBC,UAAWxE,EAAA7B,QAAO8C,MAAMuD,UACxBN,OAAQhE,KAAKgE,SAIfhE,KAAKY,SAAS2D,cAAczE,EAAA7B,QAAO8C,MAAMY,QAAS,GAClD3B,KAAKY,SAAS4D,cAAc/B,OAAOgC,kBACnCzE,KAAKY,SAAS8D,QAAQjC,OAAOC,WAAYD,OAAOE,aAChD3C,KAAKY,SAAS+D,WAAY,EAC1B3E,KAAKY,SAASgE,aAAc,EAG5B5E,KAAKU,SAAW,GAAA1B,GAAA2B,eAAmBX,KAAKY,aDoExChC,IAAK,YACLR,MAAO,WC/DI,GAAAyG,GAAA7E,IAEXA,MAAK8E,UAAY,GAAIC,OAAM,aAC3B/E,KAAKgF,WAAa,GAAID,OAAM,cAG5B/E,KAAKiF,gBAAkB,GAAIF,OAAM,cAGjC/E,KAAKkF,SAAW,GAAIxG,GAAMyG,QAG1BnF,KAAKoF,eAAiB,GAAI1G,GAAMyG,QAGhClB,SAASoB,iBAAiB,YAAarF,KAAKsF,oBAAoBC,KAAKvF,OAAO,GAQ5EA,KAAKgE,OAAOqB,iBAAiB,YAAa,SAAAG,GACxCA,EAAIC,iBACJZ,EAAKS,oBAAoBE,EAAIE,eAAe,IAAMF,EAAIG,QAAQ,MAIhElD,OAAO4C,iBAAiB,SAAUrF,KAAKQ,OAAO+E,KAAKvF,OAAO,MDyE1DpB,IAAK,YACLR,MAAO,WCnEP,GAAIwH,GAAW,GAAIlH,GAAMmH,aAAa,SACtC7F,MAAKe,MAAM+E,IAAIF,GAEf5F,KAAK+F,WAAa,GAAIrH,GAAMsH,WAAW,SAAU,EAAG,IAAM,GAC1DhG,KAAKe,MAAM+E,IAAI9F,KAAK+F,eD4EpBnH,IAAK,SACLR,MAAO,WCtEP4B,KAAKgB,OAAOiF,OAASxD,OAAOC,WAAaD,OAAOE,YAChD3C,KAAKgB,OAAOkF,yBAEZlG,KAAKqB,SAAS8E,SAASC,SAASC,WAAWjI,MAAQ,GAAIM,GAAMyG,QAAQ,EAAI1C,OAAOC,WAAY,EAAID,OAAOE,aAEvG3C,KAAKY,SAAS8D,QAAQjC,OAAOC,WAAYD,OAAOE,aAChD3C,KAAKU,SAASgE,QAAQjC,OAAOC,WAAYD,OAAOE,gBD+EhD/D,IAAK,sBACLR,MAAO,SC1EYkI,GACnB,GAAMC,GAAOvG,KAAKY,SAAS4F,WAAWC,wBAClCvE,EAAIoE,EAAMI,QAAUH,EAAKI,KACzBxE,EAAImE,EAAMM,QAAUL,EAAKM,GAC7B7G,MAAKoF,eAAelD,EAAIA,EAAIO,OAAOC,WAAa,EAAI,EACpD1C,KAAKoF,eAAejD,EAAI,EAAIA,EAAIM,OAAOE,YAAc,KDkFrD/D,IAAK,cACLR,MAAO,WC5EP4B,KAAKkF,SAAS4B,KAAK,GAAIpI,GAAMyG,QAAQnF,KAAKoF,eAAelD,EAAGlC,KAAKoF,eAAejD,GAAInC,KAAKsC,oBDqFzF1D,IAAK,oBACLR,MAAO,WC/EP6F,SAAS8C,cAAc/G,KAAKiF,iBAE5BjF,KAAKgB,OAAOqC,OAAOrD,KAAKmD,iBACxBnD,KAAKkD,gBAAgBhB,GAAKlC,KAAKkF,SAAShD,EACxClC,KAAKkD,gBAAgBf,GAAKnC,KAAKkF,SAAS/C,EAEpCnC,KAAKkD,gBAAgBhB,EAAIlC,KAAKiC,oBAAoBC,IACpDlC,KAAKkD,gBAAgBhB,EAAIlC,KAAKiC,oBAAoBC,EAAI,GAEpDlC,KAAKkD,gBAAgBf,EAAInC,KAAKiC,oBAAoBE,IACpDnC,KAAKkD,gBAAgBf,EAAInC,KAAKiC,oBAAoBE,EAAI,GAEpDnC,KAAKkD,gBAAgBhB,EAAIlC,KAAKoC,oBAAoBF,IACpDlC,KAAKkD,gBAAgBhB,EAAIlC,KAAKoC,oBAAoBF,EAAI,GAEpDlC,KAAKkD,gBAAgBf,EAAInC,KAAKoC,oBAAoBD,IACpDnC,KAAKkD,gBAAgBf,EAAInC,KAAKoC,oBAAoBD,EAAI,GAIxDnC,KAAKgD,UAAU8D,KAAK9G,KAAKkD,gBAAiBlD,KAAKsC,iBAC/CtC,KAAKgB,OAAO4B,SAASY,KAAKxD,KAAKgD,WAG/BhD,KAAKmD,gBAAgB2D,KAAK9G,KAAKoD,mBAAoBpD,KAAKsC,oBDwFxD1D,IAAK,SACLR,MAAO,WClFP6F,SAAS8C,cAAc/G,KAAK8E,WAE5B9E,KAAKgH,cACLhH,KAAKiH,oBAELjH,KAAKkH,YDwFLtI,IAAK,SACLR,MAAO,WCnFP4B,KAAKU,SAASwG,YD4FdtI,IAAK,UACLR,MAAO,WCtFP4B,KAAKmH,MAAQC,sBAAsBpH,KAAKS,QAAQ8E,KAAKvF,OACrDA,KAAKqH,aD0FAtH,IAQTnC,GAAQK,QC9Va8B,GDkWfuH,EACA,SAAU3J,EAAQC,KAMlB2J,OACA,SAAU5J,EAAQC,EAASC,GAEjC,YAGA,IAAI2J,GAAU3J,EAAoB,QAE9B4J,EAEJ,SAAgC1J,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAFjDyJ,IExYtC,WAgBE,QAASE,GAAWC,EAAMC,GACxB,GAAIC,GACAC,EACAC,CAEJ,IAAKJ,EAAKE,OAA+B,IAAtBF,EAAKE,MAAMG,OAGvB,CACLH,EAAQF,EAAKE,MAEbC,EAAW,MAEXC,GAAW,CAGX,IAAIE,GAAYpK,EAAQ,QACpBqK,EAAYrK,EAAQ,QAEpBsK,EAAc,GAAIF,GAAUH,EAAUC,GAEpCK,EAAUD,EAAYE,aAAaR,GAGnCS,EAAUJ,EAAUE,EAASN,GAE/BS,QACJ,KAAK,GAAI3J,KAAO0J,GACd,GAAIA,EAAQxJ,eAAeF,GAAM,CAC/B,GAAI4J,GAAUF,EAAQ1J,EACD,UAAjB4J,EAAQC,KACTD,EAAQE,OAAS,KACQ,SAAjBF,EAAQC,MAAoC,SAAjBD,EAAQC,OAC5CD,EAAQE,OAASJ,EAAQE,EAAQE,SAEd,SAAjBF,EAAQC,MAAoC,SAAjBD,EAAQC,OAErCD,EAAQG,YACRH,EAAQG,SAAShC,KAAO2B,EAAQE,EAAQ7B,MACxC6B,EAAQG,SAASC,MAAQN,EAAQE,EAAQI,OACpB,SAAjBJ,EAAQC,OACVF,EAAaC,IAOrB,GAAIK,IAAO,EAAApB,EAAAxJ,SAAcqK,EAGzB,OAFAO,GAAKC,KAAK,SAACC,EAAGC,GAAJ,MAAUA,GAAEC,MAAQF,EAAEE,SAEvBJ,OAAMN,cA5Cf,MADAX,GAAG,+CAAgD,MAC5C,KAkDXjK,EAAOC,SACL8J,UAAWA,OFoZTwB,KACA,SAAUvL,EAAQC,GG/dxBD,EAAAC,QAAA,qlCHqeMuL,OACA,SAAUxL,EAAQC,EAASC,GAEjC,YAqCA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAlCvFG,OAAOC,eAAeP,EAAS,cAC7BQ,OAAO,GAGT,IAAIgL,GAAkBvL,EAAoB,QAEtCwL,EAAmBvL,EAAuBsL,GAE1C/K,EAAmBR,EAAoB,QAEvCS,EAAmBR,EAAuBO,GAE1CiL,EAA8BzL,EAAoB,QAElD0L,EAA8BzL,EAAuBwL,GAErDE,EAAa3L,EAAoB,QAEjC4L,EAAa3L,EAAuB0L,GI7fxC/K,EAAAZ,EAAA,QAAYa,EJ2gBZ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GAV9NF,GIhgBpCiL,EAAA7L,EAAA,QJogBI8L,EAAkB7L,EAAuB4L,GIngB7CE,EAAA/L,EAAA,QJugBIgM,EAAkB/L,EAAuB8L,GIrgBxBE,EJ2gBD,SAAUC,GI1gB5B,QAAAD,GAAaE,IAAK,EAAA1L,EAAAL,SAAA+B,KAAA8J,EAAA,IAAAjF,IAAA,EAAA0E,EAAAtL,SAAA+B,MAAA8J,EAAAG,YAAA,EAAAZ,EAAApL,SAAA6L,IAAA/K,KAAAiB,KACVgK,GADU,OAEhBnF,GAAK4D,KAAO,iBAEZ5D,EAAKuB,SAAW1H,EAAMwL,UAAUC,SAAS/D,SAEzCvB,EAAKuB,SAASgE,kBACZ3B,KAAM,IACNrK,MAAO,IAGTyG,EAAKuB,SAASiE,cACZ5B,KAAM,IACNrK,MAAO,IAGTyG,EAAKuB,SAASkE,eACZ7B,KAAM,IACNrK,MAAO,IAGTyG,EAAKuB,SAASmE,eACZ9B,KAAM,IACNrK,MAAO,IAGTyG,EAAK2F,aAALb,EAAA1L,QACA4G,EAAK4F,eAALZ,EAAA5L,QA3BgB4G,EJ+iBlB,OApCA,EAAI4E,EAAWxL,SAAS6L,EAAeC,GAoChCD,GIhjBkCpL,EAAMgM,qBJmjBjD9M,GAAQK,QInjBa6L,GJujBfa,OACA,SAAUhN,EAAQC,GK5jBxBD,EAAAC,QAAA,61CLkkBMgN,OACA,SAAUjN,EAAQC,EAASC,GAEjC,YAGAK,QAAOC,eAAeP,EAAS,cAC7BQ,OAAO,GMzkBT,IAAMyM,IACJzE,UACE0E,UAAY1M,MAAO,MACnB2M,QAAU3M,MAAO,OACjB4M,OAAS5M,MAAO,KAElBoM,mKAOAC,0ZNwkBF7M,GAAQK,QMzjBO4M,GN6jBTI,OACA,SAAUtN,EAAQC,EAASC,GAEjC,YAGAK,QAAOC,eAAeP,EAAS,cAC7BQ,OAAO,GO9lBT,IAAM8M,IACJC,eAAgB,EAChBC,SAAS,EACTrK,OACEY,QAAS,QACT0J,WAAW,EACXzJ,OAAQ,KACR0C,WAAW,GAEbgH,gBACEC,uBAAwB,GAE1BvK,QACEwB,IAAK,IPomBT5E,GAAQK,QOhmBOiN,GPomBTM,OACA,SAAU7N,EAAQC,EAASC,GAEjC,YAGAK,QAAOC,eAAeP,EAAS,cAC3BQ,OAAO,GQ9nBX,IAAAK,GAAAZ,EAAA,QAAYa,ERqoBZ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GAF9NF,GQjoB9BgN,GACJrF,UACE0E,UAAY1M,MAAO,MACnBiI,YAAcjI,MAAO,GAAIM,GAAMyG,QAAQ,EAAI1C,OAAOC,WAAY,EAAID,OAAOE,eAE3E6H,uKAOAC,q3kDRmoBF7M,GAAQK,QQwbOwN,GRpbTC,OACA,SAAU/N,EAAQC,EAASC,GAEjC,cSxpBA,WAoBE,QAASoK,KAAsC,GAA3B0D,GAA2BC,UAAA5D,OAAA,OAAA6D,KAAAD,UAAA,GAAAA,UAAA,GAAtB,SAAUE,EAAYF,UAAA5D,OAAA,OAAA6D,KAAAD,UAAA,IAAAA,UAAA,EAC7CG,GAAgBJ,EAChB5D,EAAW+D,EAhBb,GAEIC,GACAhE,EACAK,EAJA4D,EAAUnO,EAAQ,OA0BtBoK,GAAUpJ,UAAUwJ,aAAe,SAAuBR,EAAOD,GAI/D,GAHAQ,EAAU,GAAI4D,GAGVjE,EAEF,IAAK,GAAIkE,GAAQ,EAAGA,EAAQpE,EAAMG,OAAQiE,IAAS,CACjD,GAAM7N,GAAQyJ,EAAMoE,EACpB7D,GAAQtC,IAAI1H,EAAO6N,GASvB,MAAO7D,IAGTzK,EAAOC,QAAUqK,MToqBbiE,OACA,SAAUvO,EAAQC,EAASC,GAEjC,YAqCA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAlCvFG,OAAOC,eAAeP,EAAS,cAC7BQ,OAAO,GAGT,IAAIgL,GAAkBvL,EAAoB,QAEtCwL,EAAmBvL,EAAuBsL,GAE1C/K,EAAmBR,EAAoB,QAEvCS,EAAmBR,EAAuBO,GAE1CiL,EAA8BzL,EAAoB,QAElD0L,EAA8BzL,EAAuBwL,GAErDE,EAAa3L,EAAoB,QAEjC4L,EAAa3L,EAAuB0L,GUhvBxC/K,EAAAZ,EAAA,QAAYa,EV8vBZ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GAV9NF,GUnvBpC0N,EAAAtO,EAAA,QVuvBIuO,EAAmBtO,EAAuBqO,GUtvB9CE,EAAAxO,EAAA,QV0vBIyO,EAAmBxO,EAAuBuO,GUxvBzBE,EV8vBA,SAAUC,GU7vB7B,QAAAD,GAAavC,IAAK,EAAA1L,EAAAL,SAAA+B,KAAAuM,EAAA,IAAA1H,IAAA,EAAA0E,EAAAtL,SAAA+B,MAAAuM,EAAAtC,YAAA,EAAAZ,EAAApL,SAAAsO,IAAAxN,KAAAiB,KACVgK,GADU,OAEhBnF,GAAK4D,KAAO,iBAEZ5D,EAAKuB,SAAW1H,EAAMwL,UAAUuC,OAAOrG,SAEvCvB,EAAKuB,SAASsG,OACZjE,KAAM,IACNrK,MAAO,GAGTyG,EAAKuB,SAASuG,QACZlE,KAAM,KAGR5D,EAAKuB,SAASwG,YACZnE,KAAM,KAGR5D,EAAK2F,aAAL4B,EAAAnO,QACA4G,EAAK4F,eAAL6B,EAAArO,QApBgB4G,EV2xBlB,OA7BA,EAAI4E,EAAWxL,SAASsO,EAAgBC,GA6BjCD,GU5xBmC7N,EAAM6N,eV+xBlD3O,GAAQK,QU/xBasO,GVmyBfM,KACA,SAAUlP,EAAQC,EAASC,GAEjC,YWxyBA,IAAAY,GAAAZ,EAAA,QAGAiP,GXkzBA,SAAiC/O,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAUD,GAAOV,QAAUF,GARlNU,GW1yBpCZ,EAAA,SX8yBIkP,EAEJ,SAAgChP,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAFlC+O,EW5yBrDnP,GAAOC,QAAU,SAAUoP,GAEzBA,EAAK3H,iBAAiB,UAAW,SAAU4H,GACzC,GAAIC,GAAOD,EAAEC,IACb,QAAQA,EAAKC,KACX,IAAK,QACH,GAAIC,GAAQF,EAAKE,MAEbC,EAAkB,CAClBD,GAAME,KAAOF,EAAMG,QACrBF,EAAkBD,EAAME,IAAMF,EAAMG,OAEtCH,EAAMC,gBAAkBA,CAExB,IAAIG,IAAU,EAAAT,EAAA9O,SAAsBmP,GAAO,EAC3CK,SAAQC,IAAK,aAAcF,EAAQG,KACnC,IAAIC,IAEFC,SAAUL,EAAQM,QAAQC,WAAWnL,SAASiF,MAC9C8F,KAAMH,EAAQG,KACdK,UAAWR,EAAQQ,UACnBC,OAAQT,EAAQS,OAChBb,QACAc,UAAW,GAAIC,cAAaX,EAAQU,WAGtClB,GAAKoB,YAAYR,EACjB,MACF,KAAK,OACHZ,EAAKoB,YAAY,kBACjBpB,EAAKqB,OACL,MACF,SACErB,EAAKoB,YAAY,mBAGrBpB,EAAKoB,YAAYnB,EAAEC,QAClB,KXyzBCoB,KACA,SAAU3Q,EAAQC,EAASC,GAEjC,YA0BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAvBvFG,OAAOC,eAAeP,EAAS,cAC7BQ,OAAO,IAETR,EAAQ2Q,gBAAkB3Q,EAAQkD,WAAalD,EAAQ4Q,KAAO5Q,EAAQsD,WAAatD,EAAQ+C,mBAAiBkL,EAE5G,IAAI4C,GAAU5Q,EAAoB,QAE9B6Q,EAAW5Q,EAAuB2Q,GAElCE,EAAU9Q,EAAoB,QAE9B+Q,EAAW9Q,EAAuB6Q,GYt3BtClQ,EAAAZ,EAAA,QAAYa,EZg4BZ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GAN9NF,GYz3BpCoQ,EAAAhR,EAAA,QZ63BIiR,EAAehR,EAAuB+Q,GYn3BpClO,EAAiB,SAAUC,EAAUmO,GAGzC,GAFA/O,KAAKY,SAAWA,MAEKiL,KAAjBkD,EAA4B,CAC9B,GAAIC,IACFC,UAAWvQ,EAAMwQ,aACjBC,UAAWzQ,EAAMwQ,aACjBE,OAAQ1Q,EAAM2Q,WACdC,eAAe,GAGb3B,EAAO/M,EAAS2O,sBACpBR,GAAe,GAAIrQ,GAAM8Q,kBAAkB7B,EAAK8B,MAAO9B,EAAK+B,OAAQV,GACpED,EAAaY,QAAQC,KAAO,qBAG9B5P,KAAK6P,cAAgBd,EACrB/O,KAAK8P,cAAgBf,EAAa9L,QAClCjD,KAAK8P,cAAcH,QAAQC,KAAO,qBAElC5P,KAAK+P,YAAc/P,KAAK6P,cACxB7P,KAAKgQ,WAAahQ,KAAK8P,cAEvB9P,KAAKiQ,cAIcpE,KAAfiD,EAAA7Q,SACFwP,QAAQyC,MAAM,uDAGGrE,KAAf3K,GACFuM,QAAQyC,MAAM,mDAGhBlQ,KAAKmQ,SAAW,GAAIjP,GAAJ4N,EAAA7Q,WAGlB,EAAA2Q,EAAA3Q,SAAc0C,EAAe9B,WAE3BuR,YAAa,WACX,GAAIC,GAAMrQ,KAAKgQ,UACfhQ,MAAKgQ,WAAahQ,KAAK+P,YACvB/P,KAAK+P,YAAcM,GAGrBxP,QAAS,SAAUyP,GACjBtQ,KAAKiQ,OAAOM,KAAKD,EAEjB,IAAI3C,GAAO3N,KAAKY,SAAS2O,sBACzBe,GAAK5L,QAAQiJ,EAAK8B,MAAO9B,EAAK+B,SAGhCc,WAAY,SAAUF,EAAMrE,GAC1BjM,KAAKiQ,OAAOQ,OAAOxE,EAAO,EAAGqE,IAG/BpJ,OAAQ,SAAUwJ,GAChB,GAEIJ,GAAMK,EAFNC,GAAa,EAEJC,EAAK7Q,KAAKiQ,OAAOjI,MAE9B,KAAK2I,EAAI,EAAGA,EAAIE,EAAIF,IAGlB,GAFAL,EAAOtQ,KAAKiQ,OAAQU,IAEC,IAAjBL,EAAKQ,QAAT,CAIA,GAFAR,EAAKpJ,OAAOlH,KAAKY,SAAUZ,KAAK+P,YAAa/P,KAAKgQ,WAAYU,EAAOE,GAEjEN,EAAKS,UAAW,CAClB,GAAIH,EAAY,CACd,GAAII,GAAUhR,KAAKY,SAASoQ,OAE5BA,GAAQC,YAAYD,EAAQE,SAAU,EAAG,YAEzClR,KAAKmQ,SAASjJ,OAAOlH,KAAKY,SAAUZ,KAAK+P,YAAa/P,KAAKgQ,WAAYU,GAEvEM,EAAQC,YAAYD,EAAQG,MAAO,EAAG,YAGxCnR,KAAKoQ,kBAGgBvE,KAAnBnN,EAAM0S,WACJd,YAAgB5R,GAAM0S,SACxBR,GAAa,EACJN,YAAgB5R,GAAM2S,gBAC/BT,GAAa,MAMrBU,MAAO,SAAUvC,GACf,OAAqBlD,KAAjBkD,EAA4B,CAC9B,GAAIpB,GAAO3N,KAAKY,SAAS2O,sBAEzBR,GAAe/O,KAAK6P,cAAc5M,QAClC8L,EAAarK,QAAQiJ,EAAK8B,MAAO9B,EAAK+B,QAGxC1P,KAAK6P,cAAc0B,UACnBvR,KAAK8P,cAAcyB,UACnBvR,KAAK6P,cAAgBd,EACrB/O,KAAK8P,cAAgBf,EAAa9L,QAElCjD,KAAK+P,YAAc/P,KAAK6P,cACxB7P,KAAKgQ,WAAahQ,KAAK8P,eAGzBpL,QAAS,SAAU+K,EAAOC,GACxB1P,KAAK6P,cAAcnL,QAAQ+K,EAAOC,GAClC1P,KAAK8P,cAAcpL,QAAQ+K,EAAOC,EAElC,KAAK,GAAIiB,GAAI,EAAGA,EAAI3Q,KAAKiQ,OAAOjI,OAAQ2I,IACtC3Q,KAAKiQ,OAAOU,GAAGjM,QAAQ+K,EAAOC,KAMpC,IAAMlB,GAAO,WAEXxO,KAAK8Q,SAAU,EAGf9Q,KAAK+Q,WAAY,EAGjB/Q,KAAKwR,OAAQ,EAGbxR,KAAKuB,gBAAiB,IAGxB,EAAAqN,EAAA3Q,SAAcuQ,EAAK3P,WAEjB6F,QAAS,SAAU+K,EAAOC,KAE1BxI,OAAQ,SAAUtG,EAAUmP,EAAaC,EAAYU,EAAOE,GAC1DnD,QAAQyC,MAAM,0DAKlB,IAAMhP,GAAa,SAAUuQ,EAAQC,GACnClD,EAAKzP,KAAKiB,MAEVA,KAAK0R,cAA2B7F,KAAd6F,EAA2BA,EAAY,WAErDD,YAAkB/S,GAAMiT,gBAC1B3R,KAAKoG,SAAWqL,EAAOrL,SAEvBpG,KAAKmG,SAAWsL,GACPA,IACTzR,KAAKoG,SAAW1H,EAAMkT,cAAc3O,MAAMwO,EAAOrL,UAEjDpG,KAAKmG,SAAW,GAAIzH,GAAMiT,gBAExBE,QAASJ,EAAOI,YAChBzL,SAAUpG,KAAKoG,SACfoE,aAAciH,EAAOjH,aACrBC,eAAgBgH,EAAOhH,kBAK3BzK,KAAKgB,OAAS,GAAItC,GAAMoT,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GAC5D9R,KAAKe,MAAQ,GAAIrC,GAAM8C,MAEvBxB,KAAK+R,KAAO,GAAIrT,GAAMsT,KAAK,GAAItT,GAAMuT,oBAAoB,EAAG,GAAI,MAChEjS,KAAK+R,KAAKG,eAAgB,EAC1BlS,KAAKe,MAAM+E,IAAI9F,KAAK+R,MAGtB7Q,GAAWrC,WAAY,EAAA+P,EAAA3Q,UAAc,EAAAyQ,EAAAzQ,SAAcuQ,EAAK3P,YAEtDsT,YAAajR,EAEbgG,OAAQ,SAAUtG,EAAUmP,EAAaC,EAAYU,EAAOE,GACtD5Q,KAAKoG,SAAUpG,KAAK0R,aACtB1R,KAAKoG,SAAUpG,KAAK0R,WAAYtT,MAAQ4R,EAAWL,SAGrD3P,KAAK+R,KAAK5L,SAAWnG,KAAKmG,SAEtBnG,KAAKuB,eACPX,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,QAEjCJ,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQ+O,EAAa/P,KAAKwR,SAUjE,IAAM1Q,GAAa,SAAUC,EAAOC,EAAQoR,EAAkBC,EAAYC,GACxE9D,EAAKzP,KAAKiB,MAEVA,KAAKe,MAAQA,EACbf,KAAKgB,OAASA,EAEdhB,KAAKoS,iBAAmBA,EAExBpS,KAAKqS,WAAaA,EAClBrS,KAAKsS,eAA6BzG,KAAfyG,EAA4BA,EAAa,EAE5DtS,KAAKwR,OAAQ,EACbxR,KAAKuS,YAAa,EAClBvS,KAAK+Q,WAAY,EAGnBjQ,GAAWjC,WAAY,EAAA+P,EAAA3Q,UAAc,EAAAyQ,EAAAzQ,SAAcuQ,EAAK3P,YAEtDsT,YAAarR,EAEboG,OAAQ,SAAUtG,EAAUmP,EAAaC,EAAYU,EAAOE,GAC1D,GAAI4B,GAAe5R,EAAS+D,SAC5B/D,GAAS+D,WAAY,EAErB3E,KAAKe,MAAMqR,iBAAmBpS,KAAKoS,gBAEnC,IAAIK,GAAeC,CAEf1S,MAAKqS,aACPI,EAAgB7R,EAAS+R,gBAAgBC,SACzCF,EAAgB9R,EAASiS,gBAEzBjS,EAAS2D,cAAcvE,KAAKqS,WAAYrS,KAAKsS,aAG3CtS,KAAKuS,YACP3R,EAAS2R,aAGX3R,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQhB,KAAKuB,eAAiB,KAAOyO,EAAYhQ,KAAKwR,OAEnFxR,KAAKqS,YACPzR,EAAS2D,cAAckO,EAAeC,GAGxC1S,KAAKe,MAAMqR,iBAAmB,KAC9BxR,EAAS+D,UAAY6N,IAYzB,IAAMM,IAEJC,SAAU,qBAEV3M,UAEE0E,UAAcrC,KAAM,IAAKrK,MAAO,MAChC4U,qBAAyBvK,KAAM,IAAKrK,MAAO,GAC3C6U,aAAiBxK,KAAM,IAAKrK,MAAO,GACnC8U,cAAkBzK,KAAM,IAAKrK,MAAO,GAAIM,GAAMoD,MAAM,IACpDqR,gBAAoB1K,KAAM,IAAKrK,MAAO,IAIxCoM,cAEE,oBAEA,gBAEA,YAEA,4EAEA,KAEA4I,KAAK,MAEP3I,gBAEE,8BACA,6BACA,gCACA,qCACA,6BAEA,oBAEA,gBAEA,2CAEA,2CAEA,oCAEA,+DAEA,yFAEA,mDAEA,KAEA2I,KAAK,OAUH7E,EAAkB,SAAUlI,EAAYgN,EAAUC,EAAQC,GAC9D/E,EAAKzP,KAAKiB,MAEVA,KAAKqT,aAAyBxH,KAAbwH,EAA0BA,EAAW,EACtDrT,KAAKsT,OAASA,EACdtT,KAAKuT,UAAYA,EACjBvT,KAAKqG,eAA6BwF,KAAfxF,EAA4B,GAAI3H,GAAMyG,QAAQkB,EAAWnE,EAAGmE,EAAWlE,GAAK,GAAIzD,GAAMyG,QAAQ,IAAK,IAGtH,IAAIqO,IAASvE,UAAWvQ,EAAMwQ,aAAcC,UAAWzQ,EAAMwQ,aAAcE,OAAQ1Q,EAAM2Q,WACzFrP,MAAKyT,2BACLzT,KAAK0T,yBACL1T,KAAK2T,MAAQ,CACb,IAAIC,GAAOC,KAAKC,MAAM9T,KAAKqG,WAAWnE,EAAI,GACtC6R,EAAOF,KAAKC,MAAM9T,KAAKqG,WAAWlE,EAAI,EAE1CnC,MAAKgU,mBAAqB,GAAItV,GAAM8Q,kBAAkBoE,EAAMG,EAAMP,GAClExT,KAAKgU,mBAAmBrE,QAAQC,KAAO,yBACvC5P,KAAKgU,mBAAmBrE,QAAQsE,iBAAkB,CAElD,KAAK,GAAItD,GAAI,EAAGA,EAAI3Q,KAAK2T,MAAOhD,IAAK,CACnC,GAAI5B,GAAe,GAAIrQ,GAAM8Q,kBAAkBoE,EAAMG,EAAMP,EAE3DzE,GAAaY,QAAQC,KAAO,oBAAsBe,EAClD5B,EAAaY,QAAQsE,iBAAkB,EAEvCjU,KAAKyT,wBAAwBlD,KAAKxB,EAElC,IAAIA,GAAe,GAAIrQ,GAAM8Q,kBAAkBoE,EAAMG,EAAMP,EAE3DzE,GAAaY,QAAQC,KAAO,oBAAsBe,EAClD5B,EAAaY,QAAQsE,iBAAkB,EAEvCjU,KAAK0T,sBAAsBnD,KAAKxB,GAEhC6E,EAAOC,KAAKC,MAAMF,EAAO,GAEzBG,EAAOF,KAAKC,MAAMC,EAAO,OAKMlI,KAA7BiH,GAA0CrF,QAAQyC,MAAM,qDAE5D,IAAIgE,GAAiBpB,CACrB9S,MAAKmU,iBAAmBzV,EAAMkT,cAAc3O,MAAMiR,EAAe9N,UAEjEpG,KAAKmU,iBAAL,oBAA+C/V,MAAQmV,EACvDvT,KAAKmU,iBAAL,YAAuC/V,MAAQ,IAE/C4B,KAAKoU,uBAAyB,GAAI1V,GAAMiT,gBACtCvL,SAAUpG,KAAKmU,iBACf3J,aAAc0J,EAAe1J,aAC7BC,eAAgByJ,EAAezJ,eAC/BoH,aAIF7R,KAAKqU,yBAKL,KAAK,GAJDC,IAAoB,EAAG,EAAG,EAAG,EAAG,IAChCV,EAAOC,KAAKC,MAAM9T,KAAKqG,WAAWnE,EAAI,GACtC6R,EAAOF,KAAKC,MAAM9T,KAAKqG,WAAWlE,EAAI,GAEjCwO,EAAI,EAAGA,EAAI3Q,KAAK2T,MAAOhD,IAC9B3Q,KAAKqU,uBAAuB9D,KAAKvQ,KAAKuU,yBAAyBD,EAAiB3D,KAEhF3Q,KAAKqU,uBAAwB1D,GAAIvK,SAAjC,QAAuDhI,MAAQ,GAAIM,GAAMyG,QAAQyO,EAAMG,GAEvFH,EAAOC,KAAKC,MAAMF,EAAO,GAEzBG,EAAOF,KAAKC,MAAMC,EAAO,EAI3B/T,MAAKwU,kBAAoBxU,KAAKyU,qBAAqBzU,KAAK2T,OACxD3T,KAAKwU,kBAAkBpO,SAAvB,aAAkDhI,MAAQ4B,KAAK0T,sBAAuB,GAAI/D,QAC1F3P,KAAKwU,kBAAkBpO,SAAvB,aAAkDhI,MAAQ4B,KAAK0T,sBAAuB,GAAI/D,QAC1F3P,KAAKwU,kBAAkBpO,SAAvB,aAAkDhI,MAAQ4B,KAAK0T,sBAAuB,GAAI/D,QAC1F3P,KAAKwU,kBAAkBpO,SAAvB,aAAkDhI,MAAQ4B,KAAK0T,sBAAuB,GAAI/D,QAC1F3P,KAAKwU,kBAAkBpO,SAAvB,aAAkDhI,MAAQ4B,KAAK0T,sBAAuB,GAAI/D,QAC1F3P,KAAKwU,kBAAkBpO,SAAvB,cAAmDhI,MAAQiV,EAC3DrT,KAAKwU,kBAAkBpO,SAAvB,YAAiDhI,MAAQ,GACzD4B,KAAKwU,kBAAkBE,aAAc,CAErC,IAAIC,IAAiB,EAAK,GAAK,GAAK,GAAK,GACzC3U,MAAKwU,kBAAkBpO,SAAvB,aAAkDhI,MAAQuW,EAC1D3U,KAAK4U,iBAAoB,GAAIlW,GAAMsD,QAAQ,EAAG,EAAG,GAAI,GAAItD,GAAMsD,QAAQ,EAAG,EAAG,GAAI,GAAItD,GAAMsD,QAAQ,EAAG,EAAG,GACnG,GAAItD,GAAMsD,QAAQ,EAAG,EAAG,GAAI,GAAItD,GAAMsD,QAAQ,EAAG,EAAG,IAC1DhC,KAAKwU,kBAAkBpO,SAAvB,gBAAqDhI,MAAQ4B,KAAK4U,oBAG/C/I,KAAfiD,EAAA7Q,SACFwP,QAAQyC,MAAM,6CAGhB,IAAI2E,YAEJ7U,MAAK8U,aAAepW,EAAMkT,cAAc3O,MAAM4R,EAAWzO,UACzDpG,KAAK8U,aAAL,QAA+B1W,MAAQ,EAEvC4B,KAAK+U,aAAe,GAAIrW,GAAMiT,gBAC5BvL,SAAUpG,KAAK8U,aACftK,aAAcqK,EAAWrK,aACzBC,eAAgBoK,EAAWpK,eAC3BuK,SAAUtW,EAAMuW,iBAChBC,WAAW,EACXC,YAAY,EACZC,aAAa,IAGfpV,KAAK8Q,SAAU,EACf9Q,KAAK+Q,WAAY,EAEjB/Q,KAAKyS,cAAgB,GAAI/T,GAAMoD,MAC/B9B,KAAK0S,cAAgB,EAErB1S,KAAKgB,OAAS,GAAItC,GAAMoT,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GAC5D9R,KAAKe,MAAQ,GAAIrC,GAAM8C,MAEvBxB,KAAKqV,MAAQ,GAAI3W,GAAM4W,kBAEvBtV,KAAK+R,KAAO,GAAIrT,GAAMsT,KAAK,GAAItT,GAAMuT,oBAAoB,EAAG,GAAI,MAChEjS,KAAK+R,KAAKG,eAAgB,EAC1BlS,KAAKe,MAAM+E,IAAI9F,KAAK+R,MAGtBxD,GAAgB1P,WAAY,EAAA+P,EAAA3Q,UAAc,EAAAyQ,EAAAzQ,SAAcuQ,EAAK3P,YAE3DsT,YAAa5D,EAEbgD,QAAS,WACP,IAAK,GAAIZ,GAAI,EAAGA,EAAI3Q,KAAKyT,wBAAwBzL,OAAQ2I,IACvD3Q,KAAKyT,wBAAyB9C,GAAIY,SAGpC,KAAK,GAAIZ,GAAI,EAAGA,EAAI3Q,KAAK0T,sBAAsB1L,OAAQ2I,IACrD3Q,KAAK0T,sBAAuB/C,GAAIY,SAGlCvR,MAAKgU,mBAAmBzC,WAG1B7M,QAAS,SAAU+K,EAAOC,GACxB,GAAIkE,GAAOC,KAAKC,MAAMrE,EAAQ,GAC1BsE,EAAOF,KAAKC,MAAMpE,EAAS,EAE/B1P,MAAKgU,mBAAmBtP,QAAQkP,EAAMG,EAEtC,KAAK,GAAIpD,GAAI,EAAGA,EAAI3Q,KAAK2T,MAAOhD,IAC9B3Q,KAAKyT,wBAAyB9C,GAAIjM,QAAQkP,EAAMG,GAChD/T,KAAK0T,sBAAuB/C,GAAIjM,QAAQkP,EAAMG,GAE9C/T,KAAKqU,uBAAwB1D,GAAIvK,SAAjC,QAAuDhI,MAAQ,GAAIM,GAAMyG,QAAQyO,EAAMG,GAEvFH,EAAOC,KAAKC,MAAMF,EAAO,GACzBG,EAAOF,KAAKC,MAAMC,EAAO,IAI7B7M,OAAQ,SAAUtG,EAAUmP,EAAaC,EAAYU,EAAOE,GAC1D5Q,KAAKyS,cAAcjP,KAAK5C,EAAS+R,iBACjC3S,KAAK0S,cAAgB9R,EAASiS,eAC9B,IAAIL,GAAe5R,EAAS+D,SAC5B/D,GAAS+D,WAAY,EAErB/D,EAAS2D,cAAc,GAAI7F,GAAMoD,MAAM,EAAG,EAAG,GAAI,GAE7C8O,GAAYhQ,EAASoQ,QAAQuE,QAAQ3U,EAASoQ,QAAQwE,cAItDxV,KAAKuB,iBACPvB,KAAK+R,KAAK5L,SAAWnG,KAAKqV,MAC1BrV,KAAKqV,MAAMI,IAAMzF,EAAWL,QAE5B/O,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,WAAQ6K,IAAW,IAKtD7L,KAAKmU,iBAAL,SAAoC/V,MAAQ4R,EAAWL,QACvD3P,KAAKmU,iBAAL,oBAA+C/V,MAAQ4B,KAAKuT,UAC5DvT,KAAK+R,KAAK5L,SAAWnG,KAAKoU,uBAE1BxT,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQhB,KAAKgU,oBAAoB,EAMlE,KAAK,GAFD0B,GAAoB1V,KAAKgU,mBAEpBrD,EAAI,EAAGA,EAAI3Q,KAAK2T,MAAOhD,IAC9B3Q,KAAK+R,KAAK5L,SAAWnG,KAAKqU,uBAAwB1D,GAElD3Q,KAAKqU,uBAAwB1D,GAAIvK,SAAjC,aAA4DhI,MAAQsX,EAAkB/F,QACtF3P,KAAKqU,uBAAwB1D,GAAIvK,SAAjC,UAAyDhI,MAAQmQ,EAAgBoH,eACjF/U,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQhB,KAAKyT,wBAAyB9C,IAAK,GAE5E3Q,KAAKqU,uBAAwB1D,GAAIvK,SAAjC,aAA4DhI,MAAQ4B,KAAKyT,wBAAyB9C,GAAIhB,QACtG3P,KAAKqU,uBAAwB1D,GAAIvK,SAAjC,UAAyDhI,MAAQmQ,EAAgBqH,eACjFhV,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQhB,KAAK0T,sBAAuB/C,IAAK,GAE1E+E,EAAoB1V,KAAK0T,sBAAuB/C,EAKlD3Q,MAAK+R,KAAK5L,SAAWnG,KAAKwU,kBAC1BxU,KAAKwU,kBAAkBpO,SAAvB,cAAmDhI,MAAQ4B,KAAKqT,SAChErT,KAAKwU,kBAAkBpO,SAAvB,YAAiDhI,MAAQ4B,KAAKsT,OAC9DtT,KAAKwU,kBAAkBpO,SAAvB,gBAAqDhI,MAAQ4B,KAAK4U,gBAElEhU,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQhB,KAAKyT,wBAAyB,IAAK,GAI5EzT,KAAK+R,KAAK5L,SAAWnG,KAAK+U,aAC1B/U,KAAK8U,aAAL,SAAgC1W,MAAQ4B,KAAKyT,wBAAyB,GAAI9D,QAEtEiB,GAAYhQ,EAASoQ,QAAQ6E,OAAOjV,EAASoQ,QAAQwE,cAErDxV,KAAKuB,eACPX,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,WAAQ6K,IAAW,GAEpDjL,EAASsG,OAAOlH,KAAKe,MAAOf,KAAKgB,OAAQgP,GAAY,GAKvDpP,EAAS2D,cAAcvE,KAAKyS,cAAezS,KAAK0S,eAChD9R,EAAS+D,UAAY6N,GAGvB+B,yBAA0B,SAAUuB,GAClC,MAAO,IAAIpX,GAAMiT,gBAEfE,SACEkE,cAAiBD,EACjBE,MAASF,GAGX1P,UACE6P,cAAkB7X,MAAO,MACzB8X,SAAa9X,MAAO,GAAIM,GAAMyG,QAAQ,GAAK,KAC3CgR,WAAe/X,MAAO,GAAIM,GAAMyG,QAAQ,GAAK,MAG/CqF,aACF,gKZq2BEC,eAAgB,8+BAoDpBgK,qBAAsB,SAA8Bd,GAClD,MAAO,IAAIjV,GAAMiT,gBAEfE,SACEuE,SAAYzC,GAGdvN,UACEiQ,cAAkBjY,MAAO,MACzBkY,cAAkBlY,MAAO,MACzBmY,cAAkBnY,MAAO,MACzBoY,cAAkBpY,MAAO,MACzBqY,cAAkBrY,MAAO,MACzBsY,aAAiBtY,MAAO,MACxBuY,eAAmBvY,MAAO,GAC1BuW,cAAkBvW,MAAO,MACzBwW,iBAAqBxW,MAAO,MAC5BwY,aAAiBxY,MAAO,IAG1BoM,aAAc,gKAUdC,eAAgB,uvCaj/ClBoM,iBAAW,GAAAnY,GAAAyG,QAAA,KbsiDfoJ,EAAgBqH,eAAiB,GAAIlX,GAAMyG,QAAQ,EAAK,GAExDvH,EAAQ+C,eAAiBA,EapiDvB6J,ebsiDF5M,EAAQ4Q,KAAOA,EazhDb/D,eb2hDF7M,EAAQ2Q,gBAAkBA,GAIpBuI,OACA,SAAUnZ,EAAQC,EAASC,GAEjC,YAGAK,QAAOC,eAAeP,EAAS,cc/jD/BQ,OAAA,GdkkDA,IAAI2Y,IACF3Q,UACE0E,UAAc1M,MAAO,MACrB4Y,YAAgB5Y,MAAO,GACvB6Y,UAAc7Y,MAAO,MAGvBoM,aAAc,4JAEdC,eAAgB,kdAIlB7M,GAAQK,QAAU8Y,GAIZG,KACA,SAAUvZ,EAAQC,EAASC,GcllDjC,YdulDAK,QAAOC,eAAeP,EAAS,cctlD/BQ,OAAA,GdylDA,IAAI+Y,IcxlDJ/Q,Ud4lDQ0E,UAAY1M,MAAO,MACnBgZ,MAAQhZ,MAAO,Gc5lDvBiZ,YAAAjZ,MAAA,Kd8lDQkZ,YAAclZ,MAAO,GACrBmZ,QAAUnZ,MAAO,GACjByY,WAAazY,MAAO,IAIxBoM,aAAc,gKAEdC,eAAgB,82CAIpB7M,GAAQK,QAAUkZ,GclmDdK,KACA,SAAKC,EAAL7Z,EAAqBC,GAErB,YA2CE,SAAAC,GAASC,GAAA,MAAAA,MAAAC,WAAAD,GAAAE,QAAAF,GAxCXG,OAAAC,eAAaP,EAAA,cACXQ,OAAA,GAGA,IAAAsZ,GAJW7Z,EAAA,QAMX8Z,EANW7Z,EAAA4Z,GAQXE,EAAQ/Z,EARG,QAUXga,EAAQ/Z,EAVG8Z,GAYXvZ,EAZWR,EAAA,QAcXS,EAdWR,EAAAO,GAgBXE,EAhBWV,EAAA,QAkBXW,EAlBWV,EAAAS,GAoBXE,EAAAZ,EApBW,QAsBXa,EAgBA,SAtCWX,GAAA,GAAAA,KAAAC,WAAA,MAAAD,EAAA,IAAAY,KAAA,UAAAZ,EAAA,OAAAa,KAAAb,GAAAG,OAAAW,UAAAC,eAAAC,KAAAhB,EAAAa,KAAAD,EAAAC,GAAAb,EAAAa,GAAA,OAAAD,GAAAV,QAAAF,EAAAY,GAAAF,GAwBXoB,EAAAhC,EAxBW,QA4BXia,GAFSha,EA1BE+B,GA4BXhC,EA5BW,SA8BXka,EAAAja,EA9BWga,GAgCXE,EAAAna,EAhCW,QAoCXoa,GAFSna,EAlCEka,GAoCXna,EApCW,SdgpDbqa,EAAQ,WcrmDR,QAAKC,KAALC,IdumDA,EAAI9Z,EAAiBL,SAAS+B,KAAMkY,GcpmDlClY,KAAAqY,eAAU,EAUVrY,KAAAgB,OACEA,EASFhB,KAAAsY,SAUAtY,KAAAuY,SAAU,GAUVvY,KAAAyX,WACE,GASFzX,KAAAwY,aAEE,GAQFxY,KAAAoY,OA7DWpY,KAAbyY,aAAAL,EAAA,6Bd+mDApY,KAAK0Y,IAAM,GctiDX1Y,KAAK2Y,OACNC,GAAA,KdwiDGC,MAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,McziDIC,OAAA,Kd2iDZC,OAAQ,Mc1iDVC,OAAO,KACLC,OAAKC,KACH5Q,aACA6Q,OAAG,KAFiCC,QAGnCC,Md4iDHC,IAAS,Kc1iDTC,QAAKC,MACHC,QAAA,KACAC,QAAA,KACAC,cACEC,aACDC,QAAA,MACHC,QAAA,KANsCC,QAOnCV,Kd4iDHW,QAAS,Mc1iDTC,QAAKC,KACNC,QAhBD,MAiBDC,IAAA,Kd4iDGC,QAAS,MACTC,QAAS,KACTC,QAAS,Kc3iDXC,QAAA,MACDC,QAAA,Kd6iDGC,QAAS,MACTC,QAAS,KACTC,QAAS,Kc5iDXC,QAAS1C,MACP2C,QAAK,KACHC,QAAMC,MACNA,IAAKC,KACLD,QAAK5J,MACN8J,QAAA,KACDC,QAAKhD,MdgjDPtY,KAAKmY,eAELnY,KAAKub,Oc9iDSC,QAAA,iCdgjDZC,QAAW,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,Kc/iDlDC,UAAO,cAAY,QAAC3B,KAAD,KAAU4B,KAC3BC,QAAIC,QAAJ,0BACAC,YAAI9O,IAAJ,8BACA+M,6CACAgC,SAAA,uCdmjDF/b,KAAK2Y,YAAc,GAAIja,GAAMsd,YAoR/B,OAjRA,EAAIxd,EAAcP,SAASia,IACzBtZ,IAAK,eACLR,MAAO,WACL,GAAIyG,GAAQ7E,IAEZ,OAAO,IAAI6X,GAAU5Z,QAAQ,SAAU8b,EAAS4B,GAC9C9W,EAAMwU,eAAiB,GAAItB,GAAO9Z,QAAQge,QchkD9CxT,KAAA,UAkBD6Q,EAAA,IdijDQE,MAAM3U,EAAMwV,aAEfxV,EAAM8U,eAAiB,GAAI5B,GcjjDd9Z,QAAAie,QACjBC,IAAOtX,EAAA4T,aACLsB,QACDD,OAAA,WdkjDOC,OAGDP,MAAM3U,EAAMwV,acvjDnBxV,EAAAwV,YAAA+B,OAAAC,wBAAAxX,EAAA2T,YAAA,Sd6jDA5Z,IAAK,0BcljDIR,MAAA,SAAAA,OAGLQ,IAAA,cACE6O,iBACAsM,sBACD,IAHD,GAAA9N,GAAA,EAAAA,EAAAjM,KAAAsY,MAAAtQ,OAAAiE,IAAA,CADF,GAAAkP,GAAAnb,KAAAsY,MAAArM,EADFkP,GAAAC,SAQDD,EAAA5J,UdsjDKvR,KAAKsY,acnjDT1Z,IAAA,eACER,MAAA,WAGA,UAAAyZ,GAAA5Z,QAAA,SAAA8b,EAAA4B,GAGA5B,SAmBEnb,IAAA,kBACAmb,iBACD,MAJD,IAAAlC,GAAA5Z,QAAA,SAAA8b,EAAA4B,GAKA5B,SASAnb,IAAA,UACAR,MAAA,WACA,GAAAke,GAAWlE,IAEX,WAAMP,GAAY5Z,QAAA,SAAA8b,EARY4B,GAS9BW,EAAMC,eAAYC,KAAA,WAClBF,EAAOG,kBAAYD,KAAA,WACnB/O,QAAW2K,IAAL,gBACN2B,aAMAnb,IAAA,OACAR,MAAA,WACA,GAAAse,GAAWtE,IAEX,WAAOP,GAAY5Z,QAAA,SAAA8b,EAtBW4B,GAuB9Be,EAAMC,UAAY,GAAA5E,GAAA9Z,QAAA2e,OAvBYF,EAAAjF,WAAAoF,WAwB9BH,EAAOrC,YAAY,GAAAtC,GAAA9Z,QAAA2e,QAxBW,IAAAC,WA+B9B9E,EAAO9Z,QAAKma,UAAOM,IAAAta,MAAAse,EA/BWhE,IdkmD5BgE,EAAOI,eAAeN,KAAK,WACzBE,EAAO/C,eAAeoD,QcvjD+DhF,EAAA9Z,QAAA+e,UAAAD,QdyjDrFhD,WAMNnb,IAAK,ccxjDLR,MAAK6e,Wd0jDHjd,KAAKkd,QAAU,GAAInF,GAAO9Z,QAAQkf,ScxjDpCC,GAAKC,KAAQjF,KAAI1Z,wBACjB4e,MAAKC,KAAQnF,KAAI1Z,yBd0jDb8e,GAAMxd,KAAKoY,KAAO,wBcxjDtBqF,GAAKC,UAAL,wBd0jDIC,MAAO3d,KAAKoY,KAAO,yBcxjDvBwF,GAAIC,kCACJC,MAAIC,KAAU3F,KAAd,yBd0jDI4F,GAAMhe,KAAKoY,KAAO,wBcxjDtB6F,GAAKje,KAAIiM,KAAWA,wBAClBiS,MAAMC,UAAc/Q,yBACpByQ,QAAUhK,KAAA,wBACVkK,WAAUlK,KAASsK,yBACpBC,GAAApe,KAAAoY,KAAA,wBd0jDGiG,MAAOre,KAAKoY,KAAO,yBcxjDvBhL,GAAMkR,UAAaxV,wBACjByV,GAAAve,KAASoX,KAASA,wBADpBoH,MAAAxe,KAAAoY,KAAA,yBd4jDIqG,GAAMze,KAAKoY,KAAO,wBcxjDtBsG,MAAKvG,UAAL,yBACAwG,GAAK3e,KAAIiM,KAAT,wBACE2S,GAAKzG,UAAY5H,wBAClBsO,MAAA7e,KAAAoY,KAAA,yBd0jDG0G,GAAM9e,KAAKoY,KAAO,wBcxlDqE2G,MAAA/e,KAAAoY,KAAA,yBAiCzF4G,GAAMC,UAAQC,wBd0jDZC,MAAOnf,KAAKoY,KAAO,yBcxjDrBgH,GAAApf,KAAAoY,KAAA,wBd0jDEiH,GAAMrf,KAAKoY,KAAO,wBAClBkH,MAAOtf,KAAKoY,KAAO,yBcxjDrBmH,GAAIvf,KAAOoN,KAAMkR,wBACfkB,MAAMrB,mCACNsB,GAAIrI,UAAO,wBd0jDXsI,GAAM1f,KAAKoY,KAAO,wBcxjDlBuH,MAAA3f,KAAAoY,KAAA,yBd0jDAwH,GAAM5f,KAAKoY,KAAO,wBcxjDlByH,MAAA7f,KAAAoY,KAAA,2BAKAoB,MAASsG,mBAGLlhB,IAAA,sBAAqCR,MAAA,SAAA8gB,EAAAa,EAAA3S,EAAAsQ,EAAAsC,GACnC,GAAAC,GAAAjgB,IAEEkgB,qBACAC,mBAGLngB,KAAAqY,eAAA,Ed4jDLrY,KAAKid,WcxjDHjd,KAAAqd,MAAIlC,MAAJrZ,MAAA,Gd2jDF9B,KAAKud,MAAQ,GAAI7e,GAAMoD,MAAM,UAE7B9B,KAAK0d,eAAiBA,CcpjDd0C,QAJJjF,GAAOxD,EAAI1Z,QAEP8f,EAAA,EAEAqC,IAAWnU,EAAAmB,EAAMkR,aAAAtW,OAAAiE,IAAA,CACf,GAAAkS,GAAKhG,eAAoBlM,EAC1B4R,GAAEhK,KAFHwM,IAAAlC,EAAA/G,KAAAyG,GAGDE,EACDlK,KACAkJ,IAAMoB,EAAA/G,KAAK4F,GAIT5P,EAAAkR,aAAKnG,cAAYlM,EAAQjD,GACzBoX,gBAAWhJ,OAGZpX,KAAAmY,cAGJ,QAAAmI,GAAA,EAAAA,EAAA,EAAApB,EAAAlX,OAAAsY,IACDnF,iBAAA5K,KAAgB,EdinDlB,KAAK,GAAIgQ,GAAU,EAAGA,EAAUrB,EAAelX,OAAQuY,IAAW,CAChE,GAAIT,Ic/mDL,SAAAS,GA5FwF,GAAAtB,GAAAC,EAAAqB,EAgC/B,aAAnDtU,EAAmDqS,aAAAiC,GAAA,CA6D3D,GAAAC,GAAApT,EAAAkR,aAAAiC,GACFnJ,GAAA,EAAAa,EAAAxC,KAAA+K,EAAApJ,KAAAyG,EAAAE,EAAA,Qd+jDWmC,EAAUvI,EAAiB1Z,QAC3BkiB,EAAO,KAEPM,EAAOR,EAAO1E,MAAMmF,OACxB,KAAKZ,IAAaG,GAAOU,MACvB,GAAIV,EAAOU,MAAM7hB,eAAeghB,GAAY,CAC1C,GAAIc,GAAWX,EAAOU,MAAMb,GAAWe,QAAQ,SAAU,GACzD,KAAgC,IAA5BJ,EAAKK,QAAQF,GAAkB,CAEjC,GAAIG,GAAOlN,KAAKmN,IAAY,EAAR/B,EAAca,EAC9BiB,GAAOb,IACTA,EAAUa,EACVZ,EAAOF,EAAOU,MAAMb,KAM5B,GAAImB,GAAOhB,EACP9E,MAAO,GAEP+F,EAAa9J,EAAK+J,QAAQ,EAG5BhG,OADwC,KAA/B8E,EAAOhD,QAAQiE,GACjB,GAAInJ,GAAO9Z,QAAQmjB,KAAK,WAC7BnB,EAAO/C,QAAQmE,cAAclB,EAAM,IAAMc,EAAK1I,SAAW,IAAK,GAC9D0H,EAAO9H,YAAsB,EAAVoI,GAAe,IAClCH,WAAW,WACTH,EAAO9H,YAAsB,EAAVoI,GAAe,GACjC,Mep+DjB,MAAAxD,MAAAhF,EAAA9Z,QAAA+e,UAAAsE,QAAAlK,Gfu+DmB,GAAIW,GAAO9Z,QAAQmjB,KAAK,WAC7BnB,EAAO9H,YAAsB,EAAVoI,GAAe,Iev+DhDH,WAAA,Wfy+DgBH,EAAO9H,YAAsB,EAAVoI,GAAe,GACjC,MACF,MAAMxD,MAAMhF,EAAO9Z,QAAQ+e,UAAUsE,QAAUlK,GAEpD+D,EAAKoG,SAAW,MAChBtB,EAAO3H,MAAM/H,KAAK4K,GAClB8E,EAAOhD,QAAQiE,IAAc,IAOzBX,QAILrI,IAGTta,GAAQK,QAAUia,GAIZsJ,Kex/DF,SAAKpb,EAAW1H,EAAMwL,GAEtB,YfkiEJ,SAASpM,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GeliE7DG,OAAtBC,eAAAP,EAAA,cf6/DFQ,OAAO,Get/DN,IAAAgL,GAAAvL,EAAA,Qf2/DCwL,EAAmBvL,EAAuBsL,Gev/D1C/K,EAAKoM,EAAL,QACDnM,EAAAR,EAAAO,Gf4/DCiL,EAA8BzL,EAAoB,QAElD0L,EAA8BzL,EAAuBwL,GAErDE,EAAa3L,EAAoB,QAEjC4L,EAAa3L,EAAuB0L,GAEpC/K,EAASZ,EAAoB,QAE7Ba,EAcJ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GAd9NF,GAEhCkL,EAAkB9L,EAAoB,QAEtC+L,EAAkB9L,EAAuB6L,GAEzC8X,EAAkB5jB,EAAoB,QAEtC6jB,EAAmB5jB,EAAuB2jB,GAE1CE,EAAmB9jB,EAAoB,QgB9hEvC+jB,GhBgiEmB9jB,EAAuB6jB,GgBhiE1C,SAAAjY,GAGI,QAAAkY,GAAkBC,IhBuiEtB,EAAIvjB,EAAiBL,SAAS+B,KAAM4hB,EgBpiE9B,IAAA/c,IAAA,EAAA0E,EAAAtL,SAAA+B,MAAA4hB,EAAA3X,YAAA,EAAAZ,EAAApL,SAAA2jB,IAAA7iB,KAAAiB,KAAAgK,GASkD,OAPlD8X,yBAEAC,WAAW7U,EAAK6U,UALD5X,SAAA/D,SAAAvB,EAAjBuB,SAAAsG,OhB8iEFjE,KAAM,KAIR5D,EAAMuB,SAAS4b,WgBriETvZ,KAAA,KAIA2E,eAAMC,EAAkBA,QhBuiE9BxI,EAAM4F,eAAiBiX,EAAiBzjB,QgB9iEgB4G,EhBkjE1D,OgBhkEE,EAAA4E,EAAa0D,SAAbyU,EAAAlY,GhBgkEKkY,GgBtiEChU,WAEDhQ,GAAAK,QAAA2jB,GAIHK,KACEjV,SAAKoB,EAALxQ,EAAiBC,GAEjB,YAnCJ,IAAAY,GAAAZ,EAAA,QAJJiP,GhB2lEA,SAAiC/O,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAUD,GAAOV,QAAUF,GgB/iElPU,GA5CJZ,EAAA,SAHAkP,EhB4lEA,SAAgChP,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAFlC+O,EAMrDnP,GAAOC,QAAU,SAAUoP,GAEzBA,EAAK3H,iBAAiB,UAAW,SAAU4H,GACzC,GAAIC,GAAOD,EAAEC,IiBvmEhB,QAAAA,EAAYC,KACX,YjBymEM,GAAI0U,GAAS3U,EAAK2U,OAEdjU,GAEFsU,WAAYL,EAAO7Z,OACnB8Z,SAAU5U,EAAK4U,SACfD,OAAQ3U,EAAK2U,OACbE,UAAW7U,EAAK6U,UAChBI,aAAcjV,EAAKiV,aAGrB1U,SAAQ2J,KAAK,SACb,KAAK,GAAInL,GAAQ,EAAGA,EAAQ4V,EAAO7Z,OAAQiE,IAAS,CiBxmE1D,GAAS/D,GAAWE,EAApB6D,GAEMmW,EAAJ,CACIC,GAAS/U,KAAAF,EAAbG,QACI1E,EAAJuE,EAAAE,IAAAF,EAAAG,OAEAH,EAAAC,iBAEI1G,IAAJ2b,IAAA,EAAAvV,EAAA9O,SAAAmP,GACAO,EAAA2U,EAAA3U,IAGI4U,GAAJV,OAAA5V,GAAAoB,kBjB0mEMO,EAAWiU,OAAO5V,GAAO0B,KAAOA,EiBvmElC6U,QAAKpa,QAAQJ,UjB0mEbgF,EAAKoB,YAAYR,EiBxmErB,MACA,YACAZ,EAAAoB,YAAA,kBACApB,EAAAqB,OjB0mEI,MiBxmEA,SACJrB,EAASoB,YAAWuC,sBAIlB9H,KjBgnEA4Z,KiBxmEAL,SAAO7R,EAAKgS,EAAZ1kB,GjB2mEN,ciBtmEQ,WjBwnEN,QAASqK,GAAUE,EAASN,EAAUF,GiBxmElCiB,GjB8mEE8H,GiBxmEI+R,EACR/b,EACEiC,EACEA,EACA+Z,EjB0mEAJ,EiBpnEF1Z,EAAAhL,EAAA,QACAgL,EAAWH,MjB0mET2Z,EAAS,GAAIO,GiBxmET/Z,KAUJA,EAAc,EACZ2Z,EAAApa,EAAQJ,MjBinEd,KAAK2I,EAAI,EAAGA,EAAI6R,EAAI7R,IiBxmEhB0R,EAAO9R,EAAKoS,IAAZhS,GAGF9H,EAAA0Z,IACA9Z,KAAA,OACAQ,MAAA4Z,EACAlc,KAAA,OACAiC,MAAYZ,OACV6a,WjB4mEFT,EAAO7R,KAAKgS,EAMd,KiB5mEKM,IjB4mEET,EAAOpa,OAAS,GA6CrB,GiBppEFrB,EAAAyb,EAAAU,QACAla,EAAMma,EAAOX,QACbvZ,EAAAlC,EAAAiC,EAGAC,EAAA8Z,IACAla,KAAA,OACAQ,MAAA4Z,EACDlc,OjB0mEKiC,MAASA,EiBxmEbF,OAAA,IjB4mEEG,EAAKD,GAAOF,OAASia,EACrB9Z,EAAKlC,GAAM+B,OAASia,EAGpBN,EAAO9R,KAAKoS,GAIU,IAAlBP,EAAOpa,SACTY,EAAQwZ,EAAOY,MACfL,EAAQhc,EAAOiC,EkB/uErBxC,EAAUuc,IACR7X,KAAY1M,OACP6K,MAAA4Z,EACLI,KAAc7kB,EAJUwK,QAM1B4B,WlBqvEM3B,EAAKD,GAAOF,OAASia,EAErBN,EAAO9R,KAAKoS,IAOQ,IAAlBP,EAAOpa,QAAkC,IAAlBqa,EAAOra,OmBpwExC,InBqwEQ6a,IAEAK,EAAOb,EAAOra,OmBvwEtB0a,EAAA,EAAAA,EAAAQ,EAAAR,InB0wEUN,EAAO7R,KAAK8R,EAAOS,QmB5vEzBK,OnBowEAta,GmB1wEauZ,EAAAY,OnB0wEFva,KAAO,OmBpwElB0a,EAIF3Y,gBnB8wEI4Y,KACA,SAAUzlB,EmBjuED0lB,EnBiuEkBxlB,GAEjC,YAGAK,QAAOC,eAAeP,EAAS,cAC7BQ,OAAO,GAET,IAAIklB,IACFld,UACE0E,UAAY1M,MAAO,MACnBmlB,KAAOnlB,MAAO,GACd6kB,YAAc7kB,MAAO,KAEvBoM,aAAc,sJACdC,eAAgB,w6BAGlB7M,GAAQK,QAAUqlB,GoBjzELE,KACAC,aAAUC,GpBuzEvB,YoBnzEoBxlB,QAAAC,eAA4BP,EAA5B,cAAbQ,OAAA,GAIA,IAAMulB,IAANvd,UACe0E,UAA0B8Y,MAAD,MAAxC3V,QAAA7P,MAAA,GpBk0EC+kB,UAAY/kB,MAAO,MoB7zEdqX,6KAANhL,eAAA,svBpBu0EP7M,GAAQK,QAAUolB,GAIZQ,KoBp0EOC,cAEXnmB,EAAAC,QAAagmB,45EAERG,KACMC,aAAOnmB,GAAA,YACCK,QAAdC,eAAAP,EAAA,cACAQ,OAAM6lB,GAAO,IAAbP,GAAA9lB,EAAA8lB,GAAA7P,KAAA6P,GAGAQ,GAFMC,UAAyBP,EAADJ,QAAT,GAAAE,EAArB9lB,EAAA6lB,QAAAC,EAAA,IACMU,gBACAC,qBACX,MAAIF,KAAA,EAAmB,GADlBvmB,EAAAsmB,MAAA,SAAAN,EAAAvD,EAAAiE,GAIA,MAAMC,aAAgBX,IAQAY,GAN3B5mB,EAAA6mB,IAAA,SAAApE,EAAAiE,EAAAI,GACA,MAAIviB,IAASwiB,EAAIC,GAAOC,GAEjBhR,EAAAiR,KAAP,SAAAzE,EAAAiE,EAAAI,GALK,MAAArE,IAAAiE,EAAAjE,GAAA6D,EAAAQ,EAAA,MAO+B7Q,EAAUkR,MAAA,SAAtB1E,EAAAiE,EAAAV,GAAnB,OAAAA,EAAAvD,IAAAiE,EAAAjE,IACkC0E,EAAUC,OAAtB,SAAA3E,EAAAiE,EAAAV,GAAtB,MAAAM,IAAAN,EAAAvD,IAAAiE,EAAAjE,GAAA,OAEA5K,EAAA7X,EAAA6X,IAAA,SAAAwP,EAAAlc,EAAAC,EAAA9G,EAAAC,GACA,MAAM+iB,sBAcXC,GARWtR,EAAWA,UAAX,SAAXoR,EAAAlc,EAAAC,GANK,MAAAyM,GAAAwP,EAAAlc,EAAAC,EAAA,MAUSoc,EAANtB,WAAR,SAAAuB,EAAAC,EAAA1B,GAEA,OADAA,EAAI7a,EAASwc,EAALD,EAAR1B,IACa4B,GAAb,IAAA5B,IAEO7a,EAASC,MAASyc,SAAzB7B,GANK,MAAAA,GAAA/P,KAAA6R,MAAA9B,KpB22EHO,GoBl2EOiB,EAADpB,KAAR,SAAAJ,GACA,MAAI5a,GAAJ,cAAS2c,KAADhB,IAAAf,KAEDhmB,EAAAgoB,MAAO,SAAAC,EAAAC,GACZ,MAAIC,GAAJ,WAASP,KAATb,IAAA,QAAAkB,EAAA,OAAAC,KAEO/c,EAAAkb,KAAA,SAAPL,GACD,MAJDA,KAAA,UpB+1EiBhmB,EAAQumB,aAAe,SAAsBP,GoBx1EzD,OAAMoC,YAEXpC,EAAqBqC,EAAKC,oBAApB,SAANtC,GACA,MAAO/P,MAAKmN,KAAI4C,KAAMuC,IAAtBvC,GAAA/P,KAAAnG,IAAA,KC/EFsY,GrB06EsBpoB,EAAQymB,gBAAkB,SAAyBT,GoBx1ElE,MAAMzI,MAAOyI,EACXoC,KAAyB3F,IpB21EdziB,EAAQ2mB,cAAgB,SAAuB6B,EAAMvB,EAAMwB,EAAMzB,GAGnF,GAAIziB,GAAI0R,KAAK8Q,IAAIC,EAAOC,GAAQhR,KAAKyS,IAAID,GACrCnkB,EAAI2R,KAAKyS,IAAIF,GAAQvS,KAAK8Q,IAAI0B,GAAQxS,KAAK8Q,IAAIyB,GAAQvS,KAAKyS,IAAID,GAAQxS,KAAKyS,IAAI1B,EAAOC,EAC5F,OAAOhR,MAAK0S,MAAMpkB,EAAGD,IAENtE,EAAQ4oB,WAAa,SAAoBzB,EAAIC,GAC5D,MAAOnR,MAAK4S,KAAK1B,EAAKA,EAAKC,EAAKA,IAEdpnB,EAAQ8oB,cAAgB,SAAuB3B,EAAIC,GACrE,MAAOD,GAAKA,EAAKC,EAAKA,GAENpnB,EAAQ+oB,YAAc,SAAqB5B,EAAIC,EAAI4B,GACnE,MAAO/S,MAAK4S,KAAK1B,EAAKA,EAAKC,EAAKA,EAAK4B,EAAKA,IAEvBhpB,EAAQipB,eAAiB,SAAwB9B,EAAIC,EAAI4B,GAC5E,MAAO7B,GAAKA,EAAKC,EAAKA,EAAK4B,EAAKA,GAEbhpB,EAAQsnB,eAAiB,SAAwBkB,EAAMvB,EAAMwB,EAAMzB,GAGtF,GAAIkC,GAAOjT,KAAK8Q,KAAK0B,EAAOD,GAAQ,GsBz7EhCW,iBAA4B,GtB27E5Bhe,EAAI+d,EAAOA,EAAOjT,KAAKyS,IAAIF,GAAQvS,KAAKyS,IAAID,GAAQW,EAAOA,CsBz7E/D5gB,UAAUyN,KAAA0S,MAAA1S,KAAA4S,KAAA1d,GAAA8K,KAAA4S,KAAA,EAAA1d,KAEM3K,EAAO6oB,YAFb,SAAA1B,EAAAH,EAAAO,EAAAuB,EAAA1B,GAGR,GAAAC,GAAc,GAAPrnB,KACP4K,EAAK,GAAE5K,KAAFqnB,EtB27EH1c,EAAIme,EAAK3B,EAAKE,EAAIzc,EsBj8EU+c,EAAAP,GAUhChb,WtBy7ESub,EAAKP,GsBv7EZxc,EAAA+c,EAAAN,EAAAD,EAAAD,GAaA3nB,EAAAupB,cAAA,SACA5B,EACAH,EAAAO,EAAAuB,GtB46EF,GAAIzB,GAAgB,GAAXL,EAAKG,GsBv8EhBvc,EAAA,GAAA2c,EAAAP,GAAAK,EtBy8EM1c,EAAIme,EAAK3B,EAAKE,EAAIzc,CACtB,OAAO,UsBn5EM+d,GtBo5EX,GAAIhB,GAAKP,EAAIA,CAEb,OAAOzc,IADEgd,EAAKP,GACExc,EAAI+c,EAAKN,EAAID,EAAID,IqBx9ErC3nB,EAAAooB,QAAA,SAAApC,EAAAuC,GrB69EE,GAAID,GAASrS,KAAKmN,IAAI4C,EAEtB,OADAA,GAAMA,EAAM,EAAI/P,KAAKoS,KAAKC,EAASC,GAAOA,EAAMD,EAAStC,EAClD/P,KAAKmN,IAAI4C,EAAMuC,IAGbvoB,GAAQud,KAAO,SAAcyI,EAAKvD,EAAKiE,GAChD,MAAO0B,GAAQpC,EAAMvD,EAAKiE,EAAMjE,GAAOA,IAKnC+G,KuBx+EN,SAAAzpB,EAAAC,EAAAC,GvB2+EA,YAGAK,QAAOC,eAAeP,EAAS,cuBx+E/BQ,OAAMipB,GAAa,IAAnBN,IvBw/EE3gB,UAEE0E,UAAc1M,MAAO,MACrBkpB,GAAOlpB,MAAO,EAAM,KACpBmpB,GAAOnpB,MAAO,MwBlgFlBoM,cAAA,iIAAA4I,KAAA,MAEA3I,gBAAA,+0BAAA2I,KAAA,MxB0gFAxV,GAAQK,QAAU8oB,GAIZS,KACA,SAAU7pB,EAAQC,GAExBD,EAAOC,QAAU,yhEAIX6pB,KACA,SAAU9pB,EAAQC,EAASC,GAEjC,YAGAK,QAAOC,eAAeP,EAAS,cAC3BQ,OAAO,GAQX,IAAIipB,IAEAjhB,UAEI0E,UAAc1M,MAAO,MACrBspB,SAAatpB,MAAO,IAIxBoM,cAAe,oBAAqB,gBAAiB,YAAa,4EAA6E,KAAK4I,KAAK,MAEzJ3I,gBAAiB,yBAA0B,8BAA+B,oBAAqB,gBAAiB,2CAA4C,kCAAmC,KAAK2I,KAAK,MAI7MxV,GAAQK,QAAUopB,GAIZM,KACA,SAAUhqB,EAAQC,EAASC,GAEjC,YwBlgFI,SAAAC,GAAAC,GAAA,MAAAA,MAAAC,WAAAD,GAAAE,QAAAF,GxBugFJG,OAAOC,eAAeP,EAAS,cwB9jF/BQ,OAAA,GxBkkFA,IAAIwpB,GAAY/pB,EAAoB,QAEhCgqB,EAAY/pB,EAAuB8pB,GAEnCE,EAAejqB,EAAoB,QAEnCkqB,EAAgBjqB,EAAuBgqB,GAEvCE,EAAqBnqB,EAAoB,QAEzCoqB,EAAqBnqB,EAAuBkqB,GAE5CtQ,EAAkB7Z,EAAoB,QAEtC8Z,EAAmB7Z,EAAuB4Z,GAE1CwQ,EAAQrqB,EAAoB,QAE5BsqB,EAASrqB,EAAuBoqB,GAEhCtQ,EAAW/Z,EAAoB,QAE/Bga,EAAY/Z,EAAuB8Z,GAEnCwQ,EAAQvqB,EAAoB,QAE5BwqB,EAASvqB,EAAuBsqB,GAEhCE,EAAOzqB,EAAoB,QAE3B0qB,EAAQzqB,EAAuBwqB,GAE/Blf,EAAkBvL,EAAoB,QAEtCwL,EAAmBvL,EAAuBsL,GAE1C/K,EAAmBR,EAAoB,QAEvCS,EAAmBR,EAAuBO,GAE1CE,EAAgBV,EAAoB,QAEpCW,EAAgBV,EAAuBS,GAEvC+K,EAA8BzL,EAAoB,QwBxmFtD0L,EAAAzL,EAAAwL,GxB4mFIE,EAAa3L,EAAoB,QAEjC4L,EAAa3L,EAAuB0L,GwB3mFxC/K,EAAAZ,EAAA,QxB+mFIa,EwBnkFA,SAAAX,GAAA,GAAAA,KAAAC,WAAA,MAAAD,EAAA,IAAAY,KAAA,UAAAZ,EAAA,OAAAa,KAAAb,GAAAG,OAAAW,UAAAC,eAAAC,KAAAhB,EAAAa,KAAAD,EAAAC,GAAAb,EAAAa,GAAA,OAAAD,GAAAV,QAAAF,EAAAY,GxBmkFgCF,GwB/lF9B+pB,GxBimFM3qB,EAAoB,QwBjmF1B2qB,EAAyB,SxBqmF3BC,EAAW3qB,EAAuB4qB,GAElCC,EAAgB9qB,EAAoB,QwBnmFtC+qB,EAAA9qB,EAAmD6qB,GAAA3Q,EAAAna,EAAA,QAEjDgC,GAFiD/B,EAAAka,GAEjDna,EAAA,SAFiDiC,EAAAhC,EAAA+B,GAIjDgpB,EAAKC,EAAL,QAEAC,EAAAjrB,EAAA+qB,GAEAG,EAAKC,EAAiB,QAEtBC,EAAKC,EAALH,GAEAtf,EAAa0f,EAAM,QAEnBzf,EAAK0f,EAAiB3f,GAEtByC,EAAKmd,EAAL,QAEAld,EAAatO,EAAesrB,GAE5B3H,EAAA5jB,EAAA,QAEA6jB,EAAA5jB,EAAA2jB,GASD8H,EAAA1rB,EAAA,QAICoG,IAASulB,QAETC,EAAmBL,EAAnB,QxBinFAZ,EAAoBkB,EAAwB,QwB/mF5CC,EAAA9rB,EAAA,QAEA+rB,GAAA,SAAAC,GAGA,QAAMtY,GAAUuY,GACd,GAAAV,GAAIW,EAAOC,MACXC,EAAW9jB,OACTiS,MAAIvM,KAAAke,EAAqBA,mBAAAE,GACzBF,IAAA9rB,SAAA+B,KAAA4pB,ExBonFJ,IAAI/kB,IAAQ,EAAI0E,EAA4BtL,SAAS+B,MAAO4pB,EAAU3f,YAAa,EAAIZ,EAAiBpL,SAAS2rB,IAAY7qB,KAAKiB,MA6BlI,OwB3oFD6E,GAAAikB,WAAA,KxBknFCjkB,EAAMqlB,IAAM,GAAIhB,GAAMjrB,QwBhnFa4G,EAAtBsd,eAAsB,GAAAoG,GAAAtqB,QxBmnFnC4G,EAAMslB,UAAY,GAAI5B,GAAMtqB,QwBlnF5B4G,EAAIskB,iBAAWiB,KAEdvlB,EAAAukB,QxBqnFDvkB,EAAMwkB,iBwBlnFNxkB,EAAIwlB,YxBonFJxlB,EAAMykB,iBAENzkB,EAAMylB,MAAQ,GAAIvB,GAAQ9qB,QAAQ4G,EAAMukB,MAAMpoB,OAAQoX,GwBjnFtDvT,EAAI0lB,aAEJ1lB,EAAAtE,YxBonFAsE,EAAM2lB,eAAepS,GwBlnFrBvT,EAAA4lB,UAEA5lB,EAAA6lB,iBxBqnFA7lB,EAAM8lB,MAAQ,GAAIjsB,GAAMksB,MAExBnB,EAAiBpkB,iBwBlnFlB,UAAAR,EAAAgmB,iBAAAtlB,KAAAV,IAAA,GxBmnFQA,EyB5rFP,ODqCA,EAAA4E,EAAAxL,SAAA2rB,EAAAC,IAwCE,EAAArrB,EAAAP,SAAA2rB,IACDhrB,IAAA,UxBsnFDR,MAAO,WwBpnFP6F,SAAAulB,oBAAyB/Z,YAAzBzP,KAAA8qB,eAAA,GACAC,qBAAA/qB,KAAAopB,MAAAjiB,MxBsnFE,IwB9mFAoK,IxB8mFYvR,KAAKopB,MAAMroB,MwB9mFvB,SAAAgpB,GACAiB,YAPUjB,EAAAC,SAAAzY,UAQV0Z,aACAC,EAAa/kB,SAAKglB,OAAeC,SAAMxY,IAT7BrB,UAUV8Z,WAAgB9Z,YxB0nFhBvR,MAAKopB,MAAMroB,MAAMuqB,SAAS/Z,MAG5B3S,IAAK,UwBvoFOR,MAoBZ,SAAMmtB,GACJ,GAAApJ,GAAaqJ,UAAIC,OAAjB,OAAA5f,KAAAD,UAAA,IAAAA,UAAA,EAE6B,QAA3B9F,KAAI4lB,MAAKtB,cACXuB,KAAAC,MAAWxB,YAAayB,EAExB,IAAAzB,IAAQ0B,EAARrD,EAA4BiD,SAAK1rB,KAAA4rB,MAAgBxB,aACSC,GAAWe,EAAJ3C,EAAiB7E,SAAxBiI,GACxDE,EAAUC,EAAUN,KAAIM,EAASpZ,QARrC2X,EAAAvqB,KAAAisB,WAAAnK,CxBkoFE9hB,MAAKopB,MAAMhmB,mBAAmBN,EAAIynB,EwBvnFnCvqB,KAAAopB,MAAAlmB,gBAAAJ,EAAAynB,EAAAvqB,KAAAopB,MAAArnB,iBAAAe,ExB0nFC9C,KAAK4rB,MAAMM,gBAAkBpK,EwBtnF/B9hB,KAAAmsB,WAAA9B,EAAA+B,UAAAtK,EAAAK,EAAAL,MAGAljB,IAAA,iBxBynFAR,MAAO,ewBtnFPQ,IAAA,UACAytB,iBxB2nFE,GAAKvsB,EAAS7B,QAAQmN,QAAtB,CwBpnFApL,KAAAwrB,IAAKpC,GAAMroB,GAAMc,WAAa,MAC9B7B,KAAAwrB,IAAKpC,MxB0nFL,IAAIkD,IwBvnFNC,eAAgBD,GACdE,eAAWvrB,GACXsE,WAFFvF,KAAAysB,mBAAArB,MAAAxY,SxB2nFI8Z,cAAe1sB,KAAKysB,mBAAmBT,SAASpZ,SwBvnFpD2Z,mBAAA,EAEEvB,gBAAA,GACAzlB,gBAHF,GAID2lB,YAAAlrB,KAAAmrB,eAAAC,MAAAxY,SxBynFKyY,eAAgBrrB,KAAKmrB,eAAea,SAASpZ,SAE7C+Z,gBAAiB7sB,EwBznFZ+hB,QAAQuI,cACjBwC,eAAa,IACXC,YADW5uB,QAAA+C,OAAAwB,IAyBIsqB,UAAQhuB,sBACjB+U,IAAA7T,KAASpB,MAAMmH,WAAWmmB,YAA1B,EAA6C,IAAAa,KAAA,IAKlD,IAAAR,GAAAvsB,KAAAwrB,IAAAC,UAAA,QACFc,GAAAR,SAAAO,EAAA,mBAAAU,SAAA,SAAApJ,GxBgoFG5jB,KAAKopB,MAAMroB,MAAMc,WAAa,GAAInD,GAAMoD,MAAM8hB,GwB9nFlD5jB,KAAIyC,MAAOwqB,MAAQxrB,IAAA2pB,MAAA,GAAA1sB,GAAAoD,MAAA8hB,IACjBre,KAAM2nB,OAENX,EAAMxK,MAAYmL,iBAAlB,KAAAH,KAAA,KAAAC,SAAA,SAAApJ,GxBgoFE5jB,KAAKopB,MAAMnoB,aAAamF,SAAS+c,SAAS/kB,MAAQwlB,GwB9nFpDre,KAAK2kB,OAEDrI,MAAQA,EADE,oBAAAkL,KAAA,KAAAC,SAAA,SAAApJ,GAEV7B,kBAAWA,MAFD/hB,KAAZopB,MAAApoB,OAAAkF,0BxBmoFAX,KAAKvF,WwB5nFH6hB,gBACAE,eAAeA,EAHYqI,GAI3BtI,YACAK,aAL2BiI,YAA7B,KAOD+C,aAlBHC,kBAmBO,EACL3f,aAAY,KACb4f,mBAAA,KACFC,KAAA,MxBgoFKR,WACAS,WAAY,KACZC,mBwBhoFsBtB,gBAARhf,ExBkoFdugB,cAAe,EwBjoFnBC,cAAA,MAMI9uB,IAAA,aAAAR,MAAA,SAEyB2jB,GAFzB,GAAAD,GAAAlW,UAEoCkW,OAFpC,OAAAjW,KAAAD,UAAA,GAAAA,UAAA,KAAAuW,EAAAvW,UAAA5D,OAAA,OAAA6D,KAAAD,UAAA,IAAAA,UAAA,EAGF5L,MAAA4rB,MAAAwB,kBAAA,CAGA,QAAAxuB,KAAAoB,MAAA4rB,MAAAkB,QACA9sB,KAAA4rB,MAAAkB,QAAAhuB,eAAAF,IACAiV,KAAAmN,IAAApiB,EAAAoB,KAAA4rB,MAAAM,iBAAApsB,EAAA7B,QAAAkN,uBxBwoFanL,MAAK4rB,MAAMkB,QAAQluB,GwBtoFhCoB,KAAK4rB,MAAMkB,MAAQhL,OAAnB9hB,KAA+B4rB,MAAAuB,UAAAvuB,UAC7BijB,MAD6B+J,MAAAuB,UAAAvuB,GAM7B+uB,kBAAc,CANe,GAA/BT,IAAA,EAAAzE,EAAAxqB,SAAA4tB,GAAA+B,QAAA,OAAAC,SxB+oFMA,GAAS,EAAIpF,EAASxqB,SAAS4tB,GAAMiC,MAAM,OAAOD,SwBtoFpDE,EAAYrvB,EAAMsvB,SAEtBhuB,MAAKopB,mBAAgB2E,EAArBF,GAAArR,KAAA,SAAAqF,GACA,GAAK2L,IxBwoFC3L,OAAQA,EwBtoFdE,UAAS9V,EAGPwd,GAAmB9b,axBwoFfR,IAAK,QwBtoFT0U,OACEoM,EAAApM,OAIAE,UAAAkM,EAAAlM,UACDD,WxBooFGK,aAAcA,UAIlB1U,SAAQC,IAAI,oCwB/nFZwgB,uBACAC,eAAAC,GxBooFF,GAAIlhB,GAAOkhB,EAAMlhB,IwB3nFf,KxBqoFA,GAEI6U,IAFQ7U,EAAKmhB,MwBloFFnhB,EAAIgV,WxBooFHhV,EAAK6U,WwBloFrB3U,EAAM0U,EAAWA,SxBooFbD,EAAS3U,EAAK2U,OwBloFlBM,EAAAjV,EAAAiV,YAQAniB,MAAA4rB,MAAAkB,QAAAhL,IACAD,SxBooFEE,UAAWA,EwBloFb0K,mBAAAzsB,KAAAysB,mBAAAxpB,QxBooFEqrB,kBAAmBtuB,KAAKsuB,kBAAkBrrB,QAC1CkoB,eAAgBnrB,KAAKmrB,eAAeloB,QACpC0qB,aAAc,EwBhoFdO,OAAO,GAAKtC,GAAMkB,KAClBqB,YAAMhB,UAAWL,GAAQhL,EAFJ9hB,KAAvBopB,MAAAroB,MAAA+E,IAAAioB,GAIAQ,uBxBqoFA,KAAK,GAAItiB,GAAQ,EAAGA,EAAQ4V,EAAO7Z,OAAQiE,IAAS,CwBjoFpDsiB,MAAW3qB,EAAXqI,GACAsiB,EAAWC,MAEXD,IAAWE,IAAXF,KAA+B,IAApBE,EAAYxiB,GAAvB,IAAA0B,EAAA7K,EAAAyrB,CASAR,MAAUQ,MAAVvc,KAAAhS,KAAA0uB,YAAA1uB,KAAA4rB,MAAAkB,QAAAhL,GAAA2K,oBACD0B,EAAA,GAAAzvB,GAAAsT,KAAAhS,KAAA0uB,YAAA1uB,KAAA4rB,MAAAkB,QAAAhL,GAAAwM,kBxBooFGJ,GAAMte,KAAO,QwBloFjBue,EAAIQ,KAAO,OAEXR,EAAKvC,YAAc9J,EAAU6M,GAA7B7M,EAAA,IACAoM,EAAKtC,YAAMwB,GAAmBtL,EAA9B,IAEAoM,EAAIjN,MAAOpe,IAAX8K,EAAAzL,EAAAyL,EAAAxL,EAAAwL,EAAA7K,GACAqrB,EAAAS,MAAA/rB,IAAA8K,EAAYzL,EAAK0pB,EAALzpB,EAAWgrB,IAMrB,IAAIY,IAAQ9M,GAAK2K,KAAMuB,OAAvBlhB,CADFmB,GAAA0U,UAoBArU,OAAA,GAAA/O,GAAAsvB,KACDO,GAAAM,WACFX,MAAAluB,KAAA4rB,MAAAkB,QAAAhL,GAAA2K,mBxBooFS0B,KAAMnuB,KAAK4rB,MAAMkB,QAAQhL,GAAUwM,mBAErCC,EAAWL,MAAQA,EwBnoFzBK,EAAKG,KAAcP,EAEnBI,EAAAO,eAAA1hB,EACAmhB,EAAKQ,SAALjsB,EAA2Bc,EAC3B2qB,EAAKS,WAAL,IAAA/iB,GACAsiB,EAAKU,SAAmBnsB,GAAIpE,KAAMsD,KAClCusB,EAAKW,WAA2B,GAA3BA,GxBsoFClvB,KAAKipB,eAAepmB,IAAIuK,EAAM4W,KAAMuK,GACpCvuB,KAAKmqB,UAAUtnB,IAAI0rB,EAAYnhB,GAC/BmhB,EAAWY,SAAU,EwBnoF3BZ,EAAKa,IAAcjB,GACpBI,EAAAzoB,IAAAooB,GxBuoFOH,EAAMjoB,IAAIyoB,IwBnoFhBtqB,MAASoB,gBAAiByc,CAC1B7d,cAASoB,GxBuoFLrF,KAAK4rB,MAAMkB,QAAQhL,GAAU6M,KAAOA,EwBroFxC3uB,KAAKqvB,wBAAwB,CAE7B,IAAKC,OAYmB,KxB2nFpB,EAAIjH,EAAOpqB,SAAS+B,KAAK4rB,MAAMuB,WAAWoC,QAAQ,SAAU3wB,GwBroFhEqF,MAASoB,QAAiB8nB,UAA1BvuB,ExBuoFM4wB,GAAMpG,MAAMroB,MAAM0uB,OAAO1B,MwBnoF/B,EAAItrB,EAAOwqB,SAAQjtB,KAAA4rB,MAAAuB,WAAAuC,UAAAH,QAAA,SAAA3wB,GACjB,GAAK+wB,WAAoBnH,YACzBgH,GAAKG,gBAAkBtqB,KAKN4I,EAAQ2hB,IADH,GACuC1iB,GADvC,EAAAoT,EAAAtgB,KAAA4rB,MAAAuB,UAAArL,GAAAnZ,SAAAX,OAAAsY,IAAA,CACQzS,MAA+BX,KAA/BW,MADRsf,UAAArL,GAAAnZ,SAAA2X,EACkBpS,MADlB4gB,eAAA9K,OAAAhkB,KAAA4rB,MAAAiE,YAAA,CAC6BziB,KAAUF,aADvC4iB,ExB+oFd,SAIN,MAAO5f,GACPzC,QAAQC,IAAIwC,OwB1oFftR,IAAA,iBxB+oFDR,MAAO,WwB7oFP4B,KAAA0uB,YAAA,GAAAhwB,GAAAqxB,kBAAA,OACA/vB,KAAAisB,YAAA,KxB+oFEjsB,KAAKgwB,UAAY,KwB7oFnBhwB,KAAI+f,oBAAsB,IAC1B/f,KAAAgvB,eAAA,GxB+oFEhvB,KAAKivB,iBAAmB,GAAIvwB,GAAMsD,QAAQ,EAAK,EAAK,GwB7oFtDhC,KAAI8N,yBAAoBmiB,OAGxBniB,qBxB+oFA1P,MAAO,WwB7oFP4B,KAAAkwB,UAAA,GAAAxxB,GAAAyxB,UxB+oFEnwB,KAAKovB,YAAc,QwB3oFrBU,gBACAA,MAAKM,WACLN,KAAKO,cAALrwB,KAAsBswB,SAAA/qB,KAAAvF,MAAAiE,SAAYrD,iBAAS2R,YAArBvS,KAAA8qB,eAAA,GAAA7mB,SAAtBoB,iBAAA,aAAArF,KAAAuwB,aAAAhrB,KAAAvF,OAAA,GAEAA,KAAAqvB,YAAA,GAAAtqB,OAAA,exBkpFE/E,KAAKsvB,gBAAkBrrB,SAASusB,YAAY,ewB9oF9CvsB,SAAMwsB,iBAAoBviB,YAAUlG,KAApB0oB,oBAA4CnrB,KAAAvF,OAAA,GAAAiE,SAA5DoB,iBAAA,WAAArF,KAAA0wB,oBAAAnrB,KAAAvF,OAAA,GAEIgqB,gBACJA,uBAAsBxB,EACtBwB,uBAAsB3kB,iBAAgBsrB,UAAV3wB,KAA8BmO,eAAasiB,KAAjBzwB,OAA1B,OAI5BggB,qBxBmpFA5hB,MAAO,SAAwBwyB,GwBjpF/B,GAAMC,KAAa3jB,KAEnB2jB,GADe7Q,YACJla,EAAIgqB,QxBopFTjiB,GwBnpFNgjB,EAAAjB,IxBmpFiB1iB,EAAKW,UwBjpFtBK,EAAAhB,EAAAgB,UACAd,EAAK+d,OAEL,IAAAtd,EAAA,CxBupFM7N,KAAK4rB,MAAMyB,qBACbrtB,KAAK4rB,MAAMyB,mBAAmBoC,OAAOzvB,KAAK4rB,MAAMyB,mBAAmBxkB,MACnE7I,KAAKsqB,MAAMwG,cAMb,IAAI/Q,GAAsB/f,KAAK4rB,MAAMyB,mBAAmB0D,mBAAmB9tB,QAGvE6K,EAAU,GAAIpP,GAAMuxB,cwBppF1BniB,GAAIkjB,aAAW3D,WAAf,GAAmC3uB,GAAAiyB,gBAAA9iB,EAAA,IACjCC,EAAK8d,uBACL9d,EAAAmjB,oBAKD,IAPDnB,GAOO,GAAApxB,GAAAsT,KAAAlE,EAAA9N,KAAA4rB,MAAAkB,QAAA1f,EAAA0U,UAAAqJ,eACL2E,GAAAltB,SAAW0qB,IAAXrf,GACD6hB,EAAAM,YAAA,IACFN,EAAAO,eAAA,SAAAzvB,GxBspFK,MAAOA,GAAS2R,awB/oFtB,IAAA2e,GAAA,GAAAxyB,GAAAiyB,gBAAAziB,EAAA,KACAuiB,EAAA,GAAAU,OAAAjjB,EAAAlG,OAAA,GAAAopB,KAAA,GAAA3b,IAAA,SAAA1M,EAAA4H,GACA,MAAAA,KxBwpFQqZ,EAAW,GAAItrB,GAAMuxB,cACzBjG,GAASgH,aAAa,WwBvpFL1qB,GACnBA,EAAMb,aAAN,QAAA/G,GAAAiyB,gBAAA,GAAAxiB,cAAAsiB,GAAA,KxB0pFE,IAAIzQ,GAAa,GAAIthB,GAAM2yB,OAAOrH,EAAUhqB,KAAK0d,ewB3pFzBsC,GAAApd,SAAAkD,IAKFmI,ExBypFtB,IAAI4iB,GAAa7wB,KAAKipB,eAAeqI,IAAIlkB,EAAM4W,KwBvpFjD6M,GAAA/qB,IAAAka,GxBypFE6Q,EAAW/qB,IAAIgqB,GACfe,EAAWhoB,KAAOinB,EwBtpFpB9vB,KAAAmrB,eAAA/kB,SAAA4b,UAAA5jB,MAAA,EAKA4B,KAAAsqB,MAAAiH,oBAAArjB,EAAA6R,EAAA3S,EAAApN,KAAA0d,eAAAsC,OAGAphB,IAAA,eACAR,MAAA,WACA,GAAAke,GAAAtc,IAEAA,MAAA4rB,MAAA4F,cAKAxxB,KAAAsqB,MAAAwG,cAEA9wB,KAAA4rB,MAAAyB,oBACArtB,KAAA4rB,MAAAyB,mBAAAoC,OAAAzvB,KAAA4rB,MAAAyB,mBAAAxkB,MAEA7I,KAAAyxB,gBAAAzxB,KAAA4rB,MAAAyB,oBAAA7Q,KAAA,WACAF,EAAAsP,MAAAyB,mBAAA,KACA/Q,EAAAsP,MAAA0B,KAAA,SxB4pFIttB,KAAK4rB,MAAM0B,KAAO,UActB1uB,IAAK,sBwBzpFHR,MAAA,SAA8BkI,GAEjC,GADEA,EAAAb,kBACFxB,SAAAytB,cAAA,UAAAC,SAAArrB,EAAAsrB,UxB2pFO5xB,KAAK4rB,MAAM4F,YAAf,CAEA,GAAIK,GAAoB7xB,KwB3pFd8xB,mBAAqE1C,EAAAyC,EAAAzC,WAI/E0C,IAAYruB,IAAesuB,WAA3B1E,mBAAArtB,KAAAmiB,aAAAiN,GAAApvB,KAAAgyB,mBxB2rFFpzB,IAAK,gBwBzpFLR,MAAA,SAAOwE,EAAYkf,GACjB,OAAiB,KAAbgQ,WAAahF,QAAAhL,GAAA,CACf9hB,KAAAopB,MAAI6I,MAAUH,WAAYlvB,WAC1B5C,KAAA4rB,MAAIsG,QAAQJ,GAAYK,mBAAZ/G,MAAZgH,OAAA,SxB2pFA,IAAItJ,GAAa,GAAIpqB,GAAM2zB,WAAW,IAAO,IAAM,KwBzpFnDvJ,GAAIwJ,aAAiBR,IAAYS,MAAZzvB,GACrBgmB,EAAI0J,aAAiB7iB,QAAIjR,UAAJA,EAAA+zB,yBACrB3J,EAAI4J,YAAetJ,MAAI1qB,SAAM6E,KAAaO,aAE1C9D,KAAA4rB,MAAK+G,WACHb,mBAEAU,SAEAE,aACA/iB,QAEAoK,sEACD/Z,KATD4rB,MAAAkB,QAAAhL,GAAAqJ,eAAAyH,OAAA9J,EAAA/Z,aAAAY,QAWAoK,qExBupFJnb,IAAK,eACLR,MAAO,SAAsB0zB,EAAaG,EAASO,EAAgBN,EAAOQ,EAAcG,GACtF,GAAInW,GAAS1c,IAEb,OAAO,IAAI6X,GAAU5Z,QAAQ,SAAU8b,EAAS4B,GwBrpFlDe,EAAOkP,MAAA4F,aAAY,CACjB,IAAIsB,GAAWhB,MAAYlvB,UxBupFzBkvB,GAAYruB,WAAWZ,IAAIkvB,GwBppF7BrV,EAAI8V,SAAiBO,OAAIr0B,QAAM6E,MAU/B,GAAAomB,GAAKP,MAAMlmB,EAAXN,UAA+BowB,KAAAH,GAAuB3D,4BAAtD,WACAxS,EAAMwV,MAAQV,aAAA,EACdU,MxBupFKnV,QwBjpFH,GAAA4M,GAAAsJ,OAAA7b,KAAA,IAAA8b,IAAA9b,KAAA,GAAAyb,GAAAvC,SAAA,SAAA6C,GACAjB,GALF9a,GAMEsb,EANFtb,IAlBF1Y,GAAA6E,WAAA6vB,MAAAZ,EAAAE,EAAAX,EAAA3a,GA+BD0a,EAAAruB,WAAAZ,IAAAkvB,EAAA7vB,EAAA6vB,EAAA5vB,EAAA4vB,EAAAjvB,EAAAivB,EAAAsB,KxBgpFQC,OAAO5W,EAAO4W,QAAQvW,aAI7Bne,IAAK,kBwBjpFLR,MAAIgP,SAAoB0hB,GACxB,GAAI7O,GAAK2L,IAEP,OAAKtB,OAAMwG,QAAX,SAAA/W,EAAA4B,GACD,GAAAmW,EAAA,CACD,GAAKlG,GAAM2H,EAAenmB,SAA1BnK,QACAivB,EAAAJ,EAAAK,gBAAAlvB,QAEAqvB,EAASkB,EAAwBpmB,gBACzBnK,QACEqb,GAAeA,MAArB/a,YAAAC,KAAAsuB,EAAAruB,YACAgK,GAAY,GAAA/O,GAAZ6E,YAAAO,aAAAwuB,EAGInlB,GAAKwlB,aADPb,EAAAG,EAAAO,EAAAN,EAAAQ,EAAA,KAAAlW,KAAA,WAEEpP,UAIJK,UxBopFJ7O,IAAK,iBwB/oFLR,MAAKq1B,SAAc3B,GxBipFjB,GAAI4B,GAAS1zB,IwBvoFf,OAAI2zB,OAAe11B,QAAU21B,WAAgBC,GAC7C,GAAIC,KAAyBF,iBAEzBG,EAAgBr1B,GAAMk1B,SAAV,EAA0BC,EAAKzb,GAC3C4b,GAAct1B,GAAMk1B,eAAqBxb,OAAO3U,YAC/CwwB,GAAYv1B,GAAMw1B,eAAoBC,aAAQ/b,ExB2oF/C0Z,GAAYK,gBAAkBL,EAAYlvB,SAASK,QwBxoFvD6uB,EAAKxD,gBAAoBwD,EAAAluB,SAAkBX,OAGzCmxB,OAHyCtC,EAAAf,kBAKzCrJ,SALyCtkB,mBAAAN,EAAAkwB,EAAAlwB,EAMzCsS,QAAalS,gBAN4BJ,EAAAkwB,EAAAlwB,EAAA4wB,EAAAxE,wBAOzCmF,OAAYC,MAP6BtyB,OAQzC4wB,KAAQd,EARiClvB,SAAAE,EAUzCyxB,eAAWzC,EAAAgB,EAAAN,ExB2oFTN,EAAOQ,EAAc,KAAM,GAAMlW,KAAK,WwBxoF1CzC,WAKE2N,gBACAtS,eAN0C0c,GAO1CuC,MAAM31B,KAENs1B,IAT0ClF,cAU1CyF,YAAWlH,qBAVbrtB,KAAA4rB,MAAAyB,mBAAAoC,OAAAzvB,KAAA4rB,MAAAyB,mBAAAxkB,MxBqpFI7I,KAAKsqB,MAAMwG,ewBvoFb1F,WAAOmI,aADkDnmB,EAIzDonB,iCAJyDpnB,EAAA4W,MAAAxH,KAAA,SAAA8B,GAKzDoJ,eALyDpJ,EAMzDlJ,gCANyDhI,EAAA4W,MAOzDqQ,EAAM31B,kBAPmD0P,aAQzDwkB,YACA6B,YAEAC,MAAA,SAAAxkB,GACA4jB,oBAIAl1B,IAAA,iBAhByDR,MAA3D,SAAAga,GxB2pFEpY,KAAKyzB,aAAe,SAAU,SAAU,SAAU,SAAU,SAAU,SwBvoFtErI,IACAhW,KADO,GAAA1W,GAD+Ck1B,eAAAC,KAAAzb,EAAA,qCAAA1Z,GAAAk1B,eAAAC,KAAAzb,EAAA,mCAGtDsP,GAAS,GAAAhpB,GAAAk1B,eAAAC,KAAAzb,EAAA,mCxB2oFL2b,IwB9oFN,GAAAr1B,GAAAk1B,eAAAC,KAAAzb,EAAA,oCxB8oFkB,GAAI1Z,GAAMk1B,eAAgBC,KAAKzb,EAAO,kCwBxoFxD4b,GAAKW,qBAAmCC,6CACtCxJ,aAAO,GADoD1sB,GAAAw1B,mBAAAC,QAAA/b,EAAA,aAAAyb,KAAA7zB,KAAAyzB,aAI3De,uBAJ2D,GAAA7qB,GAAA1L,SAK3DypB,eACAtS,WACAif,UAAM31B,GAPR81B,UAAA,GxBkpFI9M,QAAS,GwBxoFbtS,aAAK+V,EACHC,OAAOkJ,SACPtI,YAAUiI,MACVY,UACAT,UAAW,MAGXp0B,KAAAysB,mBAAA,GAAA9iB,GAAA1L,SxB0oFEmtB,MAAO,SwBxoFThW,iBACAif,UAAM31B,GACNk0B,UAAQ,GAXVlL,QAAA,GxBspFItS,aAAa,EwBxoFjBif,KAAK3W,YACH0N,OAAOprB,KAAAi0B,MACPtmB,QAAMqmB,EACNO,UAAA,MAGA7M,0BANuC,GAAAhpB,GAAAk2B,sBAOvC1f,eACA8W,SAAA,QACAoI,UAAA,GATFI,UAAA,GAWD9M,QAAA,GxB0oFKtS,aAAa,EACbif,KAAM31B,EAAMo2B,WACZlC,OAAQ5yB,KAAKi0B,MwBzoFjBQ,gBAAiB/1B,IxB6oFbo1B,aAAcA,EwBzoFlBH,aAAkBA,ExB2oFdI,UAAWA,EwBzoFfgB,oBAAc5K,IAEPnqB,KACJg1B,qBAAO,GAAAt2B,GAAAu2B,mBAAA7J,MAAO8J,SAHjB9f,aAGqC,ExB8oFjCsS,QAAS,KAGX1nB,KAAK20B,uBAAyB,GAAIj2B,GAAMk2B,sBwB5oF1CxJ,MAAS+J,SACVnJ,SAAA,SxB8oFKoI,UAAW,GACXI,UAAW,GACX9M,QAAS,GwB9oFWtS,aAAA,ExBgpFpBif,KAAM31B,EAAMo2B,awBhpFQ90B,KACHmqB,eADG,GAAAzI,GACHyI,SACrBiB,MAAA,SxBmpFIY,SAAU,QACV6I,aAAa,EwBjpFjBT,UAAA,GACEI,UAAA,GACA9M,QAAA,GxBqpFEtS,aAAa,EwBjpFjBif,KAAA31B,EAAAo2B,WxBmpFIlC,OAAQ5yB,KAAKi0B,QwBjpFfj0B,KAAA0d,eAAA,GAAAtR,GAAAnO,SACAmtB,MAAA,SACAhe,KAAM8gB,GAHR9Y,aAAA,ExB0pFIJ,SAAUtW,EAAMuW,iBwBnpFpByS,QAAA,ExBqpFIxS,WAAW,OwBhpFbtW,IAAA,mBACER,MAAA,WACA,GAAAg3B,GAAA,GAAU12B,GAAAsD,QAAgBhC,KAAKmqB,qBAAciF,EAAnBpvB,KAA1BopB,MAAAhkB,eAAAjD,EAAA,GACDizB,GAAAC,UAAAr1B,KAAAopB,MAAApoB,OACD,IAAAkvB,GAAKjB,MAAmBG,eAAYxsB,MAApC5B,OAAA4B,SAAAwyB,EAAAE,IAAAt1B,KAAAopB,MAAApoB,OAAA4B,UAAA2yB,axBwpFIpL,GAAY,EAAIhC,EAAOlqB,SAAS+B,KAAKipB,eAAeuM,UwBppF1DC,EAAAtL,ExBwpFG1U,IAAI,SAAUsY,GwBrpFjB,MAAAA,GAAAplB,SAAA,KACAqsB,OAAA,SAAAE,GxBupFI,MAAOA,IAAOA,EAAI/F,UwBnpFtBgG,EAAAjF,EAAAwF,iBAAAD,GAAA,EAGA,QAAAN,gBAAAhL,YAAAiF,YAFA+F,EAAA,IAAAA,EAAA,GAAApL,OAAArhB,WxB2pFA9J,IAAK,yBwBrpFLR,MAAA,WACA,GAAAu3B,GAAA31B,KxBwpFM41B,EAAqB51B,KAAK61B,mBwBrpFhCzG,EAAAwG,EAAAxG,WxBupFkBwG,GAAmBzL,UwBzoFrCoF,QAAA,SAAAniB,GAGAA,EAAA8gB,MAAA/nB,SAAAiH,EAAAyhB,UAAAX,MACD9gB,EAAA+gB,KAAAhoB,SAAAiH,EAAAyhB,UAAAV,OAKEiB,OAAApvB,KAAA4rB,MAAAyB,qBxBwpFG+B,EAAYzmB,SAAS4mB,QAAQ,SAAUuG,GwBtpF3C,MAAAA,GAAA3vB,SAAAwvB,EAAAhB,yBAEIzI,IAAkBlsB,KAAtBmpB,mBxBwpFMnpB,KAAKmpB,iBAAmBiG,EwBtpF9BpvB,KAAW8hB,oBAAiB8J,KAAMkB,UAASwE,IAAAlC,KAEvCpvB,KAAAivB,iBAAuBnC,EAAQhL,aAyC/BljB,IAAA,eACER,MAAA,WACA,OAAwB6N,KAApB8pB,mBAAoB9pB,GAAxB,CAKE,GAAA+pB,GAAI/H,OAAMgI,UACV/J,EAAa+B,CAEb,QAAAnM,KAAA9hB,MAAA4rB,MAAAkB,QACD,GAAA9sB,KAAA4rB,MAAAkB,QAAAhuB,eAAAgjB,GAAA,CACF,GAAAoU,GAAAl2B,KAAA4rB,MAAAkB,QAAAhL,GxB0pFKqU,EAAOtiB,KAAKmN,IAAIkV,EAAKvH,KAAO3uB,KAAKopB,MAAMpoB,OAAO4B,SAASE,EAAI,IwBxpF7DszB,OACFJ,EAAAG,EACDjK,EAAAmK,SAAAvU,IxB8pFH,GAAID,GAAS7hB,KAAK4rB,MAAMkB,QAAQZ,GAAiBrK,OAC7CzK,EAAwB,IAAjByK,EAAO,GAAGzK,KACjByU,GAAO,EAAIpD,EAASxqB,SAASmZ,GAAMwW,QAAQ,OAAOC,SwBvpFzDI,GxBypFKpC,KAAMA,EwBvpFVte,MAAAsU,EAAAyU,OAAA,SAAAvtB,EAAAC,GACD,MAAAD,GAAAC,EAAAuE,OxBypFQ,GACHgpB,OAAQ1U,EAAOyU,OAAO,SAAUvtB,EAAGC,GACjC,MAAOD,GAAIC,EAAEutB,QwBxpFdpK,GACL7e,IAAIkpB,uBACAC,gBxB0pFG,GAiBL,IwBvqF0B3J,OAAxB9sB,KAAMkN,MAAOqgB,YAEXiJ,4BACAC,uBAAmB5iB,IAEtB7T,KAAA4rB,MAAAM,qBACFlsB,KAAA02B,KAAA,aAAAzI,GAOCjuB,KAAA4rB,MAAKA,WAAM6B,KAAgB7B,MAAKA,QAAMkB,GAEzC9sB,KAAA4rB,MAAAM,mBxBwpFuC,IAAhClsB,KAAK4rB,MAAMwB,sBAA+D,KAA1BptB,KAAK4rB,MAAM2B,WAC7D,IAAK,GAAIthB,GAAQ,EAAGA,GAASnM,EAAS7B,QAAQkN,eAAgBc,IAAS,CAGrE,IAAK,GAFDmqB,IAAa,EAERL,EAAa,EAAGA,GAAc,EAAGA,IAAc,CACtD,GAAIY,GAAcC,WAAW3qB,EAK7B,IAJmB,IAAf8pB,GAA8B,IAAV9pB,IACtB0qB,GAAuB,EAAT1qB,OAGiD,KAAtDjM,KAAK4rB,MAAMkB,QAAQZ,EAAkByK,GAA8B,CAC5E,GAAIE,IAAQ,EAAIpO,EAASxqB,SAAS+B,KAAK4rB,MAAM2B,WAAWxL,WAAW+U,SAASH,EAAa,OAAOvnB,OAAO,aACvGpP,MAAK+2B,QAAQF,EAAO3K,EAAiByK,GACrCP,GAAa,CACb,QwBlqFqD,GAAAA,EAAA,WAG5ChpB,cxBmrFnBhP,MAAO,SAAiB6vB,EAAK/B,EAAiBjgB,GAC5CjM,KAAKmsB,WAAW8B,EAAK/B,EAAkBjgB,EwBnrFrCgiB,OAAMtW,EAAOvK,QxBqrFXqpB,EAAmB,CwBnrFzB,QAAA73B,KAAKo4B,YAALlK,QxBsrFI,GAAI9sB,KAAK4rB,MAAMkB,QAAQhuB,eAAeF,GAAM,CAC1C,GAAIsO,GAAOlN,KAAK4rB,MAAMkB,QAAQluB,EAC1BsO,GAAK2U,OAAO7Z,OAAS,IACvBwuB,EAAiB3iB,KAAKwM,IAAImW,EAAgBH,SAASz3B,IACnD63B,EAAmB5iB,KAAKyQ,IAAImS,EAAkBJ,SAASz3B,SAKX,KAAvCoB,KAAK4rB,MAAMkB,QAAQ0J,QAAmF,KAAzCx2B,KAAK4rB,MAAMkB,QAAQ2J,KACzFz2B,KAAK4rB,MAAM8B,cAAgB1tB,KAAK4rB,MAAMkB,QAAQ0J,GAAgB7H,KAAO3uB,KAAKopB,MAAMrnB,iBAAiBe,EACjG9C,KAAK4rB,MAAM6B,cAAgBztB,KAAK4rB,MAAMkB,QAAQ2J,GAAkB9H,KAAO,QAI3E/vB,IAAK,YACLR,MAAO,WwBxpFC,QAAA64B,GAASC,GACP,MAAAC,GAAMrH,MAAOsH,gBxBwpFrB,GAAID,IAAQ,EAAIlP,EwBpsFNsG,SAAYxG,EAAA9pB,QAAAo5B,KAAA,QAAAC,GAAAC,GAAA,GAAAC,GAAApqB,EAAA6gB,CxBssFpB,OAAOlG,GAAc9pB,QAAQw5B,KAAK,SAAkBC,GwBrsFxD,OACAnJ,OAAWY,EAAUwI,KAArBD,EAAAE,MACKhM,IAAM0B,GxBusFC,GAAIiK,EAAW,CwBrsF3BG,EAAAE,KAAA,CACA,OAGE,MAAAF,GAAAG,OAAA,SAEE,KAAKjM,GASL,GARA4L,GAAW1G,EAAX3I,EAAAlqB,SAAA+B,KAAAmqB,UAAAqL,UAAAsC,KAAA,SAAAC,GxBwsFU,MwBvsFXA,GAAA/T,OxBusF2BuT,IwBlsF1BnqB,EAAK4qB,EAELR,EAAA,CACMpqB,EAAQwqB,KAAA,CACTlB,OxB0sFG,MwBvsFbgB,GAAAE,KAAA,ExBusFoB53B,KAAKkqB,IAAI+N,SAASjU,KAE3B,KAAK,GwBtsFf5W,EAAAsqB,EAAAQ,IAEA,QACAjK,GAAA,EAAAxF,EAAAxqB,SAAA,IAAAmP,EAAAgK,MAAAhI,OAAA,cAEApP,KAAA4rB,MAAAiE,YAAAziB,EAAA4W,KACAhkB,KAAAg3B,QAAA/I,GAAA,ExBysFU,KAAK,IACL,IAAK,MACH,MAAOyJ,GAASS,SwBrsFxBb,EAAMF,QAOE,OAAAH,QAGHr4B,IAAA,eACDR,MAAA,SAAe0uB,GACb,GAAAsL,GAAAp4B,IAMHuuB,GAAAY,SAAA,EACFnvB,KAAA4rB,MAAA0B,KAAA,QxB0sFHttB,KAAKyxB,gBAAgBzxB,KAAK4rB,MAAMyB,oBAAoB7Q,KAAK,WwBpsFtD4M,EAAMrjB,2BACZqyB,EAAAxM,MAAAyB,mBAAAoC,OAAA2I,EAAAxM,MAAAyB,mBAAAxkB,MxBusFOuvB,EAAO9N,MAAMwG,ewBpsFnBsH,EAAKxM,MAAMiB,mBAAX0B,EAEA6J,EAAKC,eAALD,EAAAxM,MAAAyB,oBAAA7Q,KAAA,WACA4b,EAAKE,YAAL1M,MAAAyB,oBACA+K,EAAKG,MAAL/G,aAAA,CxBysFM,IAAIpkB,GAAQgrB,EAAOxM,MAAMyB,mBAAmByB,cwBtsFlDsJ,GAAA1B,KAAa,iBAAW8B,IAAxBv6B,YAAAmP,GAAAgK,KAAA,GAAAqhB,MAAA,IAAArrB,EAAAgK,gBAKExY,IAAA,cACAR,MAAA,eAaAs6B,6BxBqsFFt6B,MAAO,WwBnsFL,OAAKsf,KAAL1d,MAAoBoG,MAASuG,UAC7B,GAAA3M,KAAK0d,gBAAetX,eAAoBhI,GAAQ+Z,CACjD,GAAAif,GAAAp3B,KAAA4rB,MAAAuB,UAAArL,EACF,aAAA9hB,KAAA4rB,MAAAkB,QAAAhL,IxBqsFa9hB,KAAK4rB,MAAMkB,QAAQhL,GAAU6L,aAAeyJ,EAASzuB,SAASX,OAAQ,CACxE,IAAK,GAAIkvB,GAAY,EAAGA,EAAYE,EAASzuB,SAASX,OAAQkvB,IAAa,CACzE,GAAIpH,GAAOsH,EAASzuB,SAASuuB,EAC7B,KAAqB,IAAjBpH,EAAKX,QAAmB,CwBjvHvBvF,WxBkvHY,EACf5pB,KAAK4rB,MAAMkB,QAAQhL,GAAU6L,cAC7B,QAGA3tB,KAAK4rB,MAAMkB,QAAQhL,GAAU6L,eAAiByJ,EAASzuB,SAASX,QAElEhI,KAAK24B,cAAcvB,EAASrG,mBAAoBjP,QyBxxHhEljB,IAAA,ezBiyHIR,MAAO,WyBjyHCM,KzBkyHD0qB,MAAMrjB,WAAWnD,SAASkE,KAAK9G,KAAKivB,iBAAkB,OAG7DrwB,IAAK,WyBnyHIg6B,iBzBqzHP,GAhBA54B,KAAK4rB,MAAMiB,ayBnyHblD,EAAKK,SzBqyHHhqB,KAAKq4B,eyBnyHH5qB,8BACAzN,KAAAu4B,cAEHv4B,KAAA64B,yBAED74B,KAAI+N,WAAa+qB,MAAM/qB,iBAEvB/N,KAAI84B,eAAa1yB,SAAAsG,MAAAtO,MAAA4B,KAAA0M,MAEb1M,KAAIywB,iBzBoyHJzwB,KAAKmrB,eAAe/kB,SAAS4b,UAAU5jB,OAAS,IyBlyHhD4B,KAAIiO,eAASF,SAAYrB,MAAZtO,MAAb4B,KAAA0M,WzBsyHoC,KAA3B1M,KAAKsqB,MAAMnS,aAA+BnY,KAAKsqB,MAAMnS,YAAYnQ,OAAS,EAAG,CyBlyHlFyoB,MAAaxiB,WAASwiB,KAAQ9f,KAA9B2Z,MAAAnS,aAEHugB,EAAA,GAAAh6B,GAAAq6B,YAAA5gB,IAAAnQ,OAAA,IAAAtJ,EAAAs6B,UAEDF,GAAA7pB,UAAoBgqB,gBAEvBP,EAAAvpB,UAAAzQ,EAAAw6B,cAEDR,EAAiB3qB,aAAa,EAE1B/N,KAAKgqB,eAASjc,SAATpB,OAA+Bd,MAAY6sB,EzBkyHhD14B,KAAK0d,eAAetX,SAASwG,WAAWxO,MAAQ+Z,EAAYnQ,OAAS,OyB5xHzE4hB,GzBiyHFhB,EAAe3qB,QAEjBL,GAAQK,QAAU2rB,IAIZuP,KyB/xHF,SAASC,IAAmBC,GAExB,YAIAC,uBAAWC,EAAQC,czBgyHvBp7B,OAAO,IyB7xHNR,EAAAg7B,UAAA/sB,EAED,IAAApN,GAAAZ,EAAA,QzBiyHAa,EAEJ,SAAiCX,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIY,KAAa,IAAW,MAAPZ,EAAe,IAAK,GAAIa,KAAOb,GAAWG,OAAOW,UAAUC,eAAeC,KAAKhB,EAAKa,KAAMD,EAAOC,GAAOb,EAAIa,GAAgC,OAAtBD,GAAOV,QAAUF,EAAYY,GAF9NF,EyB3xHhCb,GAASq7B,eAAyBM,EAClCvP,GACI,GAAAA,YACiByP,oBAA0BF,EAG3CD,WADAA,SAAOz2B,MAAIw2B,kFAAXrP,EAIH,IAAAjc,GAAA+qB,EAAA/qB,UzBgyHD,IAAI+qB,EAAM7sB,MAAO,C0Bv2HrB,O1By2HYwkB,GAAUzG,EAAS/d,MAAMpE,MAEzBoG,EAASF,EAAqB,SAAE2rB,M0B32H5C/oB,EAAA,EAAAE,EAAA4f,EAAAzoB,OAAA2I,EAAAE,EAAAF,I1B+2HY8f,EAAQ9f,GAAK1C,EAASwiB,EAAQ9f,EAGlCmoB,GAAM7sB,MAAMpE,M2Bp2Hd8xB,SAAIN,EAAVE,GACU,GAAI76B,GAAc26B,EAAMrxB,OACvBsxB,EAAUt3B,gBAArBw3B,EAAAD,EAAAvxB,OAKM4xB,OAHAC,OAAeR,GACfS,MAAeP,EAAI76B,GAEnBk7B,G3B61HwCd,EAAM7sB,MAAMpE,MAAO4oB,GAG7D,IAAK,GAAI7xB,KAAOmP,OAEqBlC,KAA7Bme,EAASjc,WAAWnP,KAExBmP,EAAWnP,GAAKiJ,MAWpB,SAA4BwxB,EAAOE,GAC/B,GAAIC,GAAcH,EAAMrxB,OACpBsxB,EAAS,GAAInrB,cAAaqrB,EAAcD,EAAOvxB,OAKnD,OAHAsxB,GAAOz2B,IAAIw2B,G2Bn4HfU,MAAaR,EAAAC,G3Bs4HFF,GAlBoCvrB,EAAWnP,GAAKiJ,MAAOmiB,EAASjc,WAAWnP,GAAKiJ,OAG/F,OAAOixB,K2Bl2HOkB,KAAMzD,SAAwD54B,EAAxD44B,GAAwD54B,EAA1C0P,kiD3B84HhC4sB,K2B34HJ,SAAAt8B,EAAAC,EAAAC,GAEA,YAGAq8B,uBAAiBrmB,EAAUqmB,c3B64H3B97B,OAAO,G2Bz4HP,IAAAK,GAAaZ,EAAA,QAEba,EAUA,SAAAX,GAAA,GAAAA,KAAAC,WAAA,MAAAD,EAAA,IAAAY,KAAA,UAAAZ,EAAA,OAAAa,KAAAb,GAAAG,OAAAW,UAAAC,eAAAC,KAAAhB,EAAAa,KAAAD,EAAAC,GAAAb,EAAAa,GAAA,OAAAD,GAAAV,QAAAF,EAAAY,GAVAF,GAEAo7B,EAAaM,EAAoB1W,QAEjC2W,EAIAC,SAA8BC,GAAG7W,MAAWzY,IAA5CjN,EAAAC,WAAAD,GAAAE,QAAAF,IAJ2CiN,GAOD+uB,GALzBI,EAAoB1W,QAKiB8W,EAAZ,SAG1CC,GA5B8E,GAAA97B,GAAA+7B,WA2BlElyB,GA3BkE7J,GAAAsD,Q3B46HhE,GAAItD,GAAMsD,Q2Bh5HpB04B,GAAYh8B,GAAhB6E,Y3Bk5HEkgB,EAAU5P,KAAK6P,GAAK,I2B/4HtB7a,EAAA,GAAQ8xB,WAAgB,IAAIj8B,GAC5Bi7B,EAAA,GAAAj7B,GAAAsD,QAAA,OACAs4B,EAAMnkB,MAAYnU,QAAItD,EAAMsD,KAC5B44B,EAAMC,GAAOlB,GAAb33B,QAAA,OAEA63B,EAAA,GAAAn7B,GAAA6E,WACAu2B,EAAkB,GAAlBp7B,GAAA6E,W3Bk5HE62B,EAAe,GAAI17B,GAAM6E,W2Bh5H3Bq2B,EAAgBl7B,GAAMsD,GAAVuB,WACZu3B,EAAsB94B,MAAtBuB,W3Bk5HEw3B,EAAe,GAAIr8B,GAAM6E,W2Bh5H3B82B,EAAA,GAAA37B,GAAA6E,UAEA3F,GAAIo9B,iBAAJlR,GAAA,GAAemR,U3Bm5HX1E,EAASzM,EAAKyM,O2Bj5Hd2E,IAASryB,KACPsyB,EAASrR,EAAUoR,gBAAoBE,EAAKrB,UAAW/V,OAAhB,OAAAnY,KAAAD,UAAA,IAAAA,UAAA,GAK7CkC,EAAa,GAAApP,GAAA28B,SAEXllB,EAAA,EAAAogB,EAAA,EACA2D,GAAiB,EAAjBrmB,KAAiBoS,KAAAiU,EAAA,EAEfoB,OAAKX,EAELviB,EAAA,GAAA1Z,GAAA+7B,UAIAZ,GAAI0B,iBAAeC,EAAS/X,EAAXzY,G3Bq5HrB8uB,EAAaK,iBAAiBsB,EAAGhY,GAAWzY,G2Bn5HxC0vB,mBAAAf,EAAAlW,EAAAzY,GACA4uB,EAAAO,iBAAAR,EAAAlW,GAAAzY,G3Bq5HJ8vB,EAAiBX,iBAAiBR,EAAa,IAAVlW,G2Bn5HjCtN,mBAAemkB,EAAYW,EAA3BjwB,GACAqvB,EAAMqB,iBAAqB/yB,KAAZqC,EAGfmL,UAAUwlB,eAAgBnB,OAAQL,cAEnC,MAAAxpB,GAAA4pB,aAGDpkB,EAAsBylB,EAAeZ,QAArCtzB,WAAAG,UACAyzB,EAAKL,EAAmBN,KAGxBrW,G3Bi5HeuX,EAAkBtzB,W2Bj5HpB0yB,EAEbxuB,gBAAiBwuB,MAALj5B,QAAZ,OACAyK,mBAAiBkuB,MAAc13B,QAA/B,MAyBF,KAvBE,GAAAkT,GAAA,GAAczX,GAAAsD,QAAA44B,GACZC,EAAIS,EAEH7uB,KACD2L,KAEAiI,EAAA,GAAA3hB,GAAAsD,QACAsiB,EAAA,GAAA5lB,GAAAsD,QAIAg5B,MAAA,GAGFE,EAASjyB,EAAL,GAAeA,MACjBiF,KAAUqC,OAAK+qB,GAAKL,KAAY/4B,GAAGo5B,aAAKL,GACzC,MAAAlB,GAAA/V,EAAA8X,KAIHC,EAAAlzB,EAAAb,OACA2I,EAAA,E3Bm5HI2qB,MAAO,G2Bj5HX3qB,EAAAorB,GAAA,CAGA,GAFAT,EAAAzyB,EAAA8H,KACAwF,EAAA3S,KAAAo3B,GACAU,EAAA5yB,OAAA,CAEIwsB,gBAAMoG,EAAiBU,kBAQ3BtB,KAFA,IAHeS,EAAIz8B,EAAMsD,OAEzBi6B,QACA,KAAA5uB,E3Bu5HI8I,EAAU3S,KAAK83B,EAAK5yB,OAAOuyB,aAAa3F,IAAIgG,EAAK5yB,OAAOiyB,c2Bj5H5D,IAAAe,GAAAJ,EAAA5yB,OAAAC,SAAAhC,OAAA20B,CAEAnlB,GAAAwlB,gBAAAD,EAAAX,EAAAV,G3Bm5HIlkB,EAAUwlB,gBAAgBnB,EAAQL,iBAAiBU,EAAMpX,EAAUiX,IAarE,G2B55HAM,EAAA,GAAAM,EAAAryB,MAAA,G3Bm5HAkN,EAAUof,YAAYqG,eAAeZ,G2Bj5HvCM,EAAAL,YAAAK,EAAAX,cAAA13B,QAAA6C,IAAAqQ,GAGAmO,EAAI8W,MAAWH,aACb5a,MAAAib,EAAAL,aACAiB,OAAWC,cAAaruB,SACxBrB,EAAA8D,KAAA+qB,EAAAX,cAAA13B,S3Bo5HIm4B,EAAW,C2Bj5HFntB,IAARqtB,EAAE3tB,O3Bm5HHO,EAAUqC,KAAK+qB,EAAKL,YAAY/4B,EAAGo5B,EAAKL,YAAY94B,EAAGm5B,EAAKL,YAAYn4B,GAE1EsV,EAAKgkB,GAAG54B,KAAK83B,EAAKX,e2Br5HtBviB,EAAAikB,GAAA74B,KAAA83B,EAAAL,Y3By5HI,IAAIqB,GAAU,GAAI59B,GAAM69B,aAAankB,EAAM,EAAG4iB,EAAY,GAAI,GAAG,EAEjEltB,GAAQ8qB,MAAM0D,G4BnkIpB,IAAAhB,EAAAryB,OACAiF,EAAAqC,KAAA+qB,EAAAL,YAAA/4B,EAAAo5B,EAAAL,YAAA94B,EAAAm5B,EAAAL,YAAAn4B,GAYA,GAAAoyB,IAAA,GAAAx2B,GAAA89B,MAAAR,cAAAvvB,GACAkB,EAAAunB,EAAAuH,UAEAxuB,GADAinB,EAAAwH,aACA,GAAAh+B,GAAAsD,SAAAszB,IAAAjV,GAAAiV,IAAA3nB,EAAA1K,QAAA24B,eAAA,MAmBAM,EAAA,GAAAx9B,GAAAuxB,cAOA,OANAmL,IAEAc,EAAAC,aAAAruB,IAIAH,OAAAM,SAAAD,UAAAqS,EAAAnS,YAAAJ,QAAAouB,KASAS,KACA,SAAAh/B,EAAAC,EAAAC,GCnDA,QAAA++B,GAAAC,G7B62IC,MAAOh/B,GAAoBi/B,EAAsBD,IAElD,QAASC,GAAsBD,G6B72I/B,GAAAE,GAAAtnB,EAAAonB,E7B+2IC,MAAKE,EAAK,GACT,KAAM,IAAIC,OAAM,uBAAyBH,EAAM,KAChD,OAAOE,G4B9zIR,GAAAtnB,IACAwnB,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,aAAA,OACAC,gBAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,UAAA,OACAC,aAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,aAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAAA,OACAC,UAAA,OACAC,OAA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","file":"static/js/app.4d5e6e6584f8fd78fc43.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ \"/w9m\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// 3rd party libs\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(\"wxAW\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _EffectComposer = __webpack_require__(\"AjHq\");\n\nvar _FXAA = __webpack_require__(\"8TtI\");\n\nvar _FXAA2 = _interopRequireDefault(_FXAA);\n\nvar _HueSaturation = __webpack_require__(\"RzKr\");\n\nvar _HueSaturation2 = _interopRequireDefault(_HueSaturation);\n\nvar _RGBShift = __webpack_require__(\"34JK\");\n\nvar _RGBShift2 = _interopRequireDefault(_RGBShift);\n\nvar _Vignette = __webpack_require__(\"TKs2\");\n\nvar _Vignette2 = _interopRequireDefault(_Vignette);\n\nvar _Film = __webpack_require__(\"Gqez\");\n\nvar _Film2 = _interopRequireDefault(_Film);\n\nvar _BrightnessContrast = __webpack_require__(\"F/9K\");\n\nvar _BrightnessContrast2 = _interopRequireDefault(_BrightnessContrast);\n\nvar _HorizontalTiltShiftShader = __webpack_require__(\"ZlZk\");\n\nvar _HorizontalTiltShiftShader2 = _interopRequireDefault(_HorizontalTiltShiftShader);\n\nvar _Config = __webpack_require__(\"6bm0\");\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Container for everything concerned with rendering the scene\r\n */\nvar Stage = function () {\n  function Stage() {\n    (0, _classCallCheck3.default)(this, Stage);\n\n    this.init();\n  }\n\n  /**\r\n   * Bootstrap\r\n   */\n\n\n  (0, _createClass3.default)(Stage, [{\n    key: 'init',\n    value: function init() {\n      this.initScene();\n      this.initCamera();\n      this.initRenderer();\n      this.initPost();\n      this.addLights();\n      this.addEvents();\n      this.resize();\n      this.animate();\n    }\n  }, {\n    key: 'initPost',\n    value: function initPost() {\n      this.composer = new _EffectComposer.EffectComposer(this.renderer);\n      this.composer.addPass(new _EffectComposer.RenderPass(this.scene, this.camera));\n\n      this.VignettePass = new _EffectComposer.ShaderPass(_Vignette2.default);\n      this.composer.addPass(this.VignettePass);\n\n      this.BrightnessContrastPass = new _EffectComposer.ShaderPass(_BrightnessContrast2.default);\n      this.composer.addPass(this.BrightnessContrastPass);\n\n      this.HueSaturationPass = new _EffectComposer.ShaderPass(_HueSaturation2.default);\n      this.composer.addPass(this.HueSaturationPass);\n\n      this.FXAAPass = new _EffectComposer.ShaderPass(_FXAA2.default);\n      // this.FXAAPass.renderToScreen = true\n      this.composer.addPass(this.FXAAPass);\n\n      this.RGBShiftPass = new _EffectComposer.ShaderPass(_RGBShift2.default);\n      this.RGBShiftPass.renderToScreen = true;\n      this.composer.addPass(this.RGBShiftPass);\n\n      /*this.bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 0.3, 0.3, 0.915) // 1.0, 9, 0.5, 512);\r\n      this.bloomPass.renderToScreen = true\r\n      this.composer.addPass(this.bloomPass) */\n\n      /* this.FilmShaderPass = new ShaderPass(FilmShader)\r\n      this.FilmShaderPass.renderToScreen = true\r\n      this.composer.addPass(this.FilmShaderPass) */\n    }\n\n    /**\r\n     * Create container scene\r\n     */\n\n  }, {\n    key: 'initScene',\n    value: function initScene() {\n      this.scene = new THREE.Scene();\n      this.scene.fog = new THREE.FogExp2(_Config2.default.scene.bgColor, _Config2.default.scene.fogFar);\n      this.scene.background = new THREE.Color(_Config2.default.scene.bgColor);\n    }\n\n    /**\r\n     * Set up stage camera with defaults\r\n     */\n\n  }, {\n    key: 'initCamera',\n    value: function initCamera() {\n      // initial position of camera in the scene\n      this.defaultCameraPos = new THREE.Vector3(0.0, 0.0, 2500.0);\n\n      // xy bounds of the ambient camera movement\n      this.cameraDriftLimitMax = {\n        x: 100.0,\n        y: 100.0\n      };\n      this.cameraDriftLimitMin = {\n        x: -100.0,\n        y: -100.0\n      };\n\n      this.cameraMoveStep = 200.0; // how much to move the camera forward on z-axis\n      this.cameraLerpSpeed = 0.03; // speed of camera lerp\n\n      // scene camera\n      this.camera = new THREE.PerspectiveCamera(_Config2.default.camera.fov, window.innerWidth / window.innerHeight, 1, 5000);\n      this.camera.position.set(this.defaultCameraPos.x, this.defaultCameraPos.y, this.defaultCameraPos.z);\n      this.camera.updateMatrixWorld();\n\n      this.cameraPos = this.camera.position.clone(); // current camera position\n      this.targetCameraPos = this.cameraPos.clone(); // target camera position\n\n      this.cameraLookAtPos = new THREE.Vector3(0, 0, 0); // current camera lookat\n      this.targetCameraLookAt = new THREE.Vector3(0, 0, 0); // target camera lookat\n      this.camera.lookAt(this.cameraLookAtPos);\n\n      // set initial camera rotations\n      this.cameraFromQuaternion = new THREE.Quaternion().copy(this.camera.quaternion);\n      var cameraToRotation = new THREE.Euler().copy(this.camera.rotation);\n      this.cameraToQuaternion = new THREE.Quaternion().setFromEuler(cameraToRotation);\n      this.cameraMoveQuaternion = new THREE.Quaternion();\n    }\n\n    /**\r\n     * Set up default stage renderer\r\n     */\n\n  }, {\n    key: 'initRenderer',\n    value: function initRenderer() {\n      this.canvas = document.getElementById('stage');\n\n      this.canvas.style.touchAction = 'none';\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: _Config2.default.scene.antialias,\n        canvas: this.canvas\n        // alpha: true\n      });\n\n      this.renderer.setClearColor(_Config2.default.scene.bgColor, 0.0);\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.renderer.autoClear = true;\n      this.renderer.sortObjects = false;\n\n      // fboHelper.init(this.renderer)\n      this.composer = new _EffectComposer.EffectComposer(this.renderer);\n    }\n\n    /**\r\n     * Stage events\r\n     */\n\n  }, {\n    key: 'addEvents',\n    value: function addEvents() {\n      var _this = this;\n\n      // scene\n      this.preUpdate = new Event('preUpdate'); // event fired at start of update\n      this.postUpdate = new Event('postUpdate'); // event fired at end of udpate\n\n      // camera\n      this.cameraMoveEvent = new Event('cameraMove'); // event fired when camera is moved\n\n      // current mouse position\n      this.mousePos = new THREE.Vector2();\n\n      // target mouse position\n      this.targetMousePos = new THREE.Vector2();\n\n      // event fired when mouse is moved\n      document.addEventListener('mousemove', this.onDocumentMouseMove.bind(this), false);\n\n      // function _getTouchBound (fn) {\n      //   return function (evt) {\n      //     fn.call(this, evt.changedTouches[0] || evt.touches[0])\n      //   }\n      // }\n      // document.addEventListener('touchmove', _getTouchBound(this.onDocumentMouseMove))\n      this.canvas.addEventListener('touchmove', function (evt) {\n        evt.preventDefault();\n        _this.onDocumentMouseMove(evt.changedTouches[0] || evt.touches[0]);\n      });\n\n      // window resize event\n      window.addEventListener('resize', this.resize.bind(this), false);\n    }\n\n    /**\r\n     * Add lights to the stage\r\n     */\n\n  }, {\n    key: 'addLights',\n    value: function addLights() {\n      var ambLight = new THREE.AmbientLight(0xffffff);\n      this.scene.add(ambLight);\n\n      this.pointLight = new THREE.PointLight(0xffffff, 5, 5000, 3);\n      this.scene.add(this.pointLight);\n    }\n\n    /**\r\n     * Window resize\r\n     */\n\n  }, {\n    key: 'resize',\n    value: function resize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n\n      this.FXAAPass.material.uniforms.resolution.value = new THREE.Vector2(1 / window.innerWidth, 1 / window.innerHeight);\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    /**\r\n     * Set target mouse position\r\n     */\n\n  }, {\n    key: 'onDocumentMouseMove',\n    value: function onDocumentMouseMove(event) {\n      var rect = this.renderer.domElement.getBoundingClientRect();\n      var x = event.clientX - rect.left;\n      var y = event.clientY - rect.top;\n      this.targetMousePos.x = x / window.innerWidth * 2 - 1;\n      this.targetMousePos.y = 1 - y / window.innerHeight * 2;\n    }\n\n    /**\r\n     * Lerp current mouse position to target position\r\n     */\n\n  }, {\n    key: 'updateMouse',\n    value: function updateMouse() {\n      this.mousePos.lerp(new THREE.Vector2(this.targetMousePos.x, this.targetMousePos.y), this.cameraLerpSpeed);\n    }\n\n    /**\r\n     * Move camera based on mouse position\r\n     */\n\n  }, {\n    key: 'cameraFollowMouse',\n    value: function cameraFollowMouse() {\n      document.dispatchEvent(this.cameraMoveEvent);\n\n      this.camera.lookAt(this.cameraLookAtPos);\n      this.targetCameraPos.x += this.mousePos.x;\n      this.targetCameraPos.y += this.mousePos.y;\n\n      if (this.targetCameraPos.x > this.cameraDriftLimitMax.x) {\n        this.targetCameraPos.x = this.cameraDriftLimitMax.x - 1;\n      }\n      if (this.targetCameraPos.y > this.cameraDriftLimitMax.y) {\n        this.targetCameraPos.y = this.cameraDriftLimitMax.y - 1;\n      }\n      if (this.targetCameraPos.x < this.cameraDriftLimitMin.x) {\n        this.targetCameraPos.x = this.cameraDriftLimitMin.x + 1;\n      }\n      if (this.targetCameraPos.y < this.cameraDriftLimitMin.y) {\n        this.targetCameraPos.y = this.cameraDriftLimitMin.y + 1;\n      }\n\n      // lerp camera posiiton to target\n      this.cameraPos.lerp(this.targetCameraPos, this.cameraLerpSpeed);\n      this.camera.position.copy(this.cameraPos);\n\n      // constantly look at target\n      this.cameraLookAtPos.lerp(this.targetCameraLookAt, this.cameraLerpSpeed);\n    }\n\n    /**\r\n     * Called each animation frame\r\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      document.dispatchEvent(this.preUpdate);\n\n      this.updateMouse();\n      this.cameraFollowMouse();\n\n      this.render();\n\n      // this.dispatchEvent(this.postUpdate)\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      this.composer.render();\n    }\n\n    /**\r\n     * Animation loop\r\n     */\n\n  }, {\n    key: 'animate',\n    value: function animate() {\n      this.reqID = requestAnimationFrame(this.animate.bind(this));\n      this.update();\n    }\n  }]);\n  return Stage;\n}();\n// import * as fboHelper from './helpers/fboHelper'\n// import EffectComposer2 from './EffectComposer'\n\n// Global config\n\n\nexports.default = Stage;\n\n/***/ }),\n\n/***/ 0:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"0RWK\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _values = __webpack_require__(\"gRE1\");\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n  'use strict';\n\n  /**\n   * fromArray()\n   *\n   * Generates a Merkle Tree from an array with the arguments passed in. The\n   * array cannot be empty. It can contain either values to be hashed, or an\n   * actual list of hashes.\n   *\n   * @param {object} args An object containing the arguments to construct\n   *                      the Tree. See the README for more info.\n   * @param {callback} cb An object containing the Merkle Tree. See\n   *                      the README for more info.\n   *\n   */\n\n  function fromArray(args, cb) {\n    var array;\n    var hashalgo;\n    var hashlist;\n\n    if (!args.array || args.array.length === 0) {\n      cb('An array with at least 1 element is required', null);\n      return null;\n    } else {\n      array = args.array;\n\n      hashalgo = 'md5';\n\n      hashlist = true;\n\n      // Import dependencies\n      var HashArray = __webpack_require__(\"8yMH\");\n      var genMerkle = __webpack_require__(\"PPUF\");\n\n      var arrayHasher = new HashArray(hashalgo, hashlist);\n\n      var fastMap = arrayHasher.hashElements(array); //, function (fastMap) {\n\n      // Generate a Merkle Tree from the leaves\n      var treeObj = genMerkle(fastMap, hashalgo); //, function (tree) {\n\n      var sortedTree = void 0;\n      for (var key in treeObj) {\n        if (treeObj.hasOwnProperty(key)) {\n          var element = treeObj[key];\n          if (element.type === 'root') {\n            element.parent = null;\n          } else if (element.type === 'node' || element.type === 'leaf') {\n            element.parent = treeObj[element.parent];\n          }\n          if (element.type === 'root' || element.type === 'node') {\n\n            element.children = {};\n            element.children.left = treeObj[element.left];\n            element.children.right = treeObj[element.right];\n            if (element.type === 'root') {\n              sortedTree = element;\n            }\n          }\n        }\n      }\n\n      // Get a flat heirachy sorted by depth\n      var tree = (0, _values2.default)(treeObj);\n      tree.sort(function (a, b) {\n        return b.level - a.level;\n      });\n\n      return { tree: tree, sortedTree: sortedTree };\n    }\n  }\n\n  // Export the fromArray() and fromFile() functions\n  module.exports = {\n    fromArray: fromArray\n  };\n})();\n\n/***/ }),\n\n/***/ \"1084\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"#define GLSLIFY 1\\nuniform float size;\\nuniform float scale;\\nuniform float uTime;\\nuniform sampler2D uColor;\\nuniform float pointCount;\\n\\nattribute float id;\\nvarying float display;\\n\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\n\\t// get color from texture\\n\\tvec4 sampleColor = texture2D(uColor, vec2((id / 3.0) / pointCount, 0.0));\\n\\n\\tfloat mod3 = mod(id, 3.0);\\n\\n\\tif (mod3 == 0.0) {\\n\\t\\tdisplay = float(sampleColor.r);\\n\\t}\\n\\tif (mod3 == 1.0) {\\n\\t\\tdisplay = float(sampleColor.g);\\n\\t}\\n\\tif (mod3 == 2.0) {\\n\\t\\tdisplay = float(sampleColor.b);\\n\\t}\\n\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\"\n\n/***/ }),\n\n/***/ \"1ome\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(\"Zx67\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(\"zwoO\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(\"Pf15\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _BlockMaterial = __webpack_require__(\"cNRb\");\n\nvar _BlockMaterial2 = _interopRequireDefault(_BlockMaterial);\n\nvar _BlockMaterial3 = __webpack_require__(\"w1qT\");\n\nvar _BlockMaterial4 = _interopRequireDefault(_BlockMaterial3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BlockMaterial = function (_THREE$MeshStandardMa) {\n  (0, _inherits3.default)(BlockMaterial, _THREE$MeshStandardMa);\n\n  function BlockMaterial(cfg) {\n    (0, _classCallCheck3.default)(this, BlockMaterial);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (BlockMaterial.__proto__ || (0, _getPrototypeOf2.default)(BlockMaterial)).call(this, cfg));\n\n    _this.type = 'ShaderMaterial';\n\n    _this.uniforms = THREE.ShaderLib.standard.uniforms;\n\n    _this.uniforms.uRefractionRatio = {\n      type: 'f',\n      value: 0.8\n    };\n\n    _this.uniforms.uFresnelBias = {\n      type: 'f',\n      value: 0.1\n    };\n\n    _this.uniforms.uFresnelScale = {\n      type: 'f',\n      value: 0.1\n    };\n\n    _this.uniforms.uFresnelPower = {\n      type: 'f',\n      value: 20.0\n    };\n\n    _this.vertexShader = _BlockMaterial2.default;\n    _this.fragmentShader = _BlockMaterial4.default;\n    return _this;\n  }\n\n  return BlockMaterial;\n}(THREE.MeshStandardMaterial);\n\nexports.default = BlockMaterial;\n\n/***/ }),\n\n/***/ \"2nw3\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"#define GLSLIFY 1\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform float uTime;\\nuniform sampler2D uColor;\\n\\nvarying float display;\\n\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nfloat circle(in float dist, in float radius) {\\n\\treturn 1.0 - smoothstep(\\n\\t\\tradius - (radius * 10.0),\\n\\t\\tradius + (radius * 0.01),\\n        dot(dist, dist) * 3.0\\n\\t);\\n}\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n//\\t#include <alphatest_fragment>\\n\\n\\tvec2 uv = ( vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\n\\tvec2 pos = uv;\\n\\tpos -= 0.5;\\n\\n\\tfloat dist = length(pos);\\n\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tvec3 color = vec3(circle(dist, 0.9));\\n\\tcolor *= sin((dist * 100.0) - (uTime * 30.0));\\n\\tcolor *= diffuseColor.rgb;\\n\\tcolor *= display;\\n\\n\\tgl_FragColor = vec4( color, 1.0 );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t//#include <fog_fragment>\\n\\n}\\n\"\n\n/***/ }),\n\n/***/ \"34JK\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar RGBShiftShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    amount: { value: 0.00065 },\n    angle: { value: 0.1 }\n  },\n  vertexShader: \"\\n    varying vec2 vUv;\\n    void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n    }\\n  \",\n  fragmentShader: \"\\n    uniform sampler2D tDiffuse;\\n    uniform float amount;\\n    uniform float angle;\\n    varying vec2 vUv;\\n    void main() {\\n    vec2 offset = amount * vec2( cos(angle), sin(angle));\\n    vec4 cr = texture2D(tDiffuse, vUv + offset);\\n    vec4 cga = texture2D(tDiffuse, vUv);\\n    vec4 cb = texture2D(tDiffuse, vUv - offset);\\n    gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n    }\\n  \"\n};\n\nexports.default = RGBShiftShader;\n\n/***/ }),\n\n/***/ \"6bm0\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Config = {\n  daysEitherSide: 4,\n  showGUI: true,\n  scene: {\n    bgColor: 0x26263c,\n    shadowsOn: false,\n    fogFar: 0.00040,\n    antialias: true\n  },\n  postProcessing: {\n    effectDownscaleDivisor: 2\n  },\n  camera: {\n    fov: 80\n  }\n};\n\nexports.default = Config;\n\n/***/ }),\n\n/***/ \"8TtI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar FXAAShader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        resolution: { value: new THREE.Vector2(1 / window.innerWidth, 1 / window.innerHeight) }\n    },\n    vertexShader: '\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n    }\\n  ',\n    fragmentShader: '\\n    precision highp float;\\n\\n    uniform sampler2D tDiffuse;\\n\\n    uniform vec2 resolution;\\n\\n    varying vec2 vUv;\\n\\n    // FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\\n\\n    //---------------------------------------------------------------------------------\\n    // SDK Version: v3.00\\n    // Email:       gameworks@nvidia.com\\n    // Site:        http://developer.nvidia.com/\\n    //\\n    // Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\\n    //\\n    // Redistribution and use in source and binary forms, with or without\\n    // modification, are permitted provided that the following conditions\\n    // are met:\\n    //  * Redistributions of source code must retain the above copyright\\n    //    notice, this list of conditions and the following disclaimer.\\n    //  * Redistributions in binary form must reproduce the above copyright\\n    //    notice, this list of conditions and the following disclaimer in the\\n    //    documentation and/or other materials provided with the distribution.\\n    //  * Neither the name of NVIDIA CORPORATION nor the names of its\\n    //    contributors may be used to endorse or promote products derived\\n    //    from this software without specific prior written permission.\\n    //\\n    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AS IS AND ANY,\\n    // EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n    // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n    // PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\\n    // CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\n    // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\n    // PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\n    // PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\\n    // OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n    //\\n    //----------------------------------------------------------------------------------\\n\\n    #define FXAA_PC 1\\n    #define FXAA_GLSL_100 1\\n    #define FXAA_QUALITY_PRESET 12\\n\\n    #define FXAA_GREEN_AS_LUMA 1\\n\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_PC_CONSOLE\\n        //\\n        // The console algorithm for PC is included\\n        // for developers targeting really low spec machines.\\n        // Likely better to just run FXAA_PC, and use a really low preset.\\n        //\\n        #define FXAA_PC_CONSOLE 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_GLSL_120\\n        #define FXAA_GLSL_120 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_GLSL_130\\n        #define FXAA_GLSL_130 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_HLSL_3\\n        #define FXAA_HLSL_3 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_HLSL_4\\n        #define FXAA_HLSL_4 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_HLSL_5\\n        #define FXAA_HLSL_5 0\\n    #endif\\n    /*==========================================================================*/\\n    #ifndef FXAA_GREEN_AS_LUMA\\n        //\\n        // For those using non-linear color,\\n        // and either not able to get luma in alpha, or not wanting to,\\n        // this enables FXAA to run using green as a proxy for luma.\\n        // So with this enabled, no need to pack luma in alpha.\\n        //\\n        // This will turn off AA on anything which lacks some amount of green.\\n        // Pure red and blue or combination of only R and B, will get no AA.\\n        //\\n        // Might want to lower the settings for both,\\n        //    fxaaConsoleEdgeThresholdMin\\n        //    fxaaQualityEdgeThresholdMin\\n        // In order to insure AA does not get turned off on colors\\n        // which contain a minor amount of green.\\n        //\\n        // 1 = On.\\n        // 0 = Off.\\n        //\\n        #define FXAA_GREEN_AS_LUMA 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_EARLY_EXIT\\n        //\\n        // Controls algorithms early exit path.,\\n        // On PS3 turning this ON adds 2 cycles to the shader.\\n        // On 360 turning this OFF adds 10ths of a millisecond to the shader.\\n        // Turning this off on console will result in a more blurry image.\\n        // So this defaults to on.\\n        //\\n        // 1 = On.\\n        // 0 = Off.\\n        //\\n        #define FXAA_EARLY_EXIT 1\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_DISCARD\\n        //\\n        // Only valid for PC OpenGL currently.\\n        // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\\n        //\\n        // 1 = Use discard on pixels which dont need AA.,\\n        //     For APIs which enable concurrent TEX+ROP from same surface.\\n        // 0 = Return unchanged color on pixels which dont need AA.,\\n        //\\n        #define FXAA_DISCARD 0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_FAST_PIXEL_OFFSET\\n        //\\n        // Used for GLSL 120 only.\\n        //\\n        // 1 = GL API supports fast pixel offsets\\n        // 0 = do not use fast pixel offsets\\n        //\\n        #ifdef GL_EXT_gpu_shader4\\n            #define FXAA_FAST_PIXEL_OFFSET 1\\n        #endif\\n        #ifdef GL_NV_gpu_shader5\\n            #define FXAA_FAST_PIXEL_OFFSET 1\\n        #endif\\n        #ifdef GL_ARB_gpu_shader5\\n            #define FXAA_FAST_PIXEL_OFFSET 1\\n        #endif\\n        #ifndef FXAA_FAST_PIXEL_OFFSET\\n            #define FXAA_FAST_PIXEL_OFFSET 0\\n        #endif\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #ifndef FXAA_GATHER4_ALPHA\\n        //\\n        // 1 = API supports gather4 on alpha channel.\\n        // 0 = API does not support gather4 on alpha channel.\\n        //\\n        #if (FXAA_HLSL_5 == 1)\\n            #define FXAA_GATHER4_ALPHA 1\\n        #endif\\n        #ifdef GL_ARB_gpu_shader5\\n            #define FXAA_GATHER4_ALPHA 1\\n        #endif\\n        #ifdef GL_NV_gpu_shader5\\n            #define FXAA_GATHER4_ALPHA 1\\n        #endif\\n        #ifndef FXAA_GATHER4_ALPHA\\n            #define FXAA_GATHER4_ALPHA 0\\n        #endif\\n    #endif\\n\\n\\n    /*============================================================================\\n                            FXAA QUALITY - TUNING KNOBS\\n    ------------------------------------------------------------------------------\\n    NOTE the other tuning knobs are now in the shader function inputs!\\n    ============================================================================*/\\n    #ifndef FXAA_QUALITY_PRESET\\n        //\\n        // Choose the quality preset.\\n        // This needs to be compiled into the shader as it effects code.\\n        // Best option to include multiple presets is to\\n        // in each shader define the preset, then include this file.\\n        //\\n        // OPTIONS\\n        // -----------------------------------------------------------------------\\n        // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\\n        // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\\n        // 39       - no dither, very expensive\\n        //\\n        // NOTES\\n        // -----------------------------------------------------------------------\\n        // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\\n        // 13 = about same speed as FXAA 3.9 and better than 12\\n        // 23 = closest to FXAA 3.9 visually and performance wise\\n        //  _ = the lowest digit is directly related to performance\\n        // _  = the highest digit is directly related to style\\n        //\\n        #define FXAA_QUALITY_PRESET 12\\n    #endif\\n\\n\\n    /*============================================================================\\n\\n                               FXAA QUALITY - PRESETS\\n\\n    ============================================================================*/\\n\\n    /*============================================================================\\n                         FXAA QUALITY - MEDIUM DITHER PRESETS\\n    ============================================================================*/\\n    #if (FXAA_QUALITY_PRESET == 10)\\n        #define FXAA_QUALITY_PS 3\\n        #define FXAA_QUALITY_P0 1.5\\n        #define FXAA_QUALITY_P1 3.0\\n        #define FXAA_QUALITY_P2 12.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 11)\\n        #define FXAA_QUALITY_PS 4\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 3.0\\n        #define FXAA_QUALITY_P3 12.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 12)\\n        #define FXAA_QUALITY_PS 5\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 4.0\\n        #define FXAA_QUALITY_P4 12.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 13)\\n        #define FXAA_QUALITY_PS 6\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 4.0\\n        #define FXAA_QUALITY_P5 12.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 14)\\n        #define FXAA_QUALITY_PS 7\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 4.0\\n        #define FXAA_QUALITY_P6 12.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 15)\\n        #define FXAA_QUALITY_PS 8\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 2.0\\n        #define FXAA_QUALITY_P6 4.0\\n        #define FXAA_QUALITY_P7 12.0\\n    #endif\\n\\n    /*============================================================================\\n                         FXAA QUALITY - LOW DITHER PRESETS\\n    ============================================================================*/\\n    #if (FXAA_QUALITY_PRESET == 20)\\n        #define FXAA_QUALITY_PS 3\\n        #define FXAA_QUALITY_P0 1.5\\n        #define FXAA_QUALITY_P1 2.0\\n        #define FXAA_QUALITY_P2 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 21)\\n        #define FXAA_QUALITY_PS 4\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 22)\\n        #define FXAA_QUALITY_PS 5\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 23)\\n        #define FXAA_QUALITY_PS 6\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 24)\\n        #define FXAA_QUALITY_PS 7\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 3.0\\n        #define FXAA_QUALITY_P6 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 25)\\n        #define FXAA_QUALITY_PS 8\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 2.0\\n        #define FXAA_QUALITY_P6 4.0\\n        #define FXAA_QUALITY_P7 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 26)\\n        #define FXAA_QUALITY_PS 9\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 2.0\\n        #define FXAA_QUALITY_P6 2.0\\n        #define FXAA_QUALITY_P7 4.0\\n        #define FXAA_QUALITY_P8 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 27)\\n        #define FXAA_QUALITY_PS 10\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 2.0\\n        #define FXAA_QUALITY_P6 2.0\\n        #define FXAA_QUALITY_P7 2.0\\n        #define FXAA_QUALITY_P8 4.0\\n        #define FXAA_QUALITY_P9 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 28)\\n        #define FXAA_QUALITY_PS 11\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 2.0\\n        #define FXAA_QUALITY_P6 2.0\\n        #define FXAA_QUALITY_P7 2.0\\n        #define FXAA_QUALITY_P8 2.0\\n        #define FXAA_QUALITY_P9 4.0\\n        #define FXAA_QUALITY_P10 8.0\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_QUALITY_PRESET == 29)\\n        #define FXAA_QUALITY_PS 12\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.5\\n        #define FXAA_QUALITY_P2 2.0\\n        #define FXAA_QUALITY_P3 2.0\\n        #define FXAA_QUALITY_P4 2.0\\n        #define FXAA_QUALITY_P5 2.0\\n        #define FXAA_QUALITY_P6 2.0\\n        #define FXAA_QUALITY_P7 2.0\\n        #define FXAA_QUALITY_P8 2.0\\n        #define FXAA_QUALITY_P9 2.0\\n        #define FXAA_QUALITY_P10 4.0\\n        #define FXAA_QUALITY_P11 8.0\\n    #endif\\n\\n    /*============================================================================\\n                         FXAA QUALITY - EXTREME QUALITY\\n    ============================================================================*/\\n    #if (FXAA_QUALITY_PRESET == 39)\\n        #define FXAA_QUALITY_PS 12\\n        #define FXAA_QUALITY_P0 1.0\\n        #define FXAA_QUALITY_P1 1.0\\n        #define FXAA_QUALITY_P2 1.0\\n        #define FXAA_QUALITY_P3 1.0\\n        #define FXAA_QUALITY_P4 1.0\\n        #define FXAA_QUALITY_P5 1.5\\n        #define FXAA_QUALITY_P6 2.0\\n        #define FXAA_QUALITY_P7 2.0\\n        #define FXAA_QUALITY_P8 2.0\\n        #define FXAA_QUALITY_P9 2.0\\n        #define FXAA_QUALITY_P10 4.0\\n        #define FXAA_QUALITY_P11 8.0\\n    #endif\\n\\n\\n\\n    /*============================================================================\\n\\n                                    API PORTING\\n\\n    ============================================================================*/\\n    #if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\\n        #define FxaaBool bool\\n        #define FxaaDiscard discard\\n        #define FxaaFloat float\\n        #define FxaaFloat2 vec2\\n        #define FxaaFloat3 vec3\\n        #define FxaaFloat4 vec4\\n        #define FxaaHalf float\\n        #define FxaaHalf2 vec2\\n        #define FxaaHalf3 vec3\\n        #define FxaaHalf4 vec4\\n        #define FxaaInt2 ivec2\\n        #define FxaaSat(x) clamp(x, 0.0, 1.0)\\n        #define FxaaTex sampler2D\\n    #else\\n        #define FxaaBool bool\\n        #define FxaaDiscard clip(-1)\\n        #define FxaaFloat float\\n        #define FxaaFloat2 float2\\n        #define FxaaFloat3 float3\\n        #define FxaaFloat4 float4\\n        #define FxaaHalf half\\n        #define FxaaHalf2 half2\\n        #define FxaaHalf3 half3\\n        #define FxaaHalf4 half4\\n        #define FxaaSat(x) saturate(x)\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_GLSL_100 == 1)\\n      #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\\n      #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_GLSL_120 == 1)\\n        // Requires,\\n        //  #version 120\\n        // And at least,\\n        //  #extension GL_EXT_gpu_shader4 : enable\\n        //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\\n        #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\\n        #if (FXAA_FAST_PIXEL_OFFSET == 1)\\n            #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\\n        #else\\n            #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\\n        #endif\\n        #if (FXAA_GATHER4_ALPHA == 1)\\n            // use #extension GL_ARB_gpu_shader5 : enable\\n            #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\\n            #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\\n            #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\\n            #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\\n        #endif\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_GLSL_130 == 1)\\n        // Requires \"#version 130\" or better\\n        #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\\n        #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\\n        #if (FXAA_GATHER4_ALPHA == 1)\\n            // use #extension GL_ARB_gpu_shader5 : enable\\n            #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\\n            #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\\n            #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\\n            #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\\n        #endif\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_HLSL_3 == 1)\\n        #define FxaaInt2 float2\\n        #define FxaaTex sampler2D\\n        #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\\n        #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_HLSL_4 == 1)\\n        #define FxaaInt2 int2\\n        struct FxaaTex { SamplerState smpl; Texture2D tex; };\\n        #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\\n        #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\\n    #endif\\n    /*--------------------------------------------------------------------------*/\\n    #if (FXAA_HLSL_5 == 1)\\n        #define FxaaInt2 int2\\n        struct FxaaTex { SamplerState smpl; Texture2D tex; };\\n        #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\\n        #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\\n        #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\\n        #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\\n        #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\\n        #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\\n    #endif\\n\\n\\n    /*============================================================================\\n                       GREEN AS LUMA OPTION SUPPORT FUNCTION\\n    ============================================================================*/\\n    #if (FXAA_GREEN_AS_LUMA == 0)\\n        FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\\n    #else\\n        FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\\n    #endif\\n\\n\\n\\n\\n    /*============================================================================\\n\\n                                 FXAA3 QUALITY - PC\\n\\n    ============================================================================*/\\n    #if (FXAA_PC == 1)\\n    /*--------------------------------------------------------------------------*/\\n    FxaaFloat4 FxaaPixelShader(\\n        //\\n        // Use noperspective interpolation here (turn off perspective interpolation).\\n        // {xy} = center of pixel\\n        FxaaFloat2 pos,\\n        //\\n        // Used only for FXAA Console, and not used on the 360 version.\\n        // Use noperspective interpolation here (turn off perspective interpolation).\\n        // {xy_} = upper left of pixel\\n        // {_zw} = lower right of pixel\\n        FxaaFloat4 fxaaConsolePosPos,\\n        //\\n        // Input color texture.\\n        // {rgb_} = color in linear or perceptual color space\\n        // if (FXAA_GREEN_AS_LUMA == 0)\\n        //     {__a} = luma in perceptual color space (not linear)\\n        FxaaTex tex,\\n        //\\n        // Only used on the optimized 360 version of FXAA Console.\\n        // For everything but 360, just use the same input here as for \"tex\".\\n        // For 360, same texture, just alias with a 2nd sampler.\\n        // This sampler needs to have an exponent bias of -1.\\n        FxaaTex fxaaConsole360TexExpBiasNegOne,\\n        //\\n        // Only used on the optimized 360 version of FXAA Console.\\n        // For everything but 360, just use the same input here as for \"tex\".\\n        // For 360, same texture, just alias with a 3nd sampler.\\n        // This sampler needs to have an exponent bias of -2.\\n        FxaaTex fxaaConsole360TexExpBiasNegTwo,\\n        //\\n        // Only used on FXAA Quality.\\n        // This must be from a constant/uniform.\\n        // {x_} = 1.0/screenWidthInPixels\\n        // {_y} = 1.0/screenHeightInPixels\\n        FxaaFloat2 fxaaQualityRcpFrame,\\n        //\\n        // Only used on FXAA Console.\\n        // This must be from a constant/uniform.\\n        // This effects sub-pixel AA quality and inversely sharpness.\\n        //   Where N ranges between,\\n        //     N = 0.50 (default)\\n        //     N = 0.33 (sharper)\\n        // {x__} = -N/screenWidthInPixels\\n        // {_y_} = -N/screenHeightInPixels\\n        // {_z_} =  N/screenWidthInPixels\\n        // {__w} =  N/screenHeightInPixels\\n        FxaaFloat4 fxaaConsoleRcpFrameOpt,\\n        //\\n        // Only used on FXAA Console.\\n        // Not used on 360, but used on PS3 and PC.\\n        // This must be from a constant/uniform.\\n        // {x__} = -2.0/screenWidthInPixels\\n        // {_y_} = -2.0/screenHeightInPixels\\n        // {_z_} =  2.0/screenWidthInPixels\\n        // {__w} =  2.0/screenHeightInPixels\\n        FxaaFloat4 fxaaConsoleRcpFrameOpt2,\\n        //\\n        // Only used on FXAA Console.\\n        // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\\n        // This must be from a constant/uniform.\\n        // {x__} =  8.0/screenWidthInPixels\\n        // {_y_} =  8.0/screenHeightInPixels\\n        // {_z_} = -4.0/screenWidthInPixels\\n        // {__w} = -4.0/screenHeightInPixels\\n        FxaaFloat4 fxaaConsole360RcpFrameOpt2,\\n        //\\n        // Only used on FXAA Quality.\\n        // This used to be the FXAA_QUALITY_SUBPIX define.\\n        // It is here now to allow easier tuning.\\n        // Choose the amount of sub-pixel aliasing removal.\\n        // This can effect sharpness.\\n        //   1.00 - upper limit (softer)\\n        //   0.75 - default amount of filtering\\n        //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\\n        //   0.25 - almost off\\n        //   0.00 - completely off\\n        FxaaFloat fxaaQualitySubpix,\\n        //\\n        // Only used on FXAA Quality.\\n        // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\\n        // It is here now to allow easier tuning.\\n        // The minimum amount of local contrast required to apply algorithm.\\n        //   0.333 - too little (faster)\\n        //   0.250 - low quality\\n        //   0.166 - default\\n        //   0.125 - high quality\\n        //   0.063 - overkill (slower)\\n        FxaaFloat fxaaQualityEdgeThreshold,\\n        //\\n        // Only used on FXAA Quality.\\n        // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\\n        // It is here now to allow easier tuning.\\n        // Trims the algorithm from processing darks.\\n        //   0.0833 - upper limit (default, the start of visible unfiltered edges)\\n        //   0.0625 - high quality (faster)\\n        //   0.0312 - visible limit (slower)\\n        // Special notes when using FXAA_GREEN_AS_LUMA,\\n        //   Likely want to set this to zero.\\n        //   As colors that are mostly not-green\\n        //   will appear very dark in the green channel!\\n        //   Tune by looking at mostly non-green content,\\n        //   then start at zero and increase until aliasing is a problem.\\n        FxaaFloat fxaaQualityEdgeThresholdMin,\\n        //\\n        // Only used on FXAA Console.\\n        // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\\n        // It is here now to allow easier tuning.\\n        // This does not effect PS3, as this needs to be compiled in.\\n        //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\\n        //   Due to the PS3 being ALU bound,\\n        //   there are only three safe values here: 2 and 4 and 8.\\n        //   These options use the shaders ability to a free *|/ by 2|4|8.\\n        // For all other platforms can be a non-power of two.\\n        //   8.0 is sharper (default!!!)\\n        //   4.0 is softer\\n        //   2.0 is really soft (good only for vector graphics inputs)\\n        FxaaFloat fxaaConsoleEdgeSharpness,\\n        //\\n        // Only used on FXAA Console.\\n        // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\\n        // It is here now to allow easier tuning.\\n        // This does not effect PS3, as this needs to be compiled in.\\n        //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\\n        //   Due to the PS3 being ALU bound,\\n        //   there are only two safe values here: 1/4 and 1/8.\\n        //   These options use the shaders ability to a free *|/ by 2|4|8.\\n        // The console setting has a different mapping than the quality setting.\\n        // Other platforms can use other values.\\n        //   0.125 leaves less aliasing, but is softer (default!!!)\\n        //   0.25 leaves more aliasing, and is sharper\\n        FxaaFloat fxaaConsoleEdgeThreshold,\\n        //\\n        // Only used on FXAA Console.\\n        // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\\n        // It is here now to allow easier tuning.\\n        // Trims the algorithm from processing darks.\\n        // The console setting has a different mapping than the quality setting.\\n        // This only applies when FXAA_EARLY_EXIT is 1.\\n        // This does not apply to PS3,\\n        // PS3 was simplified to avoid more shader instructions.\\n        //   0.06 - faster but more aliasing in darks\\n        //   0.05 - default\\n        //   0.04 - slower and less aliasing in darks\\n        // Special notes when using FXAA_GREEN_AS_LUMA,\\n        //   Likely want to set this to zero.\\n        //   As colors that are mostly not-green\\n        //   will appear very dark in the green channel!\\n        //   Tune by looking at mostly non-green content,\\n        //   then start at zero and increase until aliasing is a problem.\\n        FxaaFloat fxaaConsoleEdgeThresholdMin,\\n        //\\n        // Extra constants for 360 FXAA Console only.\\n        // Use zeros or anything else for other platforms.\\n        // These must be in physical constant registers and NOT immedates.\\n        // Immedates will result in compiler un-optimizing.\\n        // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\\n        FxaaFloat4 fxaaConsole360ConstDir\\n    ) {\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat2 posM;\\n        posM.x = pos.x;\\n        posM.y = pos.y;\\n        #if (FXAA_GATHER4_ALPHA == 1)\\n            #if (FXAA_DISCARD == 0)\\n                FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\\n                #if (FXAA_GREEN_AS_LUMA == 0)\\n                    #define lumaM rgbyM.w\\n                #else\\n                    #define lumaM rgbyM.y\\n                #endif\\n            #endif\\n            #if (FXAA_GREEN_AS_LUMA == 0)\\n                FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\\n                FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\\n            #else\\n                FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\\n                FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\\n            #endif\\n            #if (FXAA_DISCARD == 1)\\n                #define lumaM luma4A.w\\n            #endif\\n            #define lumaE luma4A.z\\n            #define lumaS luma4A.x\\n            #define lumaSE luma4A.y\\n            #define lumaNW luma4B.w\\n            #define lumaN luma4B.z\\n            #define lumaW luma4B.x\\n        #else\\n            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\\n            #if (FXAA_GREEN_AS_LUMA == 0)\\n                #define lumaM rgbyM.w\\n            #else\\n                #define lumaM rgbyM.y\\n            #endif\\n            #if (FXAA_GLSL_100 == 1)\\n              FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\\n            #else\\n              FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\\n            #endif\\n        #endif\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat maxSM = max(lumaS, lumaM);\\n        FxaaFloat minSM = min(lumaS, lumaM);\\n        FxaaFloat maxESM = max(lumaE, maxSM);\\n        FxaaFloat minESM = min(lumaE, minSM);\\n        FxaaFloat maxWN = max(lumaN, lumaW);\\n        FxaaFloat minWN = min(lumaN, lumaW);\\n        FxaaFloat rangeMax = max(maxWN, maxESM);\\n        FxaaFloat rangeMin = min(minWN, minESM);\\n        FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\\n        FxaaFloat range = rangeMax - rangeMin;\\n        FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\\n        FxaaBool earlyExit = range < rangeMaxClamped;\\n    /*--------------------------------------------------------------------------*/\\n        if(earlyExit)\\n            #if (FXAA_DISCARD == 1)\\n                FxaaDiscard;\\n            #else\\n                return rgbyM;\\n            #endif\\n    /*--------------------------------------------------------------------------*/\\n        #if (FXAA_GATHER4_ALPHA == 0)\\n            #if (FXAA_GLSL_100 == 1)\\n              FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\\n            #else\\n              FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\\n              FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\\n            #endif\\n        #else\\n            FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\\n            FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\\n        #endif\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat lumaNS = lumaN + lumaS;\\n        FxaaFloat lumaWE = lumaW + lumaE;\\n        FxaaFloat subpixRcpRange = 1.0/range;\\n        FxaaFloat subpixNSWE = lumaNS + lumaWE;\\n        FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\\n        FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat lumaNESE = lumaNE + lumaSE;\\n        FxaaFloat lumaNWNE = lumaNW + lumaNE;\\n        FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\\n        FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat lumaNWSW = lumaNW + lumaSW;\\n        FxaaFloat lumaSWSE = lumaSW + lumaSE;\\n        FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\\n        FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\\n        FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\\n        FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\\n        FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\\n        FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\\n        FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\\n        FxaaBool horzSpan = edgeHorz >= edgeVert;\\n        FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\\n    /*--------------------------------------------------------------------------*/\\n        if(!horzSpan) lumaN = lumaW;\\n        if(!horzSpan) lumaS = lumaE;\\n        if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\\n        FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat gradientN = lumaN - lumaM;\\n        FxaaFloat gradientS = lumaS - lumaM;\\n        FxaaFloat lumaNN = lumaN + lumaM;\\n        FxaaFloat lumaSS = lumaS + lumaM;\\n        FxaaBool pairN = abs(gradientN) >= abs(gradientS);\\n        FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\\n        if(pairN) lengthSign = -lengthSign;\\n        FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat2 posB;\\n        posB.x = posM.x;\\n        posB.y = posM.y;\\n        FxaaFloat2 offNP;\\n        offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\\n        offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\\n        if(!horzSpan) posB.x += lengthSign * 0.5;\\n        if( horzSpan) posB.y += lengthSign * 0.5;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat2 posN;\\n        posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\\n        posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\\n        FxaaFloat2 posP;\\n        posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\\n        posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\\n        FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\\n        FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\\n        FxaaFloat subpixE = subpixC * subpixC;\\n        FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\\n    /*--------------------------------------------------------------------------*/\\n        if(!pairN) lumaNN = lumaSS;\\n        FxaaFloat gradientScaled = gradient * 1.0/4.0;\\n        FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\\n        FxaaFloat subpixF = subpixD * subpixE;\\n        FxaaBool lumaMLTZero = lumaMM < 0.0;\\n    /*--------------------------------------------------------------------------*/\\n        lumaEndN -= lumaNN * 0.5;\\n        lumaEndP -= lumaNN * 0.5;\\n        FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\\n        FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\\n        FxaaBool doneNP = (!doneN) || (!doneP);\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\\n    /*--------------------------------------------------------------------------*/\\n        if(doneNP) {\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\\n            doneNP = (!doneN) || (!doneP);\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\\n    /*--------------------------------------------------------------------------*/\\n            #if (FXAA_QUALITY_PS > 3)\\n            if(doneNP) {\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\\n                doneNP = (!doneN) || (!doneP);\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\\n    /*--------------------------------------------------------------------------*/\\n                #if (FXAA_QUALITY_PS > 4)\\n                if(doneNP) {\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\\n                    doneNP = (!doneN) || (!doneP);\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\\n    /*--------------------------------------------------------------------------*/\\n                    #if (FXAA_QUALITY_PS > 5)\\n                    if(doneNP) {\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\\n                        doneNP = (!doneN) || (!doneP);\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\\n    /*--------------------------------------------------------------------------*/\\n                        #if (FXAA_QUALITY_PS > 6)\\n                        if(doneNP) {\\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                            doneN = abs(lumaEndN) >= gradientScaled;\\n                            doneP = abs(lumaEndP) >= gradientScaled;\\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\\n                            doneNP = (!doneN) || (!doneP);\\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\\n    /*--------------------------------------------------------------------------*/\\n                            #if (FXAA_QUALITY_PS > 7)\\n                            if(doneNP) {\\n                                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                                doneN = abs(lumaEndN) >= gradientScaled;\\n                                doneP = abs(lumaEndP) >= gradientScaled;\\n                                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\\n                                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\\n                                doneNP = (!doneN) || (!doneP);\\n                                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\\n                                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\\n    /*--------------------------------------------------------------------------*/\\n        #if (FXAA_QUALITY_PS > 8)\\n        if(doneNP) {\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\\n            doneNP = (!doneN) || (!doneP);\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\\n    /*--------------------------------------------------------------------------*/\\n            #if (FXAA_QUALITY_PS > 9)\\n            if(doneNP) {\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\\n                doneNP = (!doneN) || (!doneP);\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\\n    /*--------------------------------------------------------------------------*/\\n                #if (FXAA_QUALITY_PS > 10)\\n                if(doneNP) {\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\\n                    doneNP = (!doneN) || (!doneP);\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\\n    /*--------------------------------------------------------------------------*/\\n                    #if (FXAA_QUALITY_PS > 11)\\n                    if(doneNP) {\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\\n                        doneNP = (!doneN) || (!doneP);\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\\n    /*--------------------------------------------------------------------------*/\\n                        #if (FXAA_QUALITY_PS > 12)\\n                        if(doneNP) {\\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n                            doneN = abs(lumaEndN) >= gradientScaled;\\n                            doneP = abs(lumaEndP) >= gradientScaled;\\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\\n                            doneNP = (!doneN) || (!doneP);\\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\\n    /*--------------------------------------------------------------------------*/\\n                        }\\n                        #endif\\n    /*--------------------------------------------------------------------------*/\\n                    }\\n                    #endif\\n    /*--------------------------------------------------------------------------*/\\n                }\\n                #endif\\n    /*--------------------------------------------------------------------------*/\\n            }\\n            #endif\\n    /*--------------------------------------------------------------------------*/\\n        }\\n        #endif\\n    /*--------------------------------------------------------------------------*/\\n                            }\\n                            #endif\\n    /*--------------------------------------------------------------------------*/\\n                        }\\n                        #endif\\n    /*--------------------------------------------------------------------------*/\\n                    }\\n                    #endif\\n    /*--------------------------------------------------------------------------*/\\n                }\\n                #endif\\n    /*--------------------------------------------------------------------------*/\\n            }\\n            #endif\\n    /*--------------------------------------------------------------------------*/\\n        }\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat dstN = posM.x - posN.x;\\n        FxaaFloat dstP = posP.x - posM.x;\\n        if(!horzSpan) dstN = posM.y - posN.y;\\n        if(!horzSpan) dstP = posP.y - posM.y;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\\n        FxaaFloat spanLength = (dstP + dstN);\\n        FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\\n        FxaaFloat spanLengthRcp = 1.0/spanLength;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaBool directionN = dstN < dstP;\\n        FxaaFloat dst = min(dstN, dstP);\\n        FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\\n        FxaaFloat subpixG = subpixF * subpixF;\\n        FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\\n        FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\\n    /*--------------------------------------------------------------------------*/\\n        FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\\n        FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\\n        if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\\n        if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\\n        #if (FXAA_DISCARD == 1)\\n            return FxaaTexTop(tex, posM);\\n        #else\\n            return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\\n        #endif\\n    }\\n    /*==========================================================================*/\\n    #endif\\n\\n    void main() {\\n      gl_FragColor = FxaaPixelShader(\\n        vUv,\\n        vec4(0.0),\\n        tDiffuse,\\n        tDiffuse,\\n        tDiffuse,\\n        resolution,\\n        vec4(0.0),\\n        vec4(0.0),\\n        vec4(0.0),\\n        0.75,\\n        0.166,\\n        0.0833,\\n        0.0,\\n        0.0,\\n        0.0,\\n        vec4(0.0)\\n      );\\n\\n      // TODO avoid querying texture twice for same texel\\n      gl_FragColor.a = texture2D(tDiffuse, vUv).a;\\n    }\\n  '\n\n};\n\nexports.default = FXAAShader;\n\n/***/ }),\n\n/***/ \"8yMH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function () {\n  'use strict';\n\n  // This module hashes the elements in an array and returns a FastMap of the hashes\n\n  // var hasha = require('hasha')\n\n  var FastMap = __webpack_require__(\"TeES\");\n\n  var hashAlgorithm;\n  var hashlist;\n  var fastMap;\n\n  /**\n   * Initialize the HashArray construtor\n   *\n   * @param {string} hA The hash function to be used\n   * @param {boolean} hL True if the array contains hashes, and false if\n   *                      and false by default (just a regular array)\n   *\n   */\n  function HashArray() {\n    var hA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'sha256';\n    var hL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    hashAlgorithm = hA;\n    hashlist = hL;\n  }\n\n  /**\n   * Hashes each of the elements in an array\n   *\n   * @param {array} array The array containing all the elements to hash\n   * @param {callback} cb The callback containing the populated fastMap\n   *\n   */\n  HashArray.prototype.hashElements = function hashElements(array, cb) {\n    fastMap = new FastMap();\n\n    // If the array should be treated as a list of hashes\n    if (hashlist) {\n      // Iterate over each of the elements and add them to the fastMap\n      for (var index = 0; index < array.length; index++) {\n        var value = array[index];\n        fastMap.add(value, index);\n      }\n    } else {\n      // for (let index = 0; index < array.length; index++) {\n      //   const value = array[index]\n      //   fastMap.add(hasha(value, {algorithm: hashAlgorithm}), index)\n      // }\n    }\n\n    return fastMap;\n  };\n\n  module.exports = HashArray;\n})();\n\n/***/ }),\n\n/***/ \"9GTs\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(\"Zx67\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(\"zwoO\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(\"Pf15\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _PointsMaterial = __webpack_require__(\"1084\");\n\nvar _PointsMaterial2 = _interopRequireDefault(_PointsMaterial);\n\nvar _PointsMaterial3 = __webpack_require__(\"2nw3\");\n\nvar _PointsMaterial4 = _interopRequireDefault(_PointsMaterial3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PointsMaterial = function (_THREE$PointsMaterial) {\n  (0, _inherits3.default)(PointsMaterial, _THREE$PointsMaterial);\n\n  function PointsMaterial(cfg) {\n    (0, _classCallCheck3.default)(this, PointsMaterial);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (PointsMaterial.__proto__ || (0, _getPrototypeOf2.default)(PointsMaterial)).call(this, cfg));\n\n    _this.type = 'ShaderMaterial';\n\n    _this.uniforms = THREE.ShaderLib.points.uniforms;\n\n    _this.uniforms.uTime = {\n      type: 'f',\n      value: 0.0\n    };\n\n    _this.uniforms.uColor = {\n      type: 't'\n    };\n\n    _this.uniforms.pointCount = {\n      type: 'f'\n    };\n\n    _this.vertexShader = _PointsMaterial2.default;\n    _this.fragmentShader = _PointsMaterial4.default;\n    return _this;\n  }\n\n  return PointsMaterial;\n}(THREE.PointsMaterial);\n\nexports.default = PointsMaterial;\n\n/***/ }),\n\n/***/ \"Adlg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _GenerateBlockGeometry = __webpack_require__(\"uInQ\");\n\nvar _GenerateBlockGeometry2 = _interopRequireDefault(_GenerateBlockGeometry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nmodule.exports = function (self) {\n\n  self.addEventListener('message', function (e) {\n    var data = e.data;\n    switch (data.cmd) {\n      case 'build':\n        var block = data.block;\n\n        var feeToInputRatio = 0;\n        if (block.fee && block.input) {\n          feeToInputRatio = block.fee / block.input;\n        }\n        block.feeToInputRatio = feeToInputRatio;\n\n        var geoData = (0, _GenerateBlockGeometry2.default)(block, true);\n        console.log('Result IS:', geoData.size);\n        var returnData = {\n          // vertices: geoData.treeVertices,\n          vertices: geoData.treeGeo.attributes.position.array,\n          size: geoData.size,\n          boxCenter: geoData.boxCenter,\n          offset: geoData.offset,\n          block: block,\n          endPoints: new Float32Array(geoData.endPoints)\n        };\n\n        self.postMessage(returnData);\n        break;\n      case 'stop':\n        self.postMessage('WORKER STOPPED');\n        self.close();\n        break;\n      default:\n        self.postMessage('Unknown command');\n    }\n\n    self.postMessage(e.data);\n  }, false);\n};\n\n// Geometry\n\n/***/ }),\n\n/***/ \"AjHq\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnrealBloomPass = exports.RenderPass = exports.Pass = exports.ShaderPass = exports.EffectComposer = undefined;\n\nvar _create = __webpack_require__(\"OvRC\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _assign = __webpack_require__(\"woOf\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _CopyShader = __webpack_require__(\"eyF1\");\n\nvar _CopyShader2 = _interopRequireDefault(_CopyShader);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\n/**\r\n* @author alteredq / http://alteredqualia.com/\r\n*/\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBAFormat,\n      stencilBuffer: false\n    };\n\n    var size = renderer.getDrawingBufferSize();\n    renderTarget = new THREE.WebGLRenderTarget(size.width, size.height, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n\n  this.passes = [];\n\n  // dependencies\n\n  if (_CopyShader2.default === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.CopyShader');\n  }\n\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass');\n  }\n\n  this.copyPass = new ShaderPass(_CopyShader2.default);\n};\n\n(0, _assign2.default)(EffectComposer.prototype, {\n\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n\n    var size = this.renderer.getDrawingBufferSize();\n    pass.setSize(size.width, size.height);\n  },\n\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n\n  render: function render(delta) {\n    var maskActive = false;\n\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n\n      if (pass.enabled === false) continue;\n\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.context;\n\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);\n\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (THREE.MaskPass !== undefined) {\n        if (pass instanceof THREE.MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof THREE.ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n  },\n\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getDrawingBufferSize();\n\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(size.width, size.height);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n\n  setSize: function setSize(width, height) {\n    this.renderTarget1.setSize(width, height);\n    this.renderTarget2.setSize(width, height);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(width, height);\n    }\n  }\n\n});\n\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen\n  this.renderToScreen = false;\n};\n\n(0, _assign2.default)(Pass.prototype, {\n\n  setSize: function setSize(width, height) {},\n\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    console.error('Pass: .render() must be implemented in derived pass.');\n  }\n\n});\n\nvar ShaderPass = function ShaderPass(shader, textureID) {\n  Pass.call(this);\n\n  this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n\n  if (shader instanceof THREE.ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n    this.material = new THREE.ShaderMaterial({\n\n      defines: shader.defines || {},\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n\n    });\n  }\n\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n  this.scene.add(this.quad);\n};\n\nShaderPass.prototype = (0, _assign2.default)((0, _create2.default)(Pass.prototype), {\n\n  constructor: ShaderPass,\n\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.render(this.scene, this.camera, writeBuffer, this.clear);\n    }\n  }\n\n});\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nvar RenderPass = function RenderPass(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n  Pass.call(this);\n\n  this.scene = scene;\n  this.camera = camera;\n\n  this.overrideMaterial = overrideMaterial;\n\n  this.clearColor = clearColor;\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n\n  this.clear = true;\n  this.clearDepth = false;\n  this.needsSwap = false;\n};\n\nRenderPass.prototype = (0, _assign2.default)((0, _create2.default)(Pass.prototype), {\n\n  constructor: RenderPass,\n\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n\n    this.scene.overrideMaterial = this.overrideMaterial;\n\n    var oldClearColor, oldClearAlpha;\n\n    if (this.clearColor) {\n      oldClearColor = renderer.getClearColor().getHex();\n      oldClearAlpha = renderer.getClearAlpha();\n\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n\n    renderer.render(this.scene, this.camera, this.renderToScreen ? null : readBuffer, this.clear);\n\n    if (this.clearColor) {\n      renderer.setClearColor(oldClearColor, oldClearAlpha);\n    }\n\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = oldAutoClear;\n  }\n\n});\n\n/**\r\n * @author bhouston / http://clara.io/\r\n *\r\n * Luminosity\r\n * http://en.wikipedia.org/wiki/Luminosity\r\n */\n\nvar LuminosityHighPassShader = {\n\n  shaderID: 'luminosityHighPass',\n\n  uniforms: {\n\n    'tDiffuse': { type: 't', value: null },\n    'luminosityThreshold': { type: 'f', value: 1.0 },\n    'smoothWidth': { type: 'f', value: 1.0 },\n    'defaultColor': { type: 'c', value: new THREE.Color(0x000000) },\n    'defaultOpacity': { type: 'f', value: 0.0 }\n\n  },\n\n  vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 defaultColor;', 'uniform float defaultOpacity;', 'uniform float luminosityThreshold;', 'uniform float smoothWidth;', 'varying vec2 vUv;', 'void main() {', 'vec4 texel = texture2D( tDiffuse, vUv );', 'vec3 luma = vec3( 0.299, 0.587, 0.114 );', 'float v = dot( texel.xyz, luma );', 'vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );', 'float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );', 'gl_FragColor = mix( outputColor, texel, alpha );', '}'].join('\\n')\n\n  /**\r\n   * @author spidersharma / http://eduperiment.com/\r\n   *\r\n   * Inspired from Unreal Engine\r\n   * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\r\n   */\n};var UnrealBloomPass = function UnrealBloomPass(resolution, strength, radius, threshold) {\n  Pass.call(this);\n\n  this.strength = strength !== undefined ? strength : 1;\n  this.radius = radius;\n  this.threshold = threshold;\n  this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);\n\n  // render targets\n  var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n  this.renderTargetsHorizontal = [];\n  this.renderTargetsVertical = [];\n  this.nMips = 5;\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n  this.renderTargetBright.texture.generateMipmaps = false;\n\n  for (var i = 0; i < this.nMips; i++) {\n    var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars);\n\n    renderTarget.texture.name = 'UnrealBloomPass.h' + i;\n    renderTarget.texture.generateMipmaps = false;\n\n    this.renderTargetsHorizontal.push(renderTarget);\n\n    var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars);\n\n    renderTarget.texture.name = 'UnrealBloomPass.v' + i;\n    renderTarget.texture.generateMipmaps = false;\n\n    this.renderTargetsVertical.push(renderTarget);\n\n    resx = Math.round(resx / 2);\n\n    resy = Math.round(resy / 2);\n  }\n\n  // luminosity high pass material\n\n  if (LuminosityHighPassShader === undefined) {\n    console.error('UnrealBloomPass relies on LuminosityHighPassShader');\n  }\n\n  var highPassShader = LuminosityHighPassShader;\n  this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);\n\n  this.highPassUniforms['luminosityThreshold'].value = threshold;\n  this.highPassUniforms['smoothWidth'].value = 0.01;\n\n  this.materialHighPassFilter = new THREE.ShaderMaterial({\n    uniforms: this.highPassUniforms,\n    vertexShader: highPassShader.vertexShader,\n    fragmentShader: highPassShader.fragmentShader,\n    defines: {}\n  });\n\n  // Gaussian Blur Materials\n  this.separableBlurMaterials = [];\n  var kernelSizeArray = [3, 5, 7, 9, 11];\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  for (var i = 0; i < this.nMips; i++) {\n    this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n\n    this.separableBlurMaterials[i].uniforms['texSize'].value = new THREE.Vector2(resx, resy);\n\n    resx = Math.round(resx / 2);\n\n    resy = Math.round(resy / 2);\n  }\n\n  // Composite material\n  this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n  this.compositeMaterial.uniforms['blurTexture1'].value = this.renderTargetsVertical[0].texture;\n  this.compositeMaterial.uniforms['blurTexture2'].value = this.renderTargetsVertical[1].texture;\n  this.compositeMaterial.uniforms['blurTexture3'].value = this.renderTargetsVertical[2].texture;\n  this.compositeMaterial.uniforms['blurTexture4'].value = this.renderTargetsVertical[3].texture;\n  this.compositeMaterial.uniforms['blurTexture5'].value = this.renderTargetsVertical[4].texture;\n  this.compositeMaterial.uniforms['bloomStrength'].value = strength;\n  this.compositeMaterial.uniforms['bloomRadius'].value = 0.1;\n  this.compositeMaterial.needsUpdate = true;\n\n  var bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n  this.compositeMaterial.uniforms['bloomFactors'].value = bloomFactors;\n  this.bloomTintColors = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];\n  this.compositeMaterial.uniforms['bloomTintColors'].value = this.bloomTintColors;\n\n  // copy material\n  if (_CopyShader2.default === undefined) {\n    console.error('THREE.BloomPass relies on THREE.CopyShader');\n  }\n\n  var copyShader = _CopyShader2.default;\n\n  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms['opacity'].value = 1.0;\n\n  this.materialCopy = new THREE.ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: THREE.AdditiveBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n\n  this.enabled = true;\n  this.needsSwap = false;\n\n  this.oldClearColor = new THREE.Color();\n  this.oldClearAlpha = 1;\n\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n\n  this.basic = new THREE.MeshBasicMaterial();\n\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n  this.scene.add(this.quad);\n};\n\nUnrealBloomPass.prototype = (0, _assign2.default)((0, _create2.default)(Pass.prototype), {\n\n  constructor: UnrealBloomPass,\n\n  dispose: function dispose() {\n    for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n\n    for (var i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n\n    this.renderTargetBright.dispose();\n  },\n\n  setSize: function setSize(width, height) {\n    var resx = Math.round(width / 2);\n    var resy = Math.round(height / 2);\n\n    this.renderTargetBright.setSize(resx, resy);\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n\n      this.separableBlurMaterials[i].uniforms['texSize'].value = new THREE.Vector2(resx, resy);\n\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  },\n\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    this.oldClearColor.copy(renderer.getClearColor());\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n\n    renderer.setClearColor(new THREE.Color(0, 0, 0), 0);\n\n    if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST);\n\n    // Render input to screen\n\n    if (this.renderToScreen) {\n      this.quad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n\n      renderer.render(this.scene, this.camera, undefined, true);\n    }\n\n    // 1. Extract Bright Areas\n\n    this.highPassUniforms['tDiffuse'].value = readBuffer.texture;\n    this.highPassUniforms['luminosityThreshold'].value = this.threshold;\n    this.quad.material = this.materialHighPassFilter;\n\n    renderer.render(this.scene, this.camera, this.renderTargetBright, true);\n\n    // 2. Blur All the mips progressively\n\n    var inputRenderTarget = this.renderTargetBright;\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.quad.material = this.separableBlurMaterials[i];\n\n      this.separableBlurMaterials[i].uniforms['colorTexture'].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms['direction'].value = UnrealBloomPass.BlurDirectionX;\n      renderer.render(this.scene, this.camera, this.renderTargetsHorizontal[i], true);\n\n      this.separableBlurMaterials[i].uniforms['colorTexture'].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms['direction'].value = UnrealBloomPass.BlurDirectionY;\n      renderer.render(this.scene, this.camera, this.renderTargetsVertical[i], true);\n\n      inputRenderTarget = this.renderTargetsVertical[i];\n    }\n\n    // Composite All the mips\n\n    this.quad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms['bloomStrength'].value = this.strength;\n    this.compositeMaterial.uniforms['bloomRadius'].value = this.radius;\n    this.compositeMaterial.uniforms['bloomTintColors'].value = this.bloomTintColors;\n\n    renderer.render(this.scene, this.camera, this.renderTargetsHorizontal[0], true);\n\n    // Blend it additively over the input texture\n\n    this.quad.material = this.materialCopy;\n    this.copyUniforms['tDiffuse'].value = this.renderTargetsHorizontal[0].texture;\n\n    if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);\n\n    if (this.renderToScreen) {\n      renderer.render(this.scene, this.camera, undefined, false);\n    } else {\n      renderer.render(this.scene, this.camera, readBuffer, false);\n    }\n\n    // Restore renderer settings\n\n    renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n\n  getSeperableBlurMaterial: function getSeperableBlurMaterial(kernelRadius) {\n    return new THREE.ShaderMaterial({\n\n      defines: {\n        'KERNEL_RADIUS': kernelRadius,\n        'SIGMA': kernelRadius\n      },\n\n      uniforms: {\n        'colorTexture': { value: null },\n        'texSize': { value: new THREE.Vector2(0.5, 0.5) },\n        'direction': { value: new THREE.Vector2(0.5, 0.5) }\n      },\n\n      vertexShader: 'varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}',\n\n      fragmentShader: '#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\n\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat x = float(i);\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\r\n\t\t\t\t}'\n    });\n  },\n\n  getCompositeMaterial: function getCompositeMaterial(nMips) {\n    return new THREE.ShaderMaterial({\n\n      defines: {\n        'NUM_MIPS': nMips\n      },\n\n      uniforms: {\n        'blurTexture1': { value: null },\n        'blurTexture2': { value: null },\n        'blurTexture3': { value: null },\n        'blurTexture4': { value: null },\n        'blurTexture5': { value: null },\n        'dirtTexture': { value: null },\n        'bloomStrength': { value: 1.0 },\n        'bloomFactors': { value: null },\n        'bloomTintColors': { value: null },\n        'bloomRadius': { value: 0.0 }\n      },\n\n      vertexShader: 'varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}',\n\n      fragmentShader: 'varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D blurTexture1;\\\r\n\t\t\t\tuniform sampler2D blurTexture2;\\\r\n\t\t\t\tuniform sampler2D blurTexture3;\\\r\n\t\t\t\tuniform sampler2D blurTexture4;\\\r\n\t\t\t\tuniform sampler2D blurTexture5;\\\r\n\t\t\t\tuniform sampler2D dirtTexture;\\\r\n\t\t\t\tuniform float bloomStrength;\\\r\n\t\t\t\tuniform float bloomRadius;\\\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\r\n\t\t\t\t}\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\r\n\t\t\t\t}'\n    });\n  }\n\n});\n\nUnrealBloomPass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nUnrealBloomPass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\nexports.EffectComposer = EffectComposer;\nexports.ShaderPass = ShaderPass;\nexports.Pass = Pass;\nexports.RenderPass = RenderPass;\nexports.UnrealBloomPass = UnrealBloomPass;\n\n/***/ }),\n\n/***/ \"F/9K\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BrightnessContrast = {\n  uniforms: {\n    'tDiffuse': { value: null },\n    'brightness': { value: 0.0 },\n    'contrast': { value: 0.25 }\n  },\n\n  vertexShader: '\\n    varying vec2 vUv;\\n    void main() {\\n\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n    }\\n  ',\n\n  fragmentShader: '\\n\\n    uniform sampler2D tDiffuse;\\n    uniform float brightness;\\n    uniform float contrast;\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n      gl_FragColor = texture2D( tDiffuse, vUv );\\n\\n      gl_FragColor.rgb += brightness;\\n\\n      if (contrast > 0.0) {\\n        gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\\n      } else {\\n        gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\\n      }\\n\\n    }\\n\\n  '\n\n};\n\nexports.default = BrightnessContrast;\n\n/***/ }),\n\n/***/ \"Gqez\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Film = {\n\n    uniforms: {\n\n        tDiffuse: { value: null },\n        time: { value: 0.0 },\n        nIntensity: { value: 0.05 },\n        sIntensity: { value: 0.0 },\n        sCount: { value: 0 },\n        grayscale: { value: 0 }\n\n    },\n\n    vertexShader: \"\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n    }\\n\\n  \",\n\n    fragmentShader: \"\\n\\n    #include <common>\\n\\n    // control parameter\\n    uniform float time;\\n\\n    uniform bool grayscale;\\n\\n    // noise effect intensity value (0 = no effect, 1 = full effect)\\n    uniform float nIntensity;\\n\\n    // scanlines effect intensity value (0 = no effect, 1 = full effect)\\n    uniform float sIntensity;\\n\\n    // scanlines effect count value (0 = no effect, 4096 = full effect)\\n    uniform float sCount;\\n\\n    uniform sampler2D tDiffuse;\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n      // sample the source\\n      vec4 cTextureScreen = texture2D( tDiffuse, vUv );\\n\\n      // make some noise\\n      float dx = rand( vUv + time );\\n\\n      // add noise\\n      vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\\n\\n      // get us a sine and cosine\\n      vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\\n\\n      // add scanlines\\n      cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\\n\\n      // interpolate between source and result by intensity\\n      cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\\n\\n      // convert to grayscale if desired\\n      if( grayscale ) {\\n\\n        cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\\n\\n      }\\n\\n      gl_FragColor =  vec4( cResult, cTextureScreen.a );\\n\\n    }\\n\\n  \"\n\n};\n\nexports.default = Film;\n\n/***/ }),\n\n/***/ \"GuZB\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _maxSafeInteger = __webpack_require__(\"hiCB\");\n\nvar _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);\n\nvar _promise = __webpack_require__(\"//Fk\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(\"wxAW\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _Config = __webpack_require__(\"6bm0\");\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nvar _tone = __webpack_require__(\"ZnLv\");\n\nvar _tone2 = _interopRequireDefault(_tone);\n\nvar _lodash = __webpack_require__(\"M4fF\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _math = __webpack_require__(\"VvTn\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Audio = function () {\n  function Audio(camera, path) {\n    (0, _classCallCheck3.default)(this, Audio);\n\n    this.samplerLoaded = false;\n    this.camera = camera;\n    this.loops = [];\n    this.quantize = 32;\n    this.masterVol = -18; // db\n    this.ambienceVol = -10; // db\n    this.path = path;\n    this.ambiencePath = path + 'sounds/ambience/mining.mp3';\n    this.bpm = 50;\n    this.notes = {\n      55.000: 'A1',\n      58.270: 'A#1',\n      61.735: 'B1',\n      65.406: 'C1',\n      69.296: 'C#1',\n      73.416: 'D1',\n      77.782: 'D#1',\n      82.407: 'E1',\n      87.307: 'F1',\n      92.499: 'F#1',\n      97.999: 'G1',\n      103.826: 'G#1',\n      110.000: 'A2',\n      116.541: 'A#2',\n      123.471: 'B2',\n      130.813: 'C2',\n      138.591: 'C#2',\n      146.832: 'D2',\n      155.563: 'D#2',\n      164.814: 'E2',\n      174.614: 'F2',\n      184.997: 'F#2',\n      195.998: 'G2',\n      207.652: 'G#2',\n      220.000: 'A3',\n      233.082: 'A#3',\n      246.942: 'B3',\n      261.626: 'C3',\n      277.183: 'C#3',\n      293.665: 'D3',\n      311.127: 'D#3',\n      329.628: 'E3',\n      349.228: 'F3',\n      369.994: 'F#3',\n      391.995: 'G3',\n      415.305: 'G#3',\n      440.000: 'A4',\n      466.164: 'A#4',\n      493.883: 'B4',\n      523.251: 'C4'\n    };\n\n    this.pointColors = [];\n\n    this.modes = {\n      'ionian': ['C', 'D', 'E', 'F', 'G', 'A', 'B', 'C'],\n      'dorian': ['C', 'D', 'D#', 'F', 'G', 'A', 'A#', 'C'],\n      'phrygian': ['C', 'C#', 'D#', 'F', 'G', 'G#', 'A#', 'C'],\n      'lydian': ['C', 'D', 'E', 'F#', 'G', 'A', 'B', 'C'],\n      'mixolydian': ['C', 'D', 'E', 'F', 'G', 'A', 'A#', 'C'],\n      'aeolian': ['C', 'D', 'D#', 'F', 'G', 'G#', 'A#', 'C'],\n      'locrian': ['C', 'C#', 'D#', 'F', 'F#', 'G#', 'A#', 'C']\n    };\n\n    this.audioLoader = new THREE.AudioLoader();\n  }\n\n  (0, _createClass3.default)(Audio, [{\n    key: 'loadAmbience',\n    value: function loadAmbience() {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this.ambienceFilter = new _tone2.default.Filter({\n          type: 'lowpass',\n          Q: 5\n        }).chain(_this.ambienceBus);\n\n        _this.ambiencePlayer = new _tone2.default.Player({\n          'url': _this.ambiencePath,\n          'loop': true,\n          onload: function onload() {\n            resolve();\n          }\n          // }).chain(this.ambienceFilter)\n        }).chain(_this.ambienceBus);\n\n        _this.ambienceBus.volume.linearRampToValueAtTime(_this.ambienceVol, 20);\n      });\n    }\n  }, {\n    key: 'setAmbienceFilterCutoff',\n    value: function setAmbienceFilterCutoff(value) {\n      // this.ambienceFilter.frequency.linearRampToValueAtTime(value, Tone.Transport.seconds + 5)\n    }\n  }, {\n    key: 'unloadSound',\n    value: function unloadSound() {\n      if (this.loops.length) {\n        for (var index = 0; index < this.loops.length; index++) {\n          var loop = this.loops[index];\n          loop.cancel();\n          loop.dispose();\n        }\n        this.loops = [];\n      }\n    }\n  }, {\n    key: 'preloadNotes',\n    value: function preloadNotes() {\n      var _this2 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var loadCount = 0;\n        var self = _this2;\n        resolve();\n        /* _.forIn(this.notes, (note, key) => {\r\n          this.audioLoader.load(\r\n            // resource URL\r\n            path + 'sounds/kalimba/' + note.replace('#', 'S') + '.mp3',\r\n            // Function when resource is loaded\r\n            function (audioBuffer) {\r\n              loadCount++\r\n              if (loadCount === Object.keys(self.notes).length) {\r\n                resolve()\r\n              }\r\n            }\r\n          )\r\n        }) */\n      });\n    }\n  }, {\n    key: 'preloadAmbience',\n    value: function preloadAmbience() {\n      return new _promise2.default(function (resolve, reject) {\n        resolve();\n        /* this.audioLoader.load(\r\n           this.ambiencePath,\r\n           function (audioBuffer) {\r\n             resolve()\r\n           }\r\n         ) */\n      });\n    }\n  }, {\n    key: 'preload',\n    value: function preload() {\n      var _this3 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this3.preloadNotes().then(function () {\n          _this3.preloadAmbience().then(function () {\n            console.log('sound loaded');\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      var _this4 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this4.masterBus = new _tone2.default.Volume(_this4.masterVol).toMaster();\n        _this4.ambienceBus = new _tone2.default.Volume(-96).toMaster();\n\n        /* this.convolver = new Tone.Convolver(path + 'sounds/IR/r1_ortf.wav')\r\n        this.convolver.set('wet', 1.0) */\n\n        // this.pingPong = new Tone.PingPongDelay('16n', 0.85)\n\n        _tone2.default.Transport.bpm.value = _this4.bpm;\n\n        /* Tone.Listener.setPosition(this.camera.position.x, this.camera.position.y, this.camera.position.z)\r\n          document.addEventListener('cameraMove', function () {\r\n          Tone.Listener.setPosition(this.camera.position.x, this.camera.position.y, this.camera.position.z)\r\n        }.bind(this), false) */\n\n        /* let cameraForwardVector = new THREE.Vector3()\r\n        let quaternion = new THREE.Quaternion()\r\n        cameraForwardVector.set(0, 0, -1).applyQuaternion(quaternion)\r\n          Tone.Listener.setOrientation(cameraForwardVector.x, cameraForwardVector.y, cameraForwardVector.z, this.camera.up.x, this.camera.up.y, this.camera.up.z) */\n\n        // this.preload().then(() => {\n        _this4.loadAmbience().then(function () {\n          _this4.ambiencePlayer.start();\n          _tone2.default.Transport.start();\n          resolve();\n        });\n        // })\n      });\n    }\n  }, {\n    key: 'loadSampler',\n    value: function loadSampler() {\n      this.sampler = new _tone2.default.Sampler({\n        'A1': this.path + 'sounds/kalimba/A1.mp3',\n        'A#1': this.path + 'sounds/kalimba/AS1.mp3',\n        'B1': this.path + 'sounds/kalimba/B1.mp3',\n        'C1': this.path + 'sounds/kalimba/C1.mp3',\n        'C#1': this.path + 'sounds/kalimba/CS1.mp3',\n        'D1': this.path + 'sounds/kalimba/D1.mp3',\n        'D#1': this.path + 'sounds/kalimba/DS1.mp3',\n        'E1': this.path + 'sounds/kalimba/E1.mp3',\n        'F1': this.path + 'sounds/kalimba/F1.mp3',\n        'F#1': this.path + 'sounds/kalimba/FS1.mp3',\n        'G1': this.path + 'sounds/kalimba/G1.mp3',\n        'G#1': this.path + 'sounds/kalimba/GS1.mp3',\n        'A2': this.path + 'sounds/kalimba/A2.mp3',\n        'A#2': this.path + 'sounds/kalimba/AS2.mp3',\n        'B2': this.path + 'sounds/kalimba/B2.mp3',\n        'C2': this.path + 'sounds/kalimba/C2.mp3',\n        'C#2': this.path + 'sounds/kalimba/CS2.mp3',\n        'D2': this.path + 'sounds/kalimba/D2.mp3',\n        'D#2': this.path + 'sounds/kalimba/DS2.mp3',\n        'E2': this.path + 'sounds/kalimba/E2.mp3',\n        'F2': this.path + 'sounds/kalimba/F2.mp3',\n        'F#2': this.path + 'sounds/kalimba/FS2.mp3',\n        'G2': this.path + 'sounds/kalimba/G2.mp3',\n        'G#2': this.path + 'sounds/kalimba/GS2.mp3',\n        'A3': this.path + 'sounds/kalimba/A3.mp3',\n        'A#3': this.path + 'sounds/kalimba/AS3.mp3',\n        'B3': this.path + 'sounds/kalimba/B3.mp3',\n        'C3': this.path + 'sounds/kalimba/C3.mp3',\n        'C#3': this.path + 'sounds/kalimba/CS3.mp3',\n        'D3': this.path + 'sounds/kalimba/D3.mp3',\n        'D#3': this.path + 'sounds/kalimba/DS3.mp3',\n        'E3': this.path + 'sounds/kalimba/E3.mp3',\n        'F3': this.path + 'sounds/kalimba/F3.mp3',\n        'F#3': this.path + 'sounds/kalimba/FS3.mp3',\n        'G3': this.path + 'sounds/kalimba/G3.mp3',\n        'G#3': this.path + 'sounds/kalimba/GS3.mp3'\n        /*    'A4': this.path + 'sounds/kalimba/A4.mp3',\r\n            'A#4': this.path + 'sounds/kalimba/AS4.mp3',\r\n            'B4': this.path + 'sounds/kalimba/B4.mp3',\r\n            'C4': this.path + 'sounds/kalimba/C4.mp3' */\n      }).chain(this.masterBus);\n    }\n  }, {\n    key: 'generateMerkleSound',\n    value: function generateMerkleSound(positionsArray, blockObjectPosition, block, pointsMaterial, pointsMesh) {\n      var _this5 = this;\n\n      if (!this.samplerLoaded) {\n        this.loadSampler();\n      }\n\n      this.samplerLoaded = true;\n\n      this.loopMap = [];\n\n      this.black = new THREE.Color(0x000000);\n      this.white = new THREE.Color(0xffffff);\n\n      this.pointsMaterial = pointsMaterial;\n\n      var minTime = _maxSafeInteger2.default;\n      var maxTime = 0;\n\n      for (var index = 0; index < block.transactions.length; index++) {\n        var transaction = block.transactions[index];\n        minTime = Math.min(transaction.time, minTime);\n        maxTime = Math.max(transaction.time, maxTime);\n      }\n\n      block.transactions.sort(function (a, b) {\n        return a.time > b.time;\n      });\n\n      this.pointColors = [];\n      for (var _index = 0; _index < positionsArray.length * 3; _index++) {\n        this.pointColors.push(0);\n      }\n\n      var _loop = function _loop(_index2) {\n        var point = positionsArray[_index2];\n\n        /**\r\n         * Map transaction time to new range\r\n         */\n        if (typeof block.transactions[_index2] !== 'undefined') {\n          var _transaction = block.transactions[_index2];\n          var time = (0, _math.map)(_transaction.time, minTime, maxTime, 0, 30) + 1.0;\n\n          // noteCount++\n\n          // get closest note\n          var minDiff = _maxSafeInteger2.default;\n          var note = 'C1';\n\n          var mode = _this5.modes.aeolian;\n          for (frequency in _this5.notes) {\n            if (_this5.notes.hasOwnProperty(frequency)) {\n              var noteName = _this5.notes[frequency].replace(/[0-9]/g, '');\n              if (mode.indexOf(noteName) !== -1) {\n                // filter out notes not in mode\n                var diff = Math.abs(point * 2.0 - frequency);\n                if (diff < minDiff) {\n                  minDiff = diff;\n                  note = _this5.notes[frequency];\n                }\n              }\n            }\n          }\n\n          var that = _this5;\n          var loop = void 0;\n\n          var timeLowRes = time.toFixed(1);\n\n          if (typeof _this5.loopMap[timeLowRes] === 'undefined') {\n            loop = new _tone2.default.Loop(function () {\n              _this5.sampler.triggerAttack(note, '@' + that.quantize + 'n', 1.0);\n              _this5.pointColors[_index2 * 3] = 255;\n              setTimeout(function () {\n                _this5.pointColors[_index2 * 3] = 0;\n              }, 500);\n            }, '1m').start(_tone2.default.Transport.seconds + time);\n          } else {\n            loop = new _tone2.default.Loop(function () {\n              _this5.pointColors[_index2 * 3] = 255;\n              setTimeout(function () {\n                _this5.pointColors[_index2 * 3] = 0;\n              }, 500);\n            }, '1m').start(_tone2.default.Transport.seconds + time);\n          }\n          loop.humanize = '64n';\n          _this5.loops.push(loop);\n          _this5.loopMap[timeLowRes] = true;\n        }\n      };\n\n      for (var _index2 = 0; _index2 < positionsArray.length; _index2++) {\n        var frequency;\n\n        _loop(_index2);\n      }\n    }\n  }]);\n  return Audio;\n}();\n\nexports.default = Audio;\n\n/***/ }),\n\n/***/ \"MTSG\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(\"Zx67\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(\"zwoO\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(\"Pf15\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _BlockMaterial2 = __webpack_require__(\"1ome\");\n\nvar _BlockMaterial3 = _interopRequireDefault(_BlockMaterial2);\n\nvar _MerkleMaterial = __webpack_require__(\"k78l\");\n\nvar _MerkleMaterial2 = _interopRequireDefault(_MerkleMaterial);\n\nvar _MerkleMaterial3 = __webpack_require__(\"TbVk\");\n\nvar _MerkleMaterial4 = _interopRequireDefault(_MerkleMaterial3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MerkleMaterial = function (_BlockMaterial) {\n  (0, _inherits3.default)(MerkleMaterial, _BlockMaterial);\n\n  function MerkleMaterial(cfg) {\n    (0, _classCallCheck3.default)(this, MerkleMaterial);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MerkleMaterial.__proto__ || (0, _getPrototypeOf2.default)(MerkleMaterial)).call(this, cfg));\n\n    _this.type = 'ShaderMaterial';\n\n    _this.uniforms = THREE.ShaderLib.standard.uniforms;\n\n    _this.uniforms.uTime = {\n      type: 'f'\n      //  value: 0.0\n    };\n\n    _this.uniforms.uAnimTime = {\n      type: 'f'\n      //   value: 0.0\n    };\n\n    _this.vertexShader = _MerkleMaterial2.default;\n    _this.fragmentShader = _MerkleMaterial2.default;\n    return _this;\n  }\n\n  return MerkleMaterial;\n}(_BlockMaterial3.default);\n\nexports.default = MerkleMaterial;\n\n/***/ }),\n\n/***/ \"Mclq\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _GenerateBlockGeometry = __webpack_require__(\"uInQ\");\n\nvar _GenerateBlockGeometry2 = _interopRequireDefault(_GenerateBlockGeometry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nmodule.exports = function (self) {\n\n  self.addEventListener('message', function (e) {\n    var data = e.data;\n    switch (data.cmd) {\n      case 'build':\n        var blocks = data.blocks;\n\n        var returnData = {\n          // sizes: [],\n          blockCount: blocks.length,\n          dayIndex: data.dayIndex,\n          blocks: data.blocks,\n          timeStamp: data.timeStamp,\n          focusOnBlock: data.focusOnBlock\n        };\n\n        console.time('blocks');\n        for (var index = 0; index < blocks.length; index++) {\n          var block = blocks[index];\n\n          var feeToInputRatio = 0;\n          if (block.fee && block.input) {\n            feeToInputRatio = block.fee / block.input;\n          }\n          block.feeToInputRatio = feeToInputRatio;\n\n          var _GenerateBlockGeometr = (0, _GenerateBlockGeometry2.default)(block),\n              size = _GenerateBlockGeometr.size;\n          // returnData.sizes.push(blockGeoData.boxDimensions)\n\n          returnData.blocks[index].feeToInputRatio = feeToInputRatio;\n          returnData.blocks[index].size = size;\n        }\n        console.timeEnd('blocks');\n        self.postMessage(returnData);\n        break;\n      case 'stop':\n        self.postMessage('WORKER STOPPED');\n        self.close();\n        break;\n      default:\n        self.postMessage('Unknown command');\n    }\n\n    // self.postMessage(e.data)\n  }, false);\n};\n\n// Geometry\n\n/***/ }),\n\n/***/ \"PPUF\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function () {\n  'use strict';\n\n  /**\n   * genMerkle()\n   *\n   * This generates a Merkle Tree from a FastMap of leaves.\n   *\n   * @param {object} fastMap The FastMap of leaves, passed in from\n   *                          the array hash or the file hash functions.\n   * @param {string} hashalgo The hash algorithm to use\n   * @param {callback} cb The Merkle Tree object\n   *\n   */\n\n  function genMerkle(fastMap, hashalgo, cb) {\n    var Deque = __webpack_require__(\"LjEJ\");\n    var deque1 = new Deque();\n    var deque2 = new Deque();\n    var tree = {};\n\n    var i;\n    var j;\n    var left;\n    var right;\n    var len2;\n    var chash; // the concatenated hashes\n    var nextval;\n\n    var currentlevel = 0;\n    var nl = fastMap.length;\n\n    // tree.root = ''\n    // tree.hashalgo = hashalgo\n    // tree.leaves = nl\n    // tree.levels = ''\n\n    // Push all of the leaves onto the main queue\n    for (i = 0; i < nl; i++) {\n      nextval = fastMap.get(i);\n\n      // Add the leaves to the 'tree' object\n      tree[nextval] = {\n        'type': 'leaf',\n        'level': currentlevel,\n        'left': 'data',\n        'right': 'data',\n        'parent': ''\n      };\n\n      deque1.push(nextval);\n    }\n\n    currentlevel++;\n\n    // While the main queue has more than one value left (the root)\n    while (deque1.length > 1) {\n      // Get the two first-pushed values off of the queue and hash them\n      left = deque1.shift();\n      right = deque1.shift();\n      chash = left + right; // hasha(left + right, {algorithm: hashalgo});\n\n      // Add the hash and nodes to the 'tree' object\n      tree[chash] = {\n        'type': 'node',\n        'level': currentlevel,\n        'left': left,\n        'right': right,\n        'parent': ''\n      };\n\n      tree[right].parent = chash;\n      tree[left].parent = chash;\n\n      // push the result onto a second queue\n      deque2.push(chash);\n\n      // If there are an odd number of leaves (only one hash left),\n      // pop the last value, concatenate it with itself, and hash that\n      if (deque1.length === 1) {\n        right = deque1.pop();\n        chash = left + right; // hasha(right + right, {algorithm: hashalgo});\n\n        // Add the hash and nodes to the 'tree' object\n        tree[chash] = {\n          'type': 'node',\n          'level': currentlevel,\n          'left': right,\n          'right': right,\n          'parent': ''\n        };\n\n        tree[right].parent = chash;\n\n        deque2.push(chash);\n      }\n\n      // If everything is off of the main queue (deque1) but the copy\n      // queue (deque2) is not empty, there is another level in the tree\n      // and more values to hash. Pop them and push them back to the main\n      // queue.\n      if (deque1.length === 0 && deque2.length !== 0) {\n        currentlevel++;\n\n        len2 = deque2.length;\n\n        for (j = 0; j < len2; j++) {\n          deque1.push(deque2.shift());\n        }\n      }\n    }\n\n    // Set the number of levels, the root node value, and the root node type & parent\n    // tree.levels = currentlevel\n    var root = deque1.pop();\n    tree[root].type = 'root';\n    // tree[tree.root].parent = 'root'\n\n    // return tree\n    // cb(tree);\n    return tree;\n  }\n\n  // Export the genMerkle() function\n  module.exports = genMerkle;\n})();\n\n/***/ }),\n\n/***/ \"RzKr\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar HueSaturationShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    hue: { value: 0 },\n    saturation: { value: 0.5 }\n  },\n  vertexShader: \"\\n    varying vec2 vUv;\\n    void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n    }\\n  \",\n  fragmentShader: \"\\n    uniform sampler2D tDiffuse;\\n    uniform float hue;\\n    uniform float saturation;\\n    varying vec2 vUv;\\n    void main() {\\n      gl_FragColor = texture2D( tDiffuse, vUv );\\n\\n        // hue\\n      float angle = hue * 3.14159265;\\n      float s = sin(angle), c = cos(angle);\\n      vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\\n      float len = length(gl_FragColor.rgb);\\n      gl_FragColor.rgb = vec3(\\n      dot(gl_FragColor.rgb, weights.xyz),\\n      dot(gl_FragColor.rgb, weights.zxy),\\n      dot(gl_FragColor.rgb, weights.yzx)\\n      );\\n\\n        // saturation\\n      float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\\n      if (saturation > 0.0) {\\n        gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\\n      } else {\\n        gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\\n      }\\n\\n    }\\n  \"\n};\n\nexports.default = HueSaturationShader;\n\n/***/ }),\n\n/***/ \"TKs2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Vignette shader\r\n * based on PaintEffect postprocess from ro.me\r\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\r\n */\n\nvar Vignette = {\n\n    uniforms: {\n\n        tDiffuse: { value: null },\n        offset: { value: 1.0 },\n        darkness: { value: 1.4 }\n\n    },\n\n    vertexShader: \"\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n    }\\n\\n  \",\n\n    fragmentShader: \"\\n\\n    uniform float offset;\\n    uniform float darkness;\\n\\n    uniform sampler2D tDiffuse;\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n        // Eskils vignette\\n\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\\n    gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\\n\\n        /*\\n        // alternative version from glfx.js\\n        // this one makes more \\\"dusty\\\" look (as opposed to \\\"burned\\\")\\n\\n        \\\"vec4 color = texture2D( tDiffuse, vUv );\\\",\\n        \\\"float dist = distance( vUv, vec2( 0.5 ) );\\\",\\n        \\\"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\\\",\\n        \\\"gl_FragColor = color;\\\",\\n        */\\n\\n    }\\n\\n  \"\n\n};\n\nexports.default = Vignette;\n\n/***/ }),\n\n/***/ \"TbVk\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"#define GLSLIFY 1\\nuniform float uTime;\\nuniform float uAnimTime;\\n\\nvarying float distanceFromCenter;\\n\\n#define PHYSICAL\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\tfloat radius = uAnimTime;\\n\\n\\tdiffuseColor.a *= (1.0 - step(\\n\\t\\tradius + 0.1,\\n        (distanceFromCenter/255.0)\\n\\t));\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\"\n\n/***/ }),\n\n/***/ \"VvTn\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar PI = exports.PI = Math.PI;\nvar PI2 = exports.PI2 = PI * 2;\nvar HALF_PI = exports.HALF_PI = PI * 0.5;\nvar DEG2RAD = exports.DEG2RAD = PI / 180.0;\nvar RAD2DEG = exports.RAD2DEG = 180.0 / PI;\n\n// Be aware GLSL order\nvar step = exports.step = function step(edge, val) {\n  return val < edge ? 0 : 1;\n};\nvar clamp = exports.clamp = function clamp(val, min, max) {\n  return val < min ? min : val > max ? max : val;\n};\nvar mix = exports.mix = function mix(min, max, ratio) {\n  return min + (max - min) * ratio;\n};\nvar cMix = exports.cMix = function cMix(min, max, ratio) {\n  return min + (max - min) * clamp(ratio, 0, 1);\n};\nvar unMix = exports.unMix = function unMix(min, max, val) {\n  return (val - min) / (max - min);\n};\nvar cUnMix = exports.cUnMix = function cUnMix(min, max, val) {\n  return clamp((val - min) / (max - min), 0, 1);\n};\n\n/*\n * Linearly maps n from range [ a, b ] -> [ x, y ]\n */\nvar map = exports.map = function map(n, a, b, x, y) {\n  return x + (n - a) * (y - x) / (b - a);\n};\n\n/*\n * Linearly maps n from range [ a, b ] -> [ 0, 1 ]\n */\nvar normalize = exports.normalize = function normalize(n, a, b) {\n  return map(n, a, b, 0, 1);\n};\n\nvar smoothstep = exports.smoothstep = function smoothstep(edge0, edge1, val) {\n  val = cUnMix(edge0, edge1, val);\n  return val * val * (3 - val * 2);\n};\nvar fract = exports.fract = function fract(val) {\n  return val - Math.floor(val);\n};\nvar hash = exports.hash = function hash(val) {\n  return fract(Math.sin(val) * 43758.5453123);\n};\nvar hash2 = exports.hash2 = function hash2(val1, val2) {\n  return fract(Math.sin(val1 * 12.9898 + val2 * 4.1414) * 43758.5453);\n};\nvar sign = exports.sign = function sign(val) {\n  return val ? val < 0 ? -1 : 1 : 0;\n};\nvar isPowerOfTwo = exports.isPowerOfTwo = function isPowerOfTwo(val) {\n  return (val & -val) === val;\n};\nvar powerTwoCeilingBase = exports.powerTwoCeilingBase = function powerTwoCeilingBase(val) {\n  return Math.ceil(Math.log(val) / Math.log(2));\n};\nvar powerTwoCeiling = exports.powerTwoCeiling = function powerTwoCeiling(val) {\n  if (isPowerOfTwo(val)) return val;\n  return 1 << powerTwoCeilingBase(val);\n};\nvar latLngBearing = exports.latLngBearing = function latLngBearing(lat1, lng1, lat2, lng2) {\n  // lat lng are in rad\n  // http://www.movable-type.co.uk/scripts/latlong.html\n  var y = Math.sin(lng2 - lng1) * Math.cos(lat2);\n  var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lng2 - lng1);\n  return Math.atan2(y, x);\n};\nvar distanceTo = exports.distanceTo = function distanceTo(dX, dY) {\n  return Math.sqrt(dX * dX + dY * dY);\n};\nvar distanceSqrTo = exports.distanceSqrTo = function distanceSqrTo(dX, dY) {\n  return dX * dX + dY * dY;\n};\nvar distanceTo3 = exports.distanceTo3 = function distanceTo3(dX, dY, dZ) {\n  return Math.sqrt(dX * dX + dY * dY + dZ * dZ);\n};\nvar distanceSqrTo3 = exports.distanceSqrTo3 = function distanceSqrTo3(dX, dY, dZ) {\n  return dX * dX + dY * dY + dZ * dZ;\n};\nvar latLngDistance = exports.latLngDistance = function latLngDistance(lat1, lng1, lat2, lng2) {\n  // lat lng are in rad\n  // http://www.movable-type.co.uk/scripts/latlong.html\n  var tLat = Math.sin((lat2 - lat1) / 2);\n  var tLng = Math.sin((lng2 - lng1) / 2);\n  var a = tLat * tLat + Math.cos(lat1) * Math.cos(lat2) * tLng * tLng;\n  return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n};\nvar cubicBezier = exports.cubicBezier = function cubicBezier(p0, p1, p2, p3, t) {\n  var c = (p1 - p0) * 3;\n  var b = (p2 - p1) * 3 - c;\n  var a = p3 - p0 - c - b;\n  var t2 = t * t;\n  var t3 = t2 * t;\n  return a * t3 + b * t2 + c * t + p0;\n};\nvar cubicBezierFn = exports.cubicBezierFn = function cubicBezierFn(p0, p1, p2, p3) {\n  var c = (p1 - p0) * 3;\n  var b = (p2 - p1) * 3 - c;\n  var a = p3 - p0 - c - b;\n  return function (t) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    return a * t3 + b * t2 + c * t + p0;\n  };\n};\n\nvar safeMod = exports.safeMod = function safeMod(val, mod) {\n  var absVal = Math.abs(val);\n  val = val < 0 ? Math.ceil(absVal / mod) * mod - absVal : val;\n  return Math.abs(val % mod);\n};\n\nvar loop = exports.loop = function loop(val, min, max) {\n  return safeMod(val - min, max - min) + min;\n};\n\n/***/ }),\n\n/***/ \"ZlZk\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n * - \"r\" parameter control where \"focused\" horizontal line lies\n */\n\nvar HorizontalTiltShiftShader = {\n\n  uniforms: {\n\n    'tDiffuse': { value: null },\n    'h': { value: 1.0 / 512.0 },\n    'r': { value: 0.35 }\n\n  },\n\n  vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float h;', 'uniform float r;', 'varying vec2 vUv;', 'void main() {', 'vec4 sum = vec4( 0.0 );', 'float hh = h * abs( r - vUv.y );', 'sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;', 'sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;', 'sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;', 'sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;', 'sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;', 'sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;', 'sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;', 'sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;', 'sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;', 'gl_FragColor = sum;', '}'].join('\\n')\n\n};\n\nexports.default = HorizontalTiltShiftShader;\n\n/***/ }),\n\n/***/ \"cNRb\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"#define GLSLIFY 1\\nuniform float uRefractionRatio;\\nuniform float uFresnelBias;\\nuniform float uFresnelScale;\\nuniform float uFresnelPower;\\n\\nvarying vec3 vReflect;\\nvarying vec3 vRefract[3];\\n//varying float vReflectionFactor;\\n\\n#define PHYSICAL\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n\\t// vec3 I = worldPosition.xyz - cameraPosition;\\n\\n\\t//vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\n\\t//vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\\t//vRefract[0] = refract( normalize( I ), worldNormal, uRefractionRatio );\\n\\t//vRefract[1] = refract( normalize( I ), worldNormal, uRefractionRatio * 0.99 );\\n\\t//vRefract[2] = refract( normalize( I ), worldNormal, uRefractionRatio * 0.98 );\\n\\n\\t//vReflectionFactor = uFresnelBias + uFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), uFresnelPower );\\n\\n}\\n\"\n\n/***/ }),\n\n/***/ \"eyF1\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\n\nvar CopyShader = {\n\n    uniforms: {\n\n        'tDiffuse': { value: null },\n        'opacity': { value: 1.0 }\n\n    },\n\n    vertexShader: ['varying vec2 vUv;', 'void main() {', 'vUv = uv;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n\n    fragmentShader: ['uniform float opacity;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', 'vec4 texel = texture2D( tDiffuse, vUv );', 'gl_FragColor = opacity * texel;', '}'].join('\\n')\n\n};\n\nexports.default = CopyShader;\n\n/***/ }),\n\n/***/ \"f82t\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// libs\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = __webpack_require__(\"Dd8w\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _regenerator = __webpack_require__(\"Xxa5\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = __webpack_require__(\"exGp\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _maxSafeInteger = __webpack_require__(\"hiCB\");\n\nvar _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);\n\nvar _from = __webpack_require__(\"c/Tr\");\n\nvar _from2 = _interopRequireDefault(_from);\n\nvar _promise = __webpack_require__(\"//Fk\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = __webpack_require__(\"fZjL\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _map = __webpack_require__(\"ifoU\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getPrototypeOf = __webpack_require__(\"Zx67\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(\"wxAW\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(\"zwoO\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(\"Pf15\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _math = __webpack_require__(\"VvTn\");\n\nvar _moment = __webpack_require__(\"PJh5\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _eventemitter = __webpack_require__(\"BzvE\");\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _lodash = __webpack_require__(\"M4fF\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _Config = __webpack_require__(\"6bm0\");\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nvar _audio = __webpack_require__(\"GuZB\");\n\nvar _audio2 = _interopRequireDefault(_audio);\n\nvar _btc = __webpack_require__(\"wIG/\");\n\nvar _btc2 = _interopRequireDefault(_btc);\n\nvar _BlockMaterial = __webpack_require__(\"1ome\");\n\nvar _BlockMaterial2 = _interopRequireDefault(_BlockMaterial);\n\nvar _PointsMaterial = __webpack_require__(\"9GTs\");\n\nvar _PointsMaterial2 = _interopRequireDefault(_PointsMaterial);\n\nvar _MerkleMaterial = __webpack_require__(\"MTSG\");\n\nvar _MerkleMaterial2 = _interopRequireDefault(_MerkleMaterial);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// API\n\n\n// Global config\nvar dat = __webpack_require__(\"p5jl\");\n\n// Custom Materials\n\n\n// Audio\n\n\nvar work = __webpack_require__(\"8zBs\");\n\nvar DayBuilderWorker = work(/*require.resolve*/(\"Mclq\"));\nvar TreeBuilderWorker = work(/*require.resolve*/(\"Adlg\"));\nvar TWEEN = __webpack_require__(\"pXIW\");\n\nvar MainScene = function (_EventEmitter) {\n  (0, _inherits3.default)(MainScene, _EventEmitter);\n\n  function MainScene(_ref) {\n    var stage = _ref.stage,\n        _ref$path = _ref.path,\n        path = _ref$path === undefined ? './static/assets/' : _ref$path;\n    (0, _classCallCheck3.default)(this, MainScene);\n\n    // this.params = params\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MainScene.__proto__ || (0, _getPrototypeOf2.default)(MainScene)).call(this));\n\n    _this.cubeCamera = null;\n\n    _this.api = new _btc2.default();\n\n    _this.allBlocksObj3d = new _map2.default();\n    _this.allBlocks = new _map2.default();\n    _this.lastHoveredBlock = null;\n\n    _this.stage = stage; // reference to the stage\n\n    _this.initProperties(); // class properties\n    _this.initState();\n    _this.addInteraction();\n\n    _this.audio = new _audio2.default(_this.stage.camera, path);\n\n    _this.audio.init();\n\n    _this.addEvents();\n    _this.setupMaterials(path);\n    _this.initGui();\n\n    _this.initReflection();\n\n    _this.clock = new THREE.Clock();\n\n    DayBuilderWorker.addEventListener('message', _this.addBlocksToStage.bind(_this), false);\n    return _this;\n  }\n\n  // start(){ console.warn(\"'start' method yet to be implemented\") }\n\n\n  (0, _createClass3.default)(MainScene, [{\n    key: 'destroy',\n    value: function destroy() {\n      document.removeEventListener('preUpdate', this.onUpdateBound, false);\n      cancelAnimationFrame(this.stage.reqID);\n      var scene = this.stage.scene;\n\n      // const traverse = (obj, callback) => {\n      //   obj.children.forEach(child => traverse(child, callback))\n      //   callback(obj)\n      // }\n\n      var dispose = function dispose(object) {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) {\n          if (object.material.map) object.material.map.dispose();\n          object.material.dispose();\n        }\n        // if( object.parent ) object.parent.remove(object)\n      };\n\n      this.stage.scene.traverse(dispose);\n    }\n  }, {\n    key: 'setDate',\n    value: function setDate(date) {\n      var focusOnBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.state.currentDate === null) {\n        this.state.currentDate = date;\n      }\n      var currentDate = (0, _moment2.default)(this.state.currentDate);\n\n      var inputDate = (0, _moment2.default)(date);\n\n      var dayIndex = currentDate.diff(inputDate, 'days');\n\n      // move camera\n      var newOffset = this.dayZOffset * dayIndex;\n      this.stage.targetCameraLookAt.z = newOffset;\n      this.stage.targetCameraPos.z = newOffset + this.stage.defaultCameraPos.z;\n\n      this.state.closestDayIndex = dayIndex;\n\n      this.loadBlocks(inputDate.valueOf(), dayIndex, focusOnBlock, dayIndex);\n    }\n  }, {\n    key: 'initReflection',\n    value: function initReflection() {}\n  }, {\n    key: 'initGui',\n    value: function initGui() {\n      var _this2 = this;\n\n      if (!_Config2.default.showGUI) {\n        return;\n      }\n\n      this.gui = new dat.GUI({ width: 300 });\n      this.gui.open();\n\n      var param = {\n        blockMetalness: 0.9,\n        blockRoughness: 0.2,\n        blockColor: this.blockMaterialFront.color.getHex(),\n        blockEmissive: this.blockMaterialFront.emissive.getHex(),\n        blockLightIntesity: 5.0,\n        //\n        merkleMetalness: 0.9,\n        merkleRoughness: 0.1,\n        merkleColor: this.merkleMaterial.color.getHex(),\n        merkleEmissive: this.merkleMaterial.emissive.getHex(),\n        //\n        backgroundColor: _Config2.default.scene.bgColor,\n        vignetteAmount: 1.4,\n        cameraFOV: _Config2.default.camera.fov\n\n        /**\r\n         * Create a GUI for a material\r\n         */\n      };var createGuiForMaterial = function createGuiForMaterial(mat, title) {\n        var f = _this2.gui.addFolder(title);\n        f.add(mat, 'metalness', 0.0, 1.0).step(0.01);\n        f.add(mat, 'roughness', 0.0, 1.0).step(0.01);\n        f.add(mat, 'bumpScale', 0.0, 1.0).step(0.01);\n        f.add(mat, 'opacity', 0.0, 1.0).step(0.01);\n        if (mat.reflectivity) f.add(mat, 'reflectivity', 0.0, 1.0).step(0.01);\n        f.addColor({ color: mat.color.getHex() }, 'color').onChange(function (val) {\n          return mat.color.setHex(val);\n        });\n        f.addColor({ emissive: mat.emissive.getHex() }, 'emissive').onChange(function (val) {\n          return mat.emissive.setHex(val);\n        });\n      };\n\n      /**\r\n      * Gui for Material\r\n      */\n      // createGuiForMaterial(this.centralBlockMaterial, 'Central Block Material')\n      // createGuiForMaterial(this.blockMaterialFront, 'Block Material')\n      // createGuiForMaterial(this.merkleMaterial, 'Merkle Block Material')\n\n      /*\r\n        Light GUI\r\n      */\n      var lightFolder = this.gui.addFolder('Lighting');\n      lightFolder.add(this.stage.pointLight, 'intensity', 0.0, 10.0).step(0.01);\n\n      /**\r\n       * Scene\r\n       */\n      var sceneFolder = this.gui.addFolder('Scene');\n      sceneFolder.addColor(param, 'backgroundColor').onChange(function (val) {\n        this.stage.scene.background = new THREE.Color(val);\n        this.stage.scene.fog.color = new THREE.Color(val);\n      }.bind(this));\n\n      sceneFolder.add(param, 'vignetteAmount', 1.0, 2.0).step(0.01).onChange(function (val) {\n        this.stage.VignettePass.uniforms.darkness.value = val;\n      }.bind(this));\n\n      sceneFolder.add(param, 'cameraFOV', 45.0, 100.0).step(0.01).onChange(function (val) {\n        this.stage.camera.fov = val;\n        this.stage.camera.updateProjectionMatrix();\n      }.bind(this));\n    }\n  }, {\n    key: 'initState',\n    value: function initState(blocks, currentDate) {\n      this.state = {\n        frameCount: 0,\n        currentDate: null,\n        dayGroups: [],\n        loadDayRequested: false,\n        currentBlock: null,\n        currentBlockObject: null,\n        view: 'day', // can be 'day' or 'block'\n        dayData: [], // all blocks grouped by day\n        currentDay: null, // which day is the camera closest to\n        blocksToAnimate: [],\n        closestDayIndex: 0,\n        minCameraZPos: 0,\n        maxCameraZPos: 0\n      };\n    }\n\n    /**\r\n     * Load in blocks for one day\r\n     */\n\n  }, {\n    key: 'loadBlocks',\n    value: function loadBlocks(date) {\n      var dayIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var focusOnBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      this.state.loadDayRequested = true;\n\n      // prune days too far away from viewer\n      for (var key in this.state.dayData) {\n        if (this.state.dayData.hasOwnProperty(key)) {\n          if (Math.abs(key - this.state.closestDayIndex) > _Config2.default.daysEitherSide) {\n            delete this.state.dayData[key];\n            this.stage.scene.remove(this.state.dayGroups[key]);\n            delete this.state.dayGroups[key];\n          }\n        }\n      }\n\n      if (window.Worker) {\n        var fromDate = (0, _moment2.default)(date).startOf('day').toDate();\n        var toDate = (0, _moment2.default)(date).endOf('day').toDate();\n        var timeStamp = fromDate.valueOf();\n\n        this.api.getBlocksSince(fromDate, toDate).then(function (blocks) {\n          var day = {\n            blocks: blocks,\n            timeStamp: timeStamp\n          };\n\n          DayBuilderWorker.postMessage({\n            cmd: 'build',\n            blocks: day.blocks,\n            timeStamp: day.timeStamp,\n            dayIndex: dayIndex,\n            focusOnBlock: focusOnBlock\n          });\n        });\n      } else {\n        console.log('Webworkers not supported. Sad');\n      }\n    }\n  }, {\n    key: 'addBlocksToStage',\n    value: function addBlocksToStage(_ref2) {\n      var data = _ref2.data;\n\n      // if (typeof e.data.sizes === 'undefined') {\n      //   return\n      // }\n\n      var that = this;\n\n      try {\n        // let workerData = e.data\n        var sizes = data.sizes,\n            blockCount = data.blockCount,\n            timeStamp = data.timeStamp,\n            dayIndex = data.dayIndex,\n            blocks = data.blocks,\n            focusOnBlock = data.focusOnBlock;\n        // let sizes = workerData.sizes\n        // let blockCount = workerData.blockCount\n        // let timeStamp = workerData.timeStamp\n        // let dayIndex = workerData.dayIndex\n        // let blocks = workerData.blocks\n        // let focusOnBlock = workerData.focusOnBlock\n\n        this.state.dayData[dayIndex] = {\n          blocks: blocks,\n          timeStamp: timeStamp,\n          blockMaterialFront: this.blockMaterialFront.clone(), // each day has it's own material\n          blockMaterialBack: this.blockMaterialBack.clone(),\n          merkleMaterial: this.merkleMaterial.clone(),\n          visibleCount: 0\n        };\n\n        var group = new THREE.Group();\n        this.state.dayGroups[dayIndex] = group;\n        this.stage.scene.add(group);\n        this.blocksToAnimate = [];\n\n        for (var index = 0; index < blocks.length; index++) {\n          // const size = sizes[index]\n          var block = blocks[index];\n          var size = block.size;\n\n          if (size.x === 0 || size.y === 0 || size.z === 0) {\n            continue;\n          }\n\n          // make box size slightly larger than the merkle tree it contains\n          /* size.x += 20.0\r\n          size.y += 20.0\r\n          size.z += 20.0 */\n\n          var front = new THREE.Mesh(this.boxGeometry, this.state.dayData[dayIndex].blockMaterialFront);\n          var back = new THREE.Mesh(this.boxGeometry, this.state.dayData[dayIndex].blockMaterialBack);\n          front.name = 'front';\n          back.name = 'back';\n\n          back.renderOrder = index - 1 * -dayIndex + 1000000;\n          front.renderOrder = index * -dayIndex + 1000000;\n\n          front.scale.set(size.x, size.y, size.z);\n          back.scale.set(size.x, size.y, size.z);\n\n          // align all front faces\n          // blockMeshFront.translateZ(-(size.z / 2))\n          // blockMeshBack.translateZ(-(size.z / 2))\n\n          var rotation = -(25 * Math.PI / 200 * index);\n\n          block.dayIndex = dayIndex;\n\n          // blockMeshFront.rotation.z = rotation\n          // blockMeshFront.translateY(800 + (index))\n          // blockMeshFront.rotation.z += Math.PI / 2\n          // blockMeshFront.translateZ((index * 30))\n\n          // blockMeshBack.rotation.z = rotation\n          // blockMeshBack.translateY(800 + (index))\n          // blockMeshBack.rotation.z += Math.PI / 2\n          // blockMeshBack.translateZ((index * 30))\n          // lockMeshBack.blockchainData = block\n\n          /* let edgeGeo = new THREE.EdgesGeometry(blockMesh.geometry)\r\n          let wireframe = new THREE.LineSegments(edgeGeo, this.blockMaterialOutline)\r\n          blockMesh.add(wireframe) */\n\n          var blockGroup = new THREE.Group();\n          blockGroup.materials = {\n            front: this.state.dayData[dayIndex].blockMaterialFront,\n            back: this.state.dayData[dayIndex].blockMaterialBack\n          };\n          blockGroup.front = front;\n          blockGroup.back = back;\n\n          blockGroup.blockchainData = block;\n          blockGroup.rotation.z = rotation;\n          blockGroup.translateY(800 + index);\n          blockGroup.rotation.z += Math.PI / 2;\n          blockGroup.translateZ(index * 30);\n          // blockGroup.name = block.hash\n          this.allBlocksObj3d.set(block.hash, blockGroup);\n          this.allBlocks.set(blockGroup, block);\n          blockGroup.visible = false;\n\n          blockGroup.add(back);\n          blockGroup.add(front);\n\n          group.add(blockGroup);\n        }\n\n        var zPos = this.dayZOffset * dayIndex;\n        group.translateZ(zPos);\n        this.state.dayData[dayIndex].zPos = zPos;\n        this.state.loadDayRequested = false;\n\n        var _that = this;\n        (0, _keys2.default)(this.state.dayGroups).forEach(function (key) {\n          var group = _that.state.dayGroups[key];\n          _that.stage.scene.remove(group);\n        });\n\n        (0, _keys2.default)(this.state.dayGroups).reverse().forEach(function (key) {\n          var group = _that.state.dayGroups[key];\n          _that.stage.scene.add(group);\n        });\n\n        // if (this.treeGroup) {\n        //   that.stage.scene.remove(this.treeGroup)\n        //   that.stage.scene.add(this.treeGroup)\n        // }\n\n        if (focusOnBlock) {\n          for (var _index = 0; _index < this.state.dayGroups[dayIndex].children.length; _index++) {\n            var mesh = this.state.dayGroups[dayIndex].children[_index];\n            if (mesh.blockchainData.hash === this.state.currentHash) {\n              this.focusOnBlock(mesh);\n              break;\n            }\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, {\n    key: 'initProperties',\n    value: function initProperties() {\n      this.boxGeometry = new THREE.BoxBufferGeometry(1.0, 1.0, 1.0); // block geo instance\n      this.dayZOffset = -5500; // offset for each day on z-axis\n      this.treeGroup = null;\n      this.blockLoadZThreshold = 10000; // how far away from the last block until we load in another?\n      this.crystalOpacity = 0.5;\n      this.pointLightTarget = new THREE.Vector3(0.0, 0.0, 0.0);\n      this.cameraBlockFocusDistance = 300;\n    }\n  }, {\n    key: 'addInteraction',\n    value: function addInteraction() {\n      this.raycaster = new THREE.Raycaster();\n      this.intersected = null;\n    }\n  }, {\n    key: 'addEvents',\n    value: function addEvents() {\n      this.onUpdateBound = this.onUpdate.bind(this);\n      document.addEventListener('preUpdate', this.onUpdateBound, false);\n      document.addEventListener('cameraMove', this.onCameraMove.bind(this), false);\n\n      this.selectBlock = new Event('selectBlock');\n\n      this.dayChangedEvent = document.createEvent('CustomEvent');\n\n      document.addEventListener('mousedown', this.onDocumentMouseDown.bind(this), false);\n\n      document.addEventListener('touchend', this.onDocumentMouseDown.bind(this), false);\n\n      if (window.Worker) {\n        this.treeBuilderWorker = TreeBuilderWorker;\n        this.treeBuilderWorker.addEventListener('message', this.addTreeToStage.bind(this), false);\n      }\n    }\n  }, {\n    key: 'addTreeToStage',\n    value: function addTreeToStage(_ref3) {\n      var data = _ref3.data;\n      var boxCenter = data.boxCenter,\n          offset = data.offset,\n          sie = data.sie,\n          vertices = data.vertices,\n          endPoints = data.endPoints,\n          block = data.block;\n\n      if (!vertices) return;\n\n      /*\r\n        Remove existing Trees\r\n      */\n      if (this.state.currentBlockObject) {\n        this.state.currentBlockObject.remove(this.state.currentBlockObject.tree);\n        this.audio.unloadSound();\n      }\n\n      // this.treeGroup = new THREE.Group()\n      // this.stage.scene.add(this.treeGroup)\n\n      var blockObjectPosition = this.state.currentBlockObject.getWorldPosition().clone();\n      // let rotation = this.state.currentBlockObject.getWorldRotation().clone()\n\n      var treeGeo = new THREE.BufferGeometry();\n      treeGeo.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      treeGeo.computeVertexNormals();\n      treeGeo.computeFaceNormals();\n\n      /*\r\n        Tree Mesh\r\n      */\n      var mesh = new THREE.Mesh(treeGeo, this.state.dayData[block.dayIndex].merkleMaterial);\n      mesh.position.add(offset);\n      mesh.renderOrder = 10000000;\n      mesh.onBeforeRender = function (renderer) {\n        return renderer.clearDepth();\n      };\n\n      /*\r\n        Sound Wave Geometry\r\n      */\n      var positions = new THREE.BufferAttribute(endPoints, 3, 1);\n      var indices = new Array(endPoints.length / 3).fill(0).map(function (a, i) {\n        return i;\n      });\n\n      var geometry = new THREE.BufferGeometry();\n      geometry.addAttribute('position', positions);\n      geometry.addAttribute('id', new THREE.BufferAttribute(new Float32Array(indices), 1, 1));\n      // per instance data\n\n      var pointsMesh = new THREE.Points(geometry, this.pointsMaterial);\n      pointsMesh.position.add(offset);\n\n      var blockObj3D = this.allBlocksObj3d.get(block.hash);\n      blockObj3D.add(pointsMesh);\n      blockObj3D.add(mesh);\n      blockObj3D.tree = mesh;\n\n      // start animation\n      this.merkleMaterial.uniforms.uAnimTime.value = 0.0;\n\n      // this.treeGroup.rotation.set(rotation.x, rotation.y, rotation.z)\n      // this.treeGroup.position.set(blockObjectPosition.x, blockObjectPosition.y, blockObjectPosition.z)\n\n      this.audio.generateMerkleSound(endPoints, blockObjectPosition, block, this.pointsMaterial, pointsMesh);\n    }\n  }, {\n    key: 'resetDayView',\n    value: function resetDayView() {\n      var _this3 = this;\n\n      if (this.state.isAnimating) {\n        return;\n      }\n\n      // this.removeTrees()\n      this.audio.unloadSound();\n\n      if (this.state.currentBlockObject) {\n        this.state.currentBlockObject.remove(this.state.currentBlockObject.tree);\n        // this.animateBlockOut(this.state.currentBlockObject.parent.children[0])\n        this.animateBlockOut(this.state.currentBlockObject).then(function () {\n          _this3.state.currentBlockObject = null;\n          _this3.state.view = 'day';\n        });\n      } else {\n        this.state.view = 'day';\n      }\n    }\n\n    // removeTrees () {\n    //   debugger;\n    //   if (typeof this.treeGroup !== 'undefined') {\n    //     this.stage.scene.remove(this.treeGroup)\n    //     this.treeGroup = null\n    //   }\n    //   this.audio.unloadSound()\n    // }\n\n  }, {\n    key: 'onDocumentMouseDown',\n    value: function onDocumentMouseDown(event) {\n      event.preventDefault();\n      if (document.querySelector('.dg.ac').contains(event.target)) return;\n      if (this.state.isAnimating) return;\n\n      var _getIntersections = this.getIntersections(),\n          intersected = _getIntersections.intersected;\n\n      // if( intersected ){\n\n\n      if (!intersected || intersected === this.state.currentBlockObject) this.resetDayView();else this.focusOnBlock(intersected);\n\n      // for (const key in this.state.dayGroups) {\n      //   if (this.state.dayGroups.hasOwnProperty(key)) {\n      //     const group = this.state.dayGroups[key]\n\n      //     for (let index = 0; index < group.children.length; index++) {\n      //       const blockGroup = group.children[index]\n\n      //       let intersects = this.raycaster.intersectObjects(blockGroup.children)\n      //       if (intersects.length > 0) {\n      //         if (\n      //           intersects[0].object === this.state.currentBlockObject ||\n      //           intersects[1].object === this.state.currentBlockObject\n      //         ) {\n      //           this.resetDayView()\n      //           return\n      //         }\n\n      //         // this.removeTrees()\n\n      //         let blockObject = intersects[0].object\n      //         this.focusOnBlock(blockObject)\n      //         return\n      //       }\n      //     }\n      //   }\n      // }\n    }\n  }, {\n    key: 'createCubeMap',\n    value: function createCubeMap(position, dayIndex) {\n      if (typeof this.state.dayData[dayIndex] !== 'undefined') {\n        this.stage.scene.background = this.bgMap;\n        this.state.dayData[dayIndex].blockMaterialFront.color.setHex(0xffffff);\n        var cubeCamera = new THREE.CubeCamera(100.0, 5000, 1024);\n        cubeCamera.position.set(position.x, position.y, position.z);\n        cubeCamera.renderTarget.texture.minFilter = THREE.LinearMipMapLinearFilter;\n        cubeCamera.update(this.stage.renderer, this.stage.scene);\n\n        this.state.dayData[dayIndex].blockMaterialFront.envMap = cubeCamera.renderTarget.texture;\n        this.state.dayData[dayIndex].blockMaterialBack.envMap = cubeCamera.renderTarget.texture;\n        this.state.dayData[dayIndex].merkleMaterial.envMap = cubeCamera.renderTarget.texture;\n\n        this.stage.scene.background = new THREE.Color(_Config2.default.scene.bgColor);\n      }\n    }\n  }, {\n    key: 'animateBlock',\n    value: function animateBlock(blockObject, fromPos, fromQuaternion, toPos, toQuaternion, duration) {\n      var _this4 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this4.state.isAnimating = true;\n        var moveQuaternion = new THREE.Quaternion();\n        blockObject.quaternion.set(moveQuaternion);\n\n        _this4.easing = TWEEN.Easing.Quartic.InOut;\n\n        // let tweenVars = {\n        //   blockPosX: fromPos.x,\n        //   blockPosY: fromPos.y,\n        //   time: 0\n        // }\n\n        // let that = this\n\n        new TWEEN.Tween(blockObject.position).to(toPos, duration).easing(_this4.easing).onComplete(function () {\n          _this4.state.isAnimating = false;\n          resolve();\n        }).start();\n\n        new TWEEN.Tween({ time: 0 }).to({ time: 1 }, duration).onUpdate(function (_ref4) {\n          var time = _ref4.time;\n\n          // slerp to target rotation\n          THREE.Quaternion.slerp(fromQuaternion, toQuaternion, moveQuaternion, time);\n          blockObject.quaternion.set(moveQuaternion.x, moveQuaternion.y, moveQuaternion.z, moveQuaternion.w);\n        }).easing(_this4.easing).start();\n      });\n    }\n  }, {\n    key: 'animateBlockOut',\n    value: function animateBlockOut(blockObject) {\n      var _this5 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        if (blockObject) {\n          var fromPos = blockObject.position.clone();\n          var toPos = blockObject.initialPosition.clone();\n\n          var targetRotation = blockObject.initialRotation.clone();\n          var fromQuaternion = new THREE.Quaternion().copy(blockObject.quaternion);\n          var toQuaternion = new THREE.Quaternion().setFromEuler(targetRotation);\n\n          _this5.animateBlock(blockObject, fromPos, fromQuaternion, toPos, toQuaternion, 500).then(function () {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: 'animateBlockIn',\n    value: function animateBlockIn(blockObject) {\n      var _this6 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var blockPos = blockObject.position.clone();\n\n        var targetRotation = new THREE.Euler(0.0, 0.0, 0.0);\n        var fromQuaternion = new THREE.Quaternion().copy(blockObject.quaternion);\n        var toQuaternion = new THREE.Quaternion().setFromEuler(targetRotation);\n\n        blockObject.initialPosition = blockObject.position.clone();\n        blockObject.initialRotation = blockObject.rotation.clone();\n\n        // focus camera on block\n        var blockWorldPos = blockObject.getWorldPosition();\n\n        _this6.stage.targetCameraLookAt.z = blockWorldPos.z;\n        _this6.stage.targetCameraPos.z = blockWorldPos.z + _this6.cameraBlockFocusDistance;\n        var toPos = new THREE.Vector3();\n        toPos.z = blockObject.position.z;\n\n        _this6.animateBlock(blockObject, blockPos, fromQuaternion,\n        // this.stage.targetCameraLookAt,\n        toPos, toQuaternion, 2000, true).then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: 'buildTree',\n    value: function buildTree(blockObject) {\n      var _this7 = this;\n\n      var block = blockObject.blockchainData;\n      if (this.state.currentBlockObject) {\n        this.state.currentBlockObject.remove(this.state.currentBlockObject.tree);\n        this.audio.unloadSound();\n      }\n      this.state.currentBlock = block;\n      // this.removeTrees()\n\n      this.api.getTransactionsForBlock(block.hash).then(function (transactions) {\n        block.transactions = transactions;\n        console.log('Building Tree for', block.hash);\n        _this7.treeBuilderWorker.postMessage({\n          cmd: 'build',\n          block: block\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: 'setupMaterials',\n    value: function setupMaterials(path) {\n      this.cubeMapUrls = ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'];\n\n      var map = new THREE.TextureLoader().load(path + 'textures/Marble068_COL_1K.jpg');\n      var metalnessMap = new THREE.TextureLoader().load(path + 'textures/Marble068_REFL_1K.jpg');\n      var roughnessMap = new THREE.TextureLoader().load(path + 'textures/Marble068_GLOSS_1K.jpg');\n      var glossMap = new THREE.TextureLoader().load(path + 'textures/Marble068_GLOSS_1K.jpg');\n      var normalMap = new THREE.TextureLoader().load(path + 'textures/Marble068_NRM_1K.jpg');\n      var bumpMap = new THREE.TextureLoader().load(path + 'textures/IceBlock008_OVERLAY_1K.jpg');\n      this.bgMap = new THREE.CubeTextureLoader().setPath(path + 'textures/').load(this.cubeMapUrls);\n      // this.stage.scene.background = this.bgMap\n\n      this.blockMaterialBack = new _BlockMaterial2.default({\n        color: 0xeeeeee,\n        emissive: 0x000000,\n        metalness: 0.9,\n        roughness: 0.2,\n        opacity: 0.5,\n        transparent: true,\n        side: THREE.BackSide,\n        envMap: this.bgMap,\n        bumpMap: bumpMap,\n        bumpScale: 0.03\n      });\n\n      this.blockMaterialFront = new _BlockMaterial2.default({\n        color: 0xeeeeee,\n        emissive: 0x330000,\n        metalness: 0.9,\n        roughness: 0.2,\n        opacity: 0.5,\n        transparent: true,\n        side: THREE.FrontSide,\n        envMap: this.bgMap,\n        bumpMap: bumpMap,\n        bumpScale: 0.03\n      });\n\n      this.centralBlockMaterial = new THREE.MeshPhysicalMaterial({\n        color: 0xffffff,\n        emissive: 0x333333,\n        metalness: 0.8,\n        roughness: 0.2,\n        opacity: 0.5,\n        transparent: true,\n        side: THREE.DoubleSide,\n        envMap: this.bgMap,\n        envMapIntensity: 2.3,\n        // bumpMap,\n        // bumpScale: 0.03,\n        roughnessMap: roughnessMap,\n        metalnessMap: metalnessMap,\n        normalMap: normalMap,\n        premultipliedAlpha: true\n        // map\n      });\n\n      this.blockMaterialOutline = new THREE.LineBasicMaterial({\n        color: 0xaaaaaa,\n        transparent: true,\n        opacity: 0.5\n      });\n\n      this.blockMaterialHighlight = new THREE.MeshPhysicalMaterial({\n        color: 0xffffff,\n        emissive: 0xffffff,\n        metalness: 0.9,\n        roughness: 0.2,\n        opacity: 0.8,\n        transparent: true,\n        side: THREE.DoubleSide\n      });\n\n      this.merkleMaterial = new _MerkleMaterial2.default({\n        color: 0xffffff,\n        emissive: 0x444444,\n        flatShading: true,\n        metalness: 0.8,\n        roughness: 0.3,\n        opacity: 0.3,\n        /* depthTest: false,\r\n        depthWrite: false, */\n        transparent: true,\n        side: THREE.DoubleSide,\n        envMap: this.bgMap\n      });\n\n      this.pointsMaterial = new _PointsMaterial2.default({\n        color: 0xfff900,\n        size: 30.0,\n        // alphaTest: 0.0001,\n        transparent: true,\n        blending: THREE.AdditiveBlending,\n        opacity: 1.0,\n        depthTest: false\n        // depthWrite: false,\n        // vertexColors: THREE.VertexColors\n      });\n    }\n  }, {\n    key: 'getIntersections',\n    value: function getIntersections() {\n      var vector = new THREE.Vector3(this.stage.targetMousePos.x, this.stage.targetMousePos.y, 0.5);\n      vector.unproject(this.stage.camera);\n      var raycaster = new THREE.Raycaster(this.stage.camera.position, vector.sub(this.stage.camera.position).normalize());\n\n      var allBlocks = (0, _from2.default)(this.allBlocksObj3d.values());\n\n      var boxes = allBlocks\n      // .filter(box => box !== this.state.currentBlockObject)\n      .map(function (group) {\n        return group.children[0];\n      }).filter(function (box) {\n        return box && box.visible;\n      }); // Filter to only those with non null refs\n\n      var intersections = raycaster.intersectObjects(boxes, false);\n      var intersected = intersections[0] && intersections[0].object.parent;\n\n      return { intersections: intersections, allBlocks: allBlocks, intersected: intersected };\n    }\n  }, {\n    key: 'checkMouseIntersection',\n    value: function checkMouseIntersection() {\n      var _this8 = this;\n\n      var _getIntersections2 = this.getIntersections(),\n          intersected = _getIntersections2.intersected,\n          allBlocks = _getIntersections2.allBlocks;\n      /*\r\n        Doing own intersection test as we don't need it recursive or to check front/back objects\r\n      */\n      // const intersections = Array.from(this.state.dayGroups)\n      // .map(group => raycase.intersectObject(group.children[0], false ))\n      // .sort(( a, b ) => a.distance - b.distance)\n\n      // // const nearestIntersectedBlock = intersections[0]\n\n      // For Each block\n\n\n      allBlocks.forEach(function (block) {\n        // Set the front/back materials to their default\n        // block.children.forEach((child, i) => child.material = block.materials[i])\n        block.front.material = block.materials.front;\n        block.back.material = block.materials.back;\n      });\n\n      /*\r\n        If an intersection occured but not on the selected block, set a highlight\r\n      */\n      if (intersected && intersected !== this.state.currentBlockObject) {\n        intersected.children.forEach(function (child) {\n          return child.material = _this8.blockMaterialHighlight;\n        });\n        if (intersected !== this.lastHoveredBlock) {\n          this.lastHoveredBlock = intersected;\n          this.emit('blockHovered', this.allBlocks.get(intersected));\n        }\n        this.pointLightTarget = intersected.position;\n      }\n\n      // for (const dayIndex in this.state.dayGroups) {\n      //   if (this.state.dayGroups.hasOwnProperty(dayIndex)) {\n      //     const group = this.state.dayGroups[dayIndex]\n\n      //     for (let index = 0; index < group.children.length; index++) {\n      //       const blockGroup = group.children[index]\n\n      //       let intersects = ray.intersectObjects(blockGroup.children)\n      //       if (intersects.length > 0) {\n      //         if ( intersects[0].object !== this.intersected && intersects[0].object !== this.state.currentBlockObject ) {\n      //           if ( this.intersected && typeof this.state.dayData[dayIndex] !== 'undefined' // this.intersected.material.uuid !== this.centralBlockMaterial.uuid && ) {\n      //             this.intersected.material = this.state.dayData[dayIndex].blockMaterialFront\n      //           }\n\n      //           this.intersected = intersects[0].object\n\n      //           if (this.intersected.material.uuid !== this.centralBlockMaterial.uuid) {\n      //             this.intersected.material = this.blockMaterialHighlight\n      //           }\n\n      //           const blockWorldPos = this.intersected.getWorldPosition()\n\n      //           this.pointLightTarget = blockWorldPos\n      //         }\n      //         return\n      //       } else {\n      //         if (\n      //         this.intersected &&\n      //         // this.intersected.material.uuid !== this.centralBlockMaterial.uuid &&\n      //         typeof this.state.dayData[dayIndex] !== 'undefined'\n      //       ) {\n      //           this.intersected.material = this.state.dayData[dayIndex].blockMaterialFront\n      //         }\n      //         this.intersected = null\n      //       }\n      //     }\n      //   }\n      // }\n    }\n  }, {\n    key: 'onCameraMove',\n    value: function onCameraMove() {\n      if (typeof this.state.dayData[0] === 'undefined') {\n        return;\n      }\n\n      // which day are we closest to?\n      var closest = Number.MAX_VALUE;\n      var closestDayIndex = 0;\n\n      for (var dayIndex in this.state.dayData) {\n        if (this.state.dayData.hasOwnProperty(dayIndex)) {\n          var _day = this.state.dayData[dayIndex];\n          var dist = Math.abs(_day.zPos - this.stage.camera.position.z + 1000.0);\n          if (dist < closest) {\n            closest = dist;\n            closestDayIndex = parseInt(dayIndex);\n          }\n        }\n      }\n\n      var blocks = this.state.dayData[closestDayIndex].blocks;\n      var time = blocks[0].time * 1000;\n      var date = (0, _moment2.default)(time).startOf('day').toDate();\n      var day = {\n        date: date,\n        input: blocks.reduce(function (a, b) {\n          return a + b.input;\n        }, 0),\n        output: blocks.reduce(function (a, b) {\n          return a + b.output;\n        }, 0),\n        fee: blocks.reduce(function (a, b) {\n          return a + b.fee;\n        }, 0)\n\n        // bubble up event\n      };if (this.state.currentDay === null) {\n\n        this.emit('firstDayLoaded');\n        this.emit('dayChanged', day);\n      } else {\n        if (this.state.closestDayIndex !== closestDayIndex) {\n          this.emit('dayChanged', day);\n        }\n      }\n\n      this.state.currentDay = this.state.dayData[closestDayIndex];\n\n      this.state.closestDayIndex = closestDayIndex;\n\n      if (this.state.loadDayRequested === false && typeof this.state.currentDay !== 'undefined') {\n        for (var index = 0; index <= _Config2.default.daysEitherSide; index++) {\n          var dayLoading = false;\n\n          for (var innerIndex = 0; innerIndex <= 1; innerIndex++) {\n            var signedIndex = parseFloat(index);\n            if (innerIndex === 1 && index !== 0) {\n              signedIndex = index * -1;\n            }\n\n            if (typeof this.state.dayData[closestDayIndex + signedIndex] === 'undefined') {\n              var _day2 = (0, _moment2.default)(this.state.currentDay.timeStamp).subtract(signedIndex, 'day').format('YYYY-MM-DD');\n              this.loadDay(_day2, closestDayIndex, signedIndex);\n              dayLoading = true;\n              break;\n            }\n          }\n\n          if (dayLoading) {\n            break;\n          }\n        }\n      }\n\n      /* this.state.hashRate = this.state.currentDay.hashRate\r\n      this.state.audioFreqCutoff = map(this.state.hashRate, 0.0, 20000000.0, 50.0, 15000) // TODO: set upper bound to max hashrate from blockchain.info\r\n        console.log(this.state.audioFreqCutoff) */\n\n      // this.state.audioFreqCutoff = 20000\n\n      // this.audio.setAmbienceFilterCutoff(this.state.audioFreqCutoff)\n    }\n  }, {\n    key: 'loadDay',\n    value: function loadDay(day, closestDayIndex, index) {\n      this.loadBlocks(day, closestDayIndex + index);\n      var latestDayIndex = _maxSafeInteger2.default;\n      var earliestDayIndex = 0;\n\n      for (var key in this.state.dayData) {\n        if (this.state.dayData.hasOwnProperty(key)) {\n          var data = this.state.dayData[key];\n          if (data.blocks.length > 0) {\n            latestDayIndex = Math.min(latestDayIndex, parseInt(key));\n            earliestDayIndex = Math.max(earliestDayIndex, parseInt(key));\n          }\n        }\n      }\n\n      if (typeof this.state.dayData[latestDayIndex] !== 'undefined' && typeof this.state.dayData[earliestDayIndex] !== 'undefined') {\n        this.state.maxCameraZPos = this.state.dayData[latestDayIndex].zPos + this.stage.defaultCameraPos.z;\n        this.state.minCameraZPos = this.state.dayData[earliestDayIndex].zPos + 1000.0;\n      }\n    }\n  }, {\n    key: 'goToBlock',\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(blockhash) {\n        var existingBlock, block, day;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (blockhash) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt('return');\n\n              case 2:\n                existingBlock = (0, _from2.default)(this.allBlocks.values()).find(function (_ref6) {\n                  var hash = _ref6.hash;\n                  return hash === blockhash;\n                });\n                // console.log( existingBlock )\n\n                block = existingBlock;\n\n                if (existingBlock) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return this.api.getBlock(hash);\n\n              case 7:\n                block = _context.sent;\n\n              case 8:\n                day = (0, _moment2.default)(block.time * 1000).format('YYYY-MM-DD');\n\n                this.state.currentHash = block.hash;\n                this.setDate(day, true);\n\n              case 11:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function goToBlock(_x4) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return goToBlock;\n    }()\n  }, {\n    key: 'focusOnBlock',\n    value: function focusOnBlock(blockGroup) {\n      var _this9 = this;\n\n      // let blockGroup = blockObject//.parent\n      blockGroup.visible = true;\n      this.state.view = 'block';\n\n      // if (this.state.currentBlockObject) {\n      //   this.animateBlockOut(this.state.currentBlockObject/*.parent.children[0]*/)\n      // }\n      this.animateBlockOut(this.state.currentBlockObject).then(function () {\n        // this.animateBlockIn(blockGroup.children[0])\n        if (_this9.state.currentBlockObject) {\n          _this9.state.currentBlockObject.remove(_this9.state.currentBlockObject.tree);\n          _this9.audio.unloadSound();\n        }\n\n        _this9.state.currentBlockObject = blockGroup;\n\n        _this9.animateBlockIn(_this9.state.currentBlockObject).then(function () {\n          _this9.buildTree(_this9.state.currentBlockObject);\n          _this9.state.isAnimating = false;\n          // console.log('BLOCK SELECTED')\n          var block = _this9.state.currentBlockObject.blockchainData;\n          _this9.emit('blockSelected', (0, _extends3.default)({}, block, { time: new Date(block.time * 1000) }));\n        });\n      });\n    }\n  }, {\n    key: 'animateTree',\n    value: function animateTree() {\n      // if (this.state.view === 'block') {\n      //   if (this.treeGroup) {\n      //     this.state.currentBlockObject.rotation.y += 0.001\n      //     this.state.currentBlockObject.parent.children[0].rotation.y += 0.001\n      //     this.treeGroup.rotation.y += 0.001\n      //   }\n      // }\n    }\n  }, {\n    key: 'animateBlockVisibility',\n    value: function animateBlockVisibility() {\n      for (var dayIndex in this.state.dayGroups) {\n        if (this.state.dayGroups.hasOwnProperty(dayIndex)) {\n          var dayGroup = this.state.dayGroups[dayIndex];\n          if (typeof this.state.dayData[dayIndex] !== 'undefined') {\n            if (this.state.dayData[dayIndex].visibleCount < dayGroup.children.length) {\n              for (var meshIndex = 0; meshIndex < dayGroup.children.length; meshIndex++) {\n                var mesh = dayGroup.children[meshIndex];\n                if (mesh.visible === false) {\n                  mesh.visible = true;\n                  this.state.dayData[dayIndex].visibleCount++;\n                  break;\n                }\n              }\n              if (this.state.dayData[dayIndex].visibleCount === dayGroup.children.length) {\n                // take a cube map of blocks once all are visible\n                this.createCubeMap(dayGroup.getWorldPosition(), dayIndex);\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'updateLights',\n    value: function updateLights() {\n      this.stage.pointLight.position.lerp(this.pointLightTarget, 0.5);\n    }\n  }, {\n    key: 'onUpdate',\n    value: function onUpdate() {\n      this.state.frameCount++;\n      TWEEN.update();\n      this.updateLights();\n      this.checkMouseIntersection();\n      this.animateTree();\n      this.animateBlockVisibility();\n\n      this.uTime = this.clock.getElapsedTime();\n\n      this.pointsMaterial.uniforms.uTime.value = this.uTime;\n\n      if (this.merkleMaterial) {\n        this.merkleMaterial.uniforms.uAnimTime.value += 0.01;\n        this.merkleMaterial.uniforms.uTime.value = this.uTime;\n      }\n\n      if (typeof this.audio.pointColors !== 'undefined' && this.audio.pointColors.length > 0) {\n        var pointColors = Uint8Array.from(this.audio.pointColors);\n        var pointColorsTexture = new THREE.DataTexture(pointColors, pointColors.length / 3, 1, THREE.RGBFormat);\n\n        pointColorsTexture.minFilter = THREE.NearestFilter;\n        pointColorsTexture.magFilter = THREE.NearestFilter;\n\n        pointColorsTexture.needsUpdate = true;\n\n        this.pointsMaterial.uniforms.uColor.value = pointColorsTexture;\n        this.pointsMaterial.uniforms.pointCount.value = pointColors.length / 3;\n      }\n    }\n  }]);\n  return MainScene;\n}(_eventemitter2.default);\n\nexports.default = MainScene;\n\n/***/ }),\n\n/***/ \"fnz4\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.merge = undefined;\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar merge = exports.merge = function merge(aGeom, geometry) {\n\n    if (geometry instanceof THREE.BufferGeometry === false) {\n\n        console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n        return;\n    }\n\n    var attributes = aGeom.attributes;\n\n    if (aGeom.index) {\n\n        var indices = geometry.index.array;\n\n        var offset = attributes['position'].count;\n\n        for (var i = 0, il = indices.length; i < il; i++) {\n\n            indices[i] = offset + indices[i];\n        }\n\n        aGeom.index.array = Uint32ArrayConcat(aGeom.index.array, indices);\n    }\n\n    for (var key in attributes) {\n\n        if (geometry.attributes[key] === undefined) continue;\n\n        attributes[key].array = Float32ArrayConcat(attributes[key].array, geometry.attributes[key].array);\n    }\n\n    return aGeom;\n\n    /***\n     * @param {Float32Array} first\n     * @param {Float32Array} second\n     * @returns {Float32Array}\n     * @constructor\n     */\n    function Float32ArrayConcat(first, second) {\n        var firstLength = first.length,\n            result = new Float32Array(firstLength + second.length);\n\n        result.set(first);\n        result.set(second, firstLength);\n\n        return result;\n    }\n\n    /**\n     * @param {Uint32Array} first\n     * @param {Uint32Array} second\n     * @returns {Uint32Array}\n     * @constructor\n     */\n    function Uint32ArrayConcat(first, second) {\n        var firstLength = first.length,\n            result = new Uint32Array(firstLength + second.length);\n\n        result.set(first);\n        result.set(second, firstLength);\n\n        return result;\n    }\n};\n\n/***/ }),\n\n/***/ \"k78l\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"#define GLSLIFY 1\\nuniform float uTime;\\nuniform float uAnimTime;\\n\\nvarying float distanceFromCenter;\\n\\nfloat random_1_0 (vec2 st_1_1) {\\n    return fract(sin(dot(st_1_1.xy, vec2(12.9898,78.233))) * 43758.5453123);\\n}\\n\\n\\n\\n\\n#define PHYSICAL\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\tdistanceFromCenter = distance(transformed.xyz, vec3(0.0, 0.0, 0.0)) + (random_1_0(transformed.xy) * 100.0 );\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\"\n\n/***/ }),\n\n/***/ \"uInQ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _merkleTreeGen = __webpack_require__(\"0RWK\");\n\nvar _merkleTreeGen2 = _interopRequireDefault(_merkleTreeGen);\n\nvar _BufferGeometryUtils = __webpack_require__(\"fnz4\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar seedrandom = __webpack_require__(\"H/Ud\");\n// import _ from 'lodash'\n\n\nvar path = new THREE.LineCurve3();\nvar tmpVec3 = new THREE.Vector3();\nvar tmpVec3_2 = new THREE.Vector3();\nvar tmpQuat = new THREE.Quaternion();\nvar DEG2RAD = Math.PI / 180;\n\nvar X = new THREE.Vector3(1, 0, 0);\nvar Y = new THREE.Vector3(0, 1, 0);\nvar Z = new THREE.Vector3(0, 0, 1);\nvar UP = new THREE.Vector3(0, 1, 0);\n\nvar xPosRotation = new THREE.Quaternion();\nvar xNegRotation = new THREE.Quaternion();\nvar yPosRotation = new THREE.Quaternion();\nvar yNegRotation = new THREE.Quaternion();\nvar yReverseRotation = new THREE.Quaternion();\nvar zPosRotation = new THREE.Quaternion();\nvar zNegRotation = new THREE.Quaternion();\n\nexports.default = function (_ref) {\n  var n_tx = _ref.n_tx,\n      output = _ref.output,\n      hash = _ref.hash,\n      feeToInputRatio = _ref.feeToInputRatio;\n  var visualise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  // const { n_tx } = block\n\n  // const block = block\n\n  var treeGeo = new THREE.Geometry();\n\n  var signatureAngle = 5.0 + output % 85;\n  signatureAngle = Math.ceil(signatureAngle / 5) * 5;\n\n  var angle = signatureAngle; // get unique structure for this block\n\n  var path = new THREE.LineCurve3();\n\n  // const treeVertices = new Float32Array()\n\n  xPosRotation.setFromAxisAngle(X, DEG2RAD * angle);\n  xNegRotation.setFromAxisAngle(X, DEG2RAD * -angle);\n  yPosRotation.setFromAxisAngle(Y, DEG2RAD * angle);\n  yNegRotation.setFromAxisAngle(Y, DEG2RAD * -angle);\n  yReverseRotation.setFromAxisAngle(Y, DEG2RAD * 180);\n  zPosRotation.setFromAxisAngle(Z, DEG2RAD * angle);\n  zNegRotation.setFromAxisAngle(Z, DEG2RAD * -angle);\n\n  // Generate an incremental array of `n_tx` length [0, 1, 2, 3, 4, ...n_tx]\n  var array = new Array(n_tx).fill(0).map(function (v, i) {\n    return i.toString();\n  });\n\n  var _merkle$fromArray = _merkleTreeGen2.default.fromArray({ array: array }),\n      tree = _merkle$fromArray.tree,\n      sortedTree = _merkle$fromArray.sortedTree;\n\n  var baseAngle = 0;\n\n  tree[0].direction = new THREE.Vector3(0, 1, 0);\n  tree[0].startPosition = new THREE.Vector3(0, 0, 0);\n  // tree[0].angle = angle\n  var direction = new THREE.Vector3(UP);\n  var axis = Y;\n  var geos = [];\n  var points = [];\n  var endPoints = [];\n\n  var min = new THREE.Vector3();\n  var max = new THREE.Vector3();\n\n  // console.log(feeToInputRatio)\n\n  var magnitude = void 0,\n      endPosition = void 0;\n\n  var levels = tree[0].level;\n  var seeded = new Array(levels).fill(0).map(function (v) {\n    return seedrandom(hash + v);\n  });\n\n  var N = tree.length;\n  var i = 0;\n  var node = void 0;\n  while (i < N) {\n    node = tree[i++];\n    direction.copy(UP);\n    if (node.parent) {\n\n      node.startPosition = node.parent.endPosition;\n\n      // add some randomness based on block network health\n      var rng = seeded[node.level]; //seedrandom(hash + node.level)\n      // let rng = seedrandom(hash + node.level)\n      var random = rng.quick();\n      var randomness = (random * 10000 - 5000) * feeToInputRatio;\n\n      baseAngle += randomness;\n      // angle += randomness\n\n      direction.copy(node.parent.endPosition).sub(node.parent.startPosition);\n      var isLeft = node.parent.children.left === node;\n      // console.log( isLeft )\n      direction.applyQuaternion(isLeft ? zPosRotation : zNegRotation);\n      direction.applyQuaternion(tmpQuat.setFromAxisAngle(axis, DEG2RAD * baseAngle));\n    }\n\n    magnitude = (node.level + 1) * 5;\n    direction.normalize().multiplyScalar(magnitude);\n    node.endPosition = node.startPosition.clone().add(direction);\n\n    // Get the bounds\n    max.max(node.endPosition);\n    min.min(node.endPosition);\n    points.push(node.endPosition.clone());\n    points.push(node.startPosition.clone());\n\n    if (visualise) {\n      if (node.level === 0) {\n        endPoints.push(node.endPosition.x, node.endPosition.y, node.endPosition.z);\n      }\n      path.v1.copy(node.startPosition);\n      path.v2.copy(node.endPosition);\n      // debugger\n      // geos.push( new THREE.TubeBufferGeometry(path, 1, magnitude / 20, 6, false))\n      var tubeGeo = new THREE.TubeGeometry(path, 1, magnitude / 20, 6, false);\n\n      treeGeo.merge(tubeGeo);\n      // debugger;\n    }\n\n    if (node.level === 1) {\n      endPoints.push(node.endPosition.x, node.endPosition.y, node.endPosition.z);\n    }\n  }\n\n  // const startingPosition = new THREE.Vector3(0, 0, 0)\n  // const direction = new THREE.Vector3(0, 1, 0)\n\n  // let endPoints = []\n  // let points = []\n  // debugger\n  // build(sortedTree, startingPosition, direction, visualise, hash, feeToInputRatio, treeGeo, angle, points, endPoints)\n\n  var box = new THREE.Box3().setFromPoints(points);\n  var size = /*new THREE.Vector3().subVectors( max, min )//*/box.getSize();\n  var boxCenter = box.getCenter(); //new THREE.Vector3().addVectors( min, max ).multiplyScalar( 0.5 )\n  var offset = new THREE.Vector3().sub(min).sub(size.clone().multiplyScalar(0.5));\n  // const baseGeo = new THREE.BufferGeometry()\n  // const baseGeo = new THREE.Geometry()\n  // baseGeo.setIndex( [] );\n  // baseGeo.addAttribute( 'position', new THREE.Float32BufferAttribute( [], 3 ) );\n  // baseGeo.addAttribute( 'normal', new THREE.Float32BufferAttribute( [], 3 ) );\n  // baseGeo.addAttribute( 'uv', new THREE.Float32BufferAttribute( [], 2 ) );\n\n\n  // const treeGeo = geos.reduce((a, b) => a.merge(, baseGeo)\n\n  // if(visualise){\n\n  // const positions = geos.reduce((arr, {attributes}) => arr.concat(Array.from(attributes.position.array)), [])\n  // const normal = geos.reduce((arr, {attributes}) => arr.concat(Array.from(attributes.normal.array)), [])\n  // const uv = geos.reduce((arr, {attributes}) => arr.concat(Array.from(attributes.uv.array)), [])  \n\n  // }\n\n  var treeBuffer = new THREE.BufferGeometry();\n  if (visualise) {\n    // let bufferTreeGeometry = new THREE.BufferGeometry()\n    treeBuffer.fromGeometry(treeGeo);\n    // treeBuffer = bufferTreeGeometry\n  }\n\n  return { size: size, offset: offset, boxCenter: min /*:new THREE.Vector3(size.clone().multiplyScalar(0.5)).add(min)*/, endPoints: endPoints, treeGeo: treeBuffer\n\n    // return returnData\n\n  };\n};\n\n/***/ }),\n\n/***/ \"uslO\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar map = {\n\t\"./af\": \"3CJN\",\n\t\"./af.js\": \"3CJN\",\n\t\"./ar\": \"3MVc\",\n\t\"./ar-dz\": \"tkWw\",\n\t\"./ar-dz.js\": \"tkWw\",\n\t\"./ar-kw\": \"j8cJ\",\n\t\"./ar-kw.js\": \"j8cJ\",\n\t\"./ar-ly\": \"wPpW\",\n\t\"./ar-ly.js\": \"wPpW\",\n\t\"./ar-ma\": \"dURR\",\n\t\"./ar-ma.js\": \"dURR\",\n\t\"./ar-sa\": \"7OnE\",\n\t\"./ar-sa.js\": \"7OnE\",\n\t\"./ar-tn\": \"BEem\",\n\t\"./ar-tn.js\": \"BEem\",\n\t\"./ar.js\": \"3MVc\",\n\t\"./az\": \"eHwN\",\n\t\"./az.js\": \"eHwN\",\n\t\"./be\": \"3hfc\",\n\t\"./be.js\": \"3hfc\",\n\t\"./bg\": \"lOED\",\n\t\"./bg.js\": \"lOED\",\n\t\"./bm\": \"hng5\",\n\t\"./bm.js\": \"hng5\",\n\t\"./bn\": \"aM0x\",\n\t\"./bn.js\": \"aM0x\",\n\t\"./bo\": \"w2Hs\",\n\t\"./bo.js\": \"w2Hs\",\n\t\"./br\": \"OSsP\",\n\t\"./br.js\": \"OSsP\",\n\t\"./bs\": \"aqvp\",\n\t\"./bs.js\": \"aqvp\",\n\t\"./ca\": \"wIgY\",\n\t\"./ca.js\": \"wIgY\",\n\t\"./cs\": \"ssxj\",\n\t\"./cs.js\": \"ssxj\",\n\t\"./cv\": \"N3vo\",\n\t\"./cv.js\": \"N3vo\",\n\t\"./cy\": \"ZFGz\",\n\t\"./cy.js\": \"ZFGz\",\n\t\"./da\": \"YBA/\",\n\t\"./da.js\": \"YBA/\",\n\t\"./de\": \"DOkx\",\n\t\"./de-at\": \"8v14\",\n\t\"./de-at.js\": \"8v14\",\n\t\"./de-ch\": \"Frex\",\n\t\"./de-ch.js\": \"Frex\",\n\t\"./de.js\": \"DOkx\",\n\t\"./dv\": \"rIuo\",\n\t\"./dv.js\": \"rIuo\",\n\t\"./el\": \"CFqe\",\n\t\"./el.js\": \"CFqe\",\n\t\"./en-au\": \"Sjoy\",\n\t\"./en-au.js\": \"Sjoy\",\n\t\"./en-ca\": \"Tqun\",\n\t\"./en-ca.js\": \"Tqun\",\n\t\"./en-gb\": \"hPuz\",\n\t\"./en-gb.js\": \"hPuz\",\n\t\"./en-ie\": \"ALEw\",\n\t\"./en-ie.js\": \"ALEw\",\n\t\"./en-nz\": \"dyB6\",\n\t\"./en-nz.js\": \"dyB6\",\n\t\"./eo\": \"Nd3h\",\n\t\"./eo.js\": \"Nd3h\",\n\t\"./es\": \"LT9G\",\n\t\"./es-do\": \"7MHZ\",\n\t\"./es-do.js\": \"7MHZ\",\n\t\"./es-us\": \"INcR\",\n\t\"./es-us.js\": \"INcR\",\n\t\"./es.js\": \"LT9G\",\n\t\"./et\": \"XlWM\",\n\t\"./et.js\": \"XlWM\",\n\t\"./eu\": \"sqLM\",\n\t\"./eu.js\": \"sqLM\",\n\t\"./fa\": \"2pmY\",\n\t\"./fa.js\": \"2pmY\",\n\t\"./fi\": \"nS2h\",\n\t\"./fi.js\": \"nS2h\",\n\t\"./fo\": \"OVPi\",\n\t\"./fo.js\": \"OVPi\",\n\t\"./fr\": \"tzHd\",\n\t\"./fr-ca\": \"bXQP\",\n\t\"./fr-ca.js\": \"bXQP\",\n\t\"./fr-ch\": \"VK9h\",\n\t\"./fr-ch.js\": \"VK9h\",\n\t\"./fr.js\": \"tzHd\",\n\t\"./fy\": \"g7KF\",\n\t\"./fy.js\": \"g7KF\",\n\t\"./gd\": \"nLOz\",\n\t\"./gd.js\": \"nLOz\",\n\t\"./gl\": \"FuaP\",\n\t\"./gl.js\": \"FuaP\",\n\t\"./gom-latn\": \"+27R\",\n\t\"./gom-latn.js\": \"+27R\",\n\t\"./gu\": \"rtsW\",\n\t\"./gu.js\": \"rtsW\",\n\t\"./he\": \"Nzt2\",\n\t\"./he.js\": \"Nzt2\",\n\t\"./hi\": \"ETHv\",\n\t\"./hi.js\": \"ETHv\",\n\t\"./hr\": \"V4qH\",\n\t\"./hr.js\": \"V4qH\",\n\t\"./hu\": \"xne+\",\n\t\"./hu.js\": \"xne+\",\n\t\"./hy-am\": \"GrS7\",\n\t\"./hy-am.js\": \"GrS7\",\n\t\"./id\": \"yRTJ\",\n\t\"./id.js\": \"yRTJ\",\n\t\"./is\": \"upln\",\n\t\"./is.js\": \"upln\",\n\t\"./it\": \"FKXc\",\n\t\"./it.js\": \"FKXc\",\n\t\"./ja\": \"ORgI\",\n\t\"./ja.js\": \"ORgI\",\n\t\"./jv\": \"JwiF\",\n\t\"./jv.js\": \"JwiF\",\n\t\"./ka\": \"RnJI\",\n\t\"./ka.js\": \"RnJI\",\n\t\"./kk\": \"j+vx\",\n\t\"./kk.js\": \"j+vx\",\n\t\"./km\": \"5j66\",\n\t\"./km.js\": \"5j66\",\n\t\"./kn\": \"gEQe\",\n\t\"./kn.js\": \"gEQe\",\n\t\"./ko\": \"eBB/\",\n\t\"./ko.js\": \"eBB/\",\n\t\"./ky\": \"6cf8\",\n\t\"./ky.js\": \"6cf8\",\n\t\"./lb\": \"z3hR\",\n\t\"./lb.js\": \"z3hR\",\n\t\"./lo\": \"nE8X\",\n\t\"./lo.js\": \"nE8X\",\n\t\"./lt\": \"/6P1\",\n\t\"./lt.js\": \"/6P1\",\n\t\"./lv\": \"jxEH\",\n\t\"./lv.js\": \"jxEH\",\n\t\"./me\": \"svD2\",\n\t\"./me.js\": \"svD2\",\n\t\"./mi\": \"gEU3\",\n\t\"./mi.js\": \"gEU3\",\n\t\"./mk\": \"Ab7C\",\n\t\"./mk.js\": \"Ab7C\",\n\t\"./ml\": \"oo1B\",\n\t\"./ml.js\": \"oo1B\",\n\t\"./mr\": \"5vPg\",\n\t\"./mr.js\": \"5vPg\",\n\t\"./ms\": \"ooba\",\n\t\"./ms-my\": \"G++c\",\n\t\"./ms-my.js\": \"G++c\",\n\t\"./ms.js\": \"ooba\",\n\t\"./mt\": \"oCzW\",\n\t\"./mt.js\": \"oCzW\",\n\t\"./my\": \"F+2e\",\n\t\"./my.js\": \"F+2e\",\n\t\"./nb\": \"FlzV\",\n\t\"./nb.js\": \"FlzV\",\n\t\"./ne\": \"/mhn\",\n\t\"./ne.js\": \"/mhn\",\n\t\"./nl\": \"3K28\",\n\t\"./nl-be\": \"Bp2f\",\n\t\"./nl-be.js\": \"Bp2f\",\n\t\"./nl.js\": \"3K28\",\n\t\"./nn\": \"C7av\",\n\t\"./nn.js\": \"C7av\",\n\t\"./pa-in\": \"pfs9\",\n\t\"./pa-in.js\": \"pfs9\",\n\t\"./pl\": \"7LV+\",\n\t\"./pl.js\": \"7LV+\",\n\t\"./pt\": \"ZoSI\",\n\t\"./pt-br\": \"AoDM\",\n\t\"./pt-br.js\": \"AoDM\",\n\t\"./pt.js\": \"ZoSI\",\n\t\"./ro\": \"wT5f\",\n\t\"./ro.js\": \"wT5f\",\n\t\"./ru\": \"ulq9\",\n\t\"./ru.js\": \"ulq9\",\n\t\"./sd\": \"fW1y\",\n\t\"./sd.js\": \"fW1y\",\n\t\"./se\": \"5Omq\",\n\t\"./se.js\": \"5Omq\",\n\t\"./si\": \"Lgqo\",\n\t\"./si.js\": \"Lgqo\",\n\t\"./sk\": \"OUMt\",\n\t\"./sk.js\": \"OUMt\",\n\t\"./sl\": \"2s1U\",\n\t\"./sl.js\": \"2s1U\",\n\t\"./sq\": \"V0td\",\n\t\"./sq.js\": \"V0td\",\n\t\"./sr\": \"f4W3\",\n\t\"./sr-cyrl\": \"c1x4\",\n\t\"./sr-cyrl.js\": \"c1x4\",\n\t\"./sr.js\": \"f4W3\",\n\t\"./ss\": \"7Q8x\",\n\t\"./ss.js\": \"7Q8x\",\n\t\"./sv\": \"Fpqq\",\n\t\"./sv.js\": \"Fpqq\",\n\t\"./sw\": \"DSXN\",\n\t\"./sw.js\": \"DSXN\",\n\t\"./ta\": \"+7/x\",\n\t\"./ta.js\": \"+7/x\",\n\t\"./te\": \"Nlnz\",\n\t\"./te.js\": \"Nlnz\",\n\t\"./tet\": \"gUgh\",\n\t\"./tet.js\": \"gUgh\",\n\t\"./th\": \"XzD+\",\n\t\"./th.js\": \"XzD+\",\n\t\"./tl-ph\": \"3LKG\",\n\t\"./tl-ph.js\": \"3LKG\",\n\t\"./tlh\": \"m7yE\",\n\t\"./tlh.js\": \"m7yE\",\n\t\"./tr\": \"k+5o\",\n\t\"./tr.js\": \"k+5o\",\n\t\"./tzl\": \"iNtv\",\n\t\"./tzl.js\": \"iNtv\",\n\t\"./tzm\": \"FRPF\",\n\t\"./tzm-latn\": \"krPU\",\n\t\"./tzm-latn.js\": \"krPU\",\n\t\"./tzm.js\": \"FRPF\",\n\t\"./uk\": \"ntHu\",\n\t\"./uk.js\": \"ntHu\",\n\t\"./ur\": \"uSe8\",\n\t\"./ur.js\": \"uSe8\",\n\t\"./uz\": \"XU1s\",\n\t\"./uz-latn\": \"/bsm\",\n\t\"./uz-latn.js\": \"/bsm\",\n\t\"./uz.js\": \"XU1s\",\n\t\"./vi\": \"0X8Q\",\n\t\"./vi.js\": \"0X8Q\",\n\t\"./x-pseudo\": \"e/KL\",\n\t\"./x-pseudo.js\": \"e/KL\",\n\t\"./yo\": \"YXlc\",\n\t\"./yo.js\": \"YXlc\",\n\t\"./zh-cn\": \"Vz2w\",\n\t\"./zh-cn.js\": \"Vz2w\",\n\t\"./zh-hk\": \"ZUyn\",\n\t\"./zh-hk.js\": \"ZUyn\",\n\t\"./zh-tw\": \"BbgG\",\n\t\"./zh-tw.js\": \"BbgG\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"uslO\";\n\n/***/ }),\n\n/***/ \"w1qT\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"#define GLSLIFY 1\\nvarying vec3 vReflect;\\nvarying vec3 vRefract[3];\\n//varying float vReflectionFactor;\\nvarying vec3 worldNormal;\\n\\n#define PHYSICAL\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\tgl_FragColor = vec4( outgoingLight.rgb, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\"\n\n/***/ }),\n\n/***/ \"wIG/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(\"//Fk\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(\"Zrlr\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(\"wxAW\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _axios = __webpack_require__(\"mtWM\");\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _firebase = __webpack_require__(\"Sazm\");\n\nvar _firebase2 = _interopRequireDefault(_firebase);\n\n__webpack_require__(\"3VHS\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * API methods for interacting with data store\n */\nvar BTC = function () {\n  function BTC() {\n    (0, _classCallCheck3.default)(this, BTC);\n\n    this.init();\n  }\n\n  (0, _createClass3.default)(BTC, [{\n    key: 'init',\n    value: function init() {\n      this.initDataStore();\n    }\n  }, {\n    key: 'initDataStore',\n    value: function initDataStore() {\n      _firebase2.default.initializeApp({\n        apiKey: 'AIzaSyCkC_zpHJhgYkS-IbN_OwvZSjb4NfcN28g',\n        projectId: 'iohk-orpheus'\n        // authDomain: '### FIREBASE AUTH DOMAIN ###',\n      });\n\n      // Initialize Cloud Firestore through Firebase\n      this.blocks = _firebase2.default.firestore().collection('block');\n    }\n  }, {\n    key: 'formatTimeSeries',\n    value: function formatTimeSeries(_ref) {\n      var data = _ref.data;\n\n      var times = [];\n      var values = [];\n      data.values.forEach(function (_ref2) {\n        var x = _ref2.x,\n            y = _ref2.y;\n\n        times.push(x);\n        values.push(y);\n      });\n      return { times: times, values: values };\n    }\n\n    /**\n     * Get a list of BTC transaction over a time period\n     */\n\n  }, {\n    key: 'getTransactionFeesOverTime',\n    value: function getTransactionFeesOverTime(start, end) {\n      _axios2.default.get('https://api.blockchain.info/charts/transaction-fees?timespan=all&format=json&cors=true').then(this.formatTimeSeries);\n    }\n  }, {\n    key: 'getTransactionVolumeOverTime',\n    value: function getTransactionVolumeOverTime(start, end) {\n      _axios2.default.get('https://api.blockchain.info/charts/estimated-transaction-volume?format=json&cors=true').then(this.formatTimeSeries);\n    }\n\n    /**\n     * Get hash rate to nearest day\n     */\n\n  }, {\n    key: 'getHashRateforDay',\n    value: function getHashRateforDay(startTimestamp) {\n      var _this = this;\n\n      _axios2.default.get('https://api.blockchain.info/charts/hash-rate?timespan=1days&format=json&start=' + startTimestamp + '&cors=true').then(function (data) {\n        var hashRates = _this.formatTimeSeries(data);\n        return hashRates && hashRates.values[0] !== undefined && hashRates.values[0];\n      });\n    }\n\n    /**\n     * Attach hash rates to days array\n     */\n\n  }, {\n    key: 'assignHashRates',\n    value: function assignHashRates(daysArray) {\n      var _this2 = this;\n\n      var numberOfDays = daysArray.length;\n      var daysProcessed = 0;\n      return new _promise2.default(function (resolve, reject) {\n        daysArray.forEach(function (dayData) {\n          var timestampInMs = dayData.timeStamp / 1000;\n          _this2.getHashRateforDay(timestampInMs).then(function (hashRate) {\n            dayData.hashRate = hashRate;\n            daysProcessed++;\n            if (daysProcessed === numberOfDays) {\n              // add hash rate from previous day to current day if it doesn't exist\n              if (daysArray[0].hashRate === null) {\n                daysArray[0].hashRate = daysArray[1].hashRate;\n              }\n              resolve();\n            }\n          }).catch(function (error) {\n            daysProcessed++;\n            dayData.hashRate = null;\n            console.log(error);\n          });\n        });\n      });\n    }\n\n    /**\n     * Returns a block from a given hash\n     */\n\n  }, {\n    key: 'getBlock',\n    value: function getBlock(hash) {\n      return this.blocks.where('hash', '==', hash).get().then(function (_ref3) {\n        var docs = _ref3.docs;\n        return docs[0].data();\n      });\n    }\n\n    /**\n     * Returns all the blocks that occured on the current date 00:01 - 00:00\n     */\n\n  }, {\n    key: 'getBlocksOnDay',\n    value: function getBlocksOnDay(date, sortDateAsc) {\n      var fromDay = new Date(date);\n      fromDay.setMilliseconds(0);\n      fromDay.setSeconds(0);\n      fromDay.setMinutes(0);\n      fromDay.setHours(0);\n\n      var toDay = new Date(fromDay.getTime());\n      toDay.setHours(toDay.getHours() + 24);\n\n      return this.getBlocksSince(fromDay, toDay);\n    }\n  }, {\n    key: 'getBlocksSince',\n    value: function getBlocksSince(fromDate) {\n      var toDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n\n      return this.blocks.orderBy('time', 'asc').startAt(fromDate / 1000).endAt(toDate / 1000).get().then(function (_ref4) {\n        var docs = _ref4.docs;\n        return docs.map(function (doc) {\n          return doc.data();\n        });\n      });\n    }\n  }, {\n    key: 'getDay',\n    value: function getDay(date) {\n      var toDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n\n      return this.getBlocksSince(date, toDate).then(function (blocks) {\n        var fee = blocks.reduce(function (a, _ref5) {\n          var fee = _ref5.fee;\n          return a + fee;\n        }, 0) || 0;\n        var input = blocks.reduce(function (a, _ref6) {\n          var input = _ref6.input;\n          return a + input;\n        }, 0) || 0;\n        var output = blocks.reduce(function (a, _ref7) {\n          var output = _ref7.output;\n          return a + output;\n        }, 0) || 0;\n        // const value = blocks.reduce((a, b => a + b.value, 0))\n        return { date: date, blocks: blocks, fee: fee, input: input, output: output };\n      });\n    }\n  }, {\n    key: 'getLatestBlock',\n    value: function getLatestBlock() {\n      this.blocks.orderBy('time', 'desc').limit(1).get().then(function (_ref8) {\n        var docs = _ref8.docs;\n        return docs[0].data();\n      });\n    }\n  }, {\n    key: 'getTransactionsForBlock',\n    value: function getTransactionsForBlock(hash) {\n      var _this3 = this;\n\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this3.blocks.where('hash', '==', hash).get().then(function (_ref9) {\n          var docs = _ref9.docs;\n          return docs[0].ref.collection('metadata').get();\n        }).then(function (transactions) {\n          try {\n            resolve(transactions.docs[0].data().transaction);\n          } catch (error) {\n            console.log('Block: ' + hash + ' has no transactions in the DB!');\n            reject(error);\n          }\n        }).catch(function (error) {\n          if (tryCount < 5) {\n            console.log('Couldn\\'t get transactions for block, retrying...');\n            _this3.getTransactionsForBlock(hash, tryCount + 1).catch(function (error) {\n              reject(error);\n            });\n          } else {\n            console.log('Couldn\\'t get transactions for block, retry limit reached');\n            reject(error);\n          }\n        });\n      });\n    }\n  }]);\n  return BTC;\n}();\n\nexports.default = BTC;\n\n/***/ }),\n\n/***/ \"xFsn\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _extends2 = __webpack_require__(\"Dd8w\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _three = __webpack_require__(\"Ml+6\");\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _Stage = __webpack_require__(\"/w9m\");\n\nvar _Stage2 = _interopRequireDefault(_Stage);\n\nvar _MainScene = __webpack_require__(\"f82t\");\n\nvar _MainScene2 = _interopRequireDefault(_MainScene);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar orpheusApp = function orpheusApp() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var stage = new _Stage2.default();\n  return new _MainScene2.default((0, _extends3.default)({}, params, { stage: stage }));\n};\n\norpheusApp.canRun = window.WebGLRenderingContext !== null && window.Worker !== null;\norpheusApp.preload = function (_) {\n  return orpheusApp.textureLoader = new THREE.TextureLoader();\n};\n\nwindow.orpheusApp = orpheusApp;\n\n/***/ })\n\n},[\"xFsn\"]);\n\n\n// WEBPACK FOOTER //\n// static/js/app.4d5e6e6584f8fd78fc43.js","'use strict'\r\n\r\n// 3rd party libs\r\nimport * as THREE from 'three'\r\n\r\nimport {EffectComposer, ShaderPass, RenderPass, UnrealBloomPass} from './postprocessing/EffectComposer'\r\n\r\nimport FXAAShader from './shaders/FXAA'\r\nimport HueSaturationShader from './shaders/HueSaturation'\r\nimport RGBShiftShader from './shaders/RGBShift'\r\nimport VignetteShader from './shaders/Vignette'\r\nimport FilmShader from './shaders/Film'\r\nimport BrightnessContrastShader from './shaders/BrightnessContrast'\r\nimport HorizontalTiltShiftShader from './shaders/HorizontalTiltShiftShader'\r\n// import * as fboHelper from './helpers/fboHelper'\r\n// import EffectComposer2 from './EffectComposer'\r\n\r\n// Global config\r\nimport Config from './Config'\r\n\r\n/**\r\n * Container for everything concerned with rendering the scene\r\n */\r\nexport default class Stage {\r\n  constructor () {\r\n    this.init()\r\n  }\r\n\r\n  /**\r\n   * Bootstrap\r\n   */\r\n  init () {\r\n    this.initScene()\r\n    this.initCamera()\r\n    this.initRenderer()\r\n    this.initPost()\r\n    this.addLights()\r\n    this.addEvents()\r\n    this.resize()\r\n    this.animate()\r\n  }\r\n\r\n  initPost () {\r\n    this.composer = new EffectComposer(this.renderer)\r\n    this.composer.addPass(new RenderPass(this.scene, this.camera))\r\n\r\n    this.VignettePass = new ShaderPass(VignetteShader)\r\n    this.composer.addPass(this.VignettePass)\r\n\r\n    this.BrightnessContrastPass = new ShaderPass(BrightnessContrastShader)\r\n    this.composer.addPass(this.BrightnessContrastPass)\r\n\r\n    this.HueSaturationPass = new ShaderPass(HueSaturationShader)\r\n    this.composer.addPass(this.HueSaturationPass)\r\n\r\n    this.FXAAPass = new ShaderPass(FXAAShader)\r\n    // this.FXAAPass.renderToScreen = true\r\n    this.composer.addPass(this.FXAAPass)\r\n\r\n    this.RGBShiftPass = new ShaderPass(RGBShiftShader)\r\n    this.RGBShiftPass.renderToScreen = true\r\n    this.composer.addPass(this.RGBShiftPass)\r\n\r\n    /*this.bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 0.3, 0.3, 0.915) // 1.0, 9, 0.5, 512);\r\n    this.bloomPass.renderToScreen = true\r\n    this.composer.addPass(this.bloomPass) */\r\n\r\n    /* this.FilmShaderPass = new ShaderPass(FilmShader)\r\n    this.FilmShaderPass.renderToScreen = true\r\n    this.composer.addPass(this.FilmShaderPass) */\r\n  }\r\n\r\n  /**\r\n   * Create container scene\r\n   */\r\n  initScene () {\r\n    this.scene = new THREE.Scene()\r\n    this.scene.fog = new THREE.FogExp2(Config.scene.bgColor, Config.scene.fogFar)\r\n    this.scene.background = new THREE.Color(Config.scene.bgColor)\r\n  }\r\n\r\n  /**\r\n   * Set up stage camera with defaults\r\n   */\r\n  initCamera () {\r\n    // initial position of camera in the scene\r\n    this.defaultCameraPos = new THREE.Vector3(0.0, 0.0, 2500.0)\r\n\r\n    // xy bounds of the ambient camera movement\r\n    this.cameraDriftLimitMax = {\r\n      x: 100.0,\r\n      y: 100.0\r\n    }\r\n    this.cameraDriftLimitMin = {\r\n      x: -100.0,\r\n      y: -100.0\r\n    }\r\n\r\n    this.cameraMoveStep = 200.0 // how much to move the camera forward on z-axis\r\n    this.cameraLerpSpeed = 0.03 // speed of camera lerp\r\n\r\n    // scene camera\r\n    this.camera = new THREE.PerspectiveCamera(Config.camera.fov, window.innerWidth / window.innerHeight, 1, 5000)\r\n    this.camera.position.set(this.defaultCameraPos.x, this.defaultCameraPos.y, this.defaultCameraPos.z)\r\n    this.camera.updateMatrixWorld()\r\n\r\n    this.cameraPos = this.camera.position.clone() // current camera position\r\n    this.targetCameraPos = this.cameraPos.clone() // target camera position\r\n\r\n    this.cameraLookAtPos = new THREE.Vector3(0, 0, 0) // current camera lookat\r\n    this.targetCameraLookAt = new THREE.Vector3(0, 0, 0) // target camera lookat\r\n    this.camera.lookAt(this.cameraLookAtPos)\r\n\r\n    // set initial camera rotations\r\n    this.cameraFromQuaternion = new THREE.Quaternion().copy(this.camera.quaternion)\r\n    let cameraToRotation = new THREE.Euler().copy(this.camera.rotation)\r\n    this.cameraToQuaternion = new THREE.Quaternion().setFromEuler(cameraToRotation)\r\n    this.cameraMoveQuaternion = new THREE.Quaternion()\r\n  }\r\n\r\n  /**\r\n   * Set up default stage renderer\r\n   */\r\n  initRenderer () {\r\n    this.canvas = document.getElementById('stage')\r\n\r\n    this.canvas.style.touchAction = 'none'\r\n\r\n    this.renderer = new THREE.WebGLRenderer({\r\n      antialias: Config.scene.antialias,\r\n      canvas: this.canvas\r\n      // alpha: true\r\n    })\r\n\r\n    this.renderer.setClearColor(Config.scene.bgColor, 0.0)\r\n    this.renderer.setPixelRatio(window.devicePixelRatio)\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n    this.renderer.autoClear = true\r\n    this.renderer.sortObjects = false\r\n\r\n    // fboHelper.init(this.renderer)\r\n    this.composer = new EffectComposer(this.renderer)\r\n  }\r\n\r\n  /**\r\n   * Stage events\r\n   */\r\n  addEvents () {\r\n    // scene\r\n    this.preUpdate = new Event('preUpdate') // event fired at start of update\r\n    this.postUpdate = new Event('postUpdate') // event fired at end of udpate\r\n\r\n    // camera\r\n    this.cameraMoveEvent = new Event('cameraMove') // event fired when camera is moved\r\n\r\n    // current mouse position\r\n    this.mousePos = new THREE.Vector2()\r\n\r\n    // target mouse position\r\n    this.targetMousePos = new THREE.Vector2()\r\n\r\n    // event fired when mouse is moved\r\n    document.addEventListener('mousemove', this.onDocumentMouseMove.bind(this), false)\r\n\r\n    // function _getTouchBound (fn) {\r\n    //   return function (evt) {\r\n    //     fn.call(this, evt.changedTouches[0] || evt.touches[0])\r\n    //   }\r\n    // }\r\n    // document.addEventListener('touchmove', _getTouchBound(this.onDocumentMouseMove))\r\n    this.canvas.addEventListener('touchmove', evt => {\r\n      evt.preventDefault()\r\n      this.onDocumentMouseMove(evt.changedTouches[0] || evt.touches[0])\r\n    })\r\n\r\n    // window resize event\r\n    window.addEventListener('resize', this.resize.bind(this), false)\r\n  }\r\n\r\n  /**\r\n   * Add lights to the stage\r\n   */\r\n  addLights () {\r\n    let ambLight = new THREE.AmbientLight(0xffffff)\r\n    this.scene.add(ambLight)\r\n\r\n    this.pointLight = new THREE.PointLight(0xffffff, 5, 5000, 3)\r\n    this.scene.add(this.pointLight)\r\n  }\r\n\r\n  /**\r\n   * Window resize\r\n   */\r\n  resize () {\r\n    this.camera.aspect = window.innerWidth / window.innerHeight\r\n    this.camera.updateProjectionMatrix()\r\n\r\n    this.FXAAPass.material.uniforms.resolution.value = new THREE.Vector2(1 / window.innerWidth, 1 / window.innerHeight)\r\n\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n    this.composer.setSize(window.innerWidth, window.innerHeight)\r\n  }\r\n\r\n  /**\r\n   * Set target mouse position\r\n   */\r\n  onDocumentMouseMove (event) {\r\n    const rect = this.renderer.domElement.getBoundingClientRect()\r\n    let x = event.clientX - rect.left\r\n    let y = event.clientY - rect.top\r\n    this.targetMousePos.x = x / window.innerWidth * 2 - 1\r\n    this.targetMousePos.y = 1 - y / window.innerHeight * 2\r\n  }\r\n\r\n  /**\r\n   * Lerp current mouse position to target position\r\n   */\r\n  updateMouse () {\r\n    this.mousePos.lerp(new THREE.Vector2(this.targetMousePos.x, this.targetMousePos.y), this.cameraLerpSpeed)\r\n  }\r\n\r\n  /**\r\n   * Move camera based on mouse position\r\n   */\r\n  cameraFollowMouse () {\r\n    document.dispatchEvent(this.cameraMoveEvent)\r\n\r\n    this.camera.lookAt(this.cameraLookAtPos)\r\n    this.targetCameraPos.x += this.mousePos.x\r\n    this.targetCameraPos.y += this.mousePos.y\r\n\r\n    if (this.targetCameraPos.x > this.cameraDriftLimitMax.x) {\r\n      this.targetCameraPos.x = this.cameraDriftLimitMax.x - 1\r\n    }\r\n    if (this.targetCameraPos.y > this.cameraDriftLimitMax.y) {\r\n      this.targetCameraPos.y = this.cameraDriftLimitMax.y - 1\r\n    }\r\n    if (this.targetCameraPos.x < this.cameraDriftLimitMin.x) {\r\n      this.targetCameraPos.x = this.cameraDriftLimitMin.x + 1\r\n    }\r\n    if (this.targetCameraPos.y < this.cameraDriftLimitMin.y) {\r\n      this.targetCameraPos.y = this.cameraDriftLimitMin.y + 1\r\n    }\r\n\r\n    // lerp camera posiiton to target\r\n    this.cameraPos.lerp(this.targetCameraPos, this.cameraLerpSpeed)\r\n    this.camera.position.copy(this.cameraPos)\r\n\r\n    // constantly look at target\r\n    this.cameraLookAtPos.lerp(this.targetCameraLookAt, this.cameraLerpSpeed)\r\n  }\r\n\r\n  /**\r\n   * Called each animation frame\r\n   */\r\n  update () {\r\n    document.dispatchEvent(this.preUpdate)\r\n\r\n    this.updateMouse()\r\n    this.cameraFollowMouse()\r\n\r\n    this.render()\r\n\r\n    // this.dispatchEvent(this.postUpdate)\r\n  }\r\n\r\n  render () {\r\n    this.composer.render()\r\n  }\r\n\r\n  /**\r\n   * Animation loop\r\n   */\r\n  animate () {\r\n    this.reqID = requestAnimationFrame(this.animate.bind(this))\r\n    this.update()\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Stage.js","(function () {\n  'use strict'\n\n    /**\n     * fromArray()\n     *\n     * Generates a Merkle Tree from an array with the arguments passed in. The\n     * array cannot be empty. It can contain either values to be hashed, or an\n     * actual list of hashes.\n     *\n     * @param {object} args An object containing the arguments to construct\n     *                      the Tree. See the README for more info.\n     * @param {callback} cb An object containing the Merkle Tree. See\n     *                      the README for more info.\n     *\n     */\n  function fromArray (args, cb) {\n    var array\n    var hashalgo\n    var hashlist\n\n    if (!args.array || args.array.length === 0) {\n      cb('An array with at least 1 element is required', null)\n      return null\n    } else {\n      array = args.array\n\n      hashalgo = 'md5'\n\n      hashlist = true\n\n      // Import dependencies\n      var HashArray = require('./lib/hash-array')\n      var genMerkle = require('./lib/merkle-gen')\n\n      var arrayHasher = new HashArray(hashalgo, hashlist)\n\n      const fastMap = arrayHasher.hashElements(array)//, function (fastMap) {\n\n      // Generate a Merkle Tree from the leaves\n      const treeObj = genMerkle(fastMap, hashalgo)//, function (tree) {\n        \n      let sortedTree\n      for (var key in treeObj) {\n        if (treeObj.hasOwnProperty(key)) {\n          var element = treeObj[key]\n          if( element.type === 'root' ){\n             element.parent = null\n          } else if (element.type === 'node' || element.type === 'leaf' ) {\n            element.parent = treeObj[element.parent]\n          }\n          if (element.type === 'root' || element.type === 'node') {\n            \n            element.children = {}\n            element.children.left = treeObj[element.left]\n            element.children.right = treeObj[element.right]\n            if (element.type === 'root') {\n              sortedTree = element\n            }\n          }\n        }\n      }\n\n      // Get a flat heirachy sorted by depth\n      let tree = Object.values(treeObj)\n      tree.sort((a, b) => b.level - a.level)\n\n      return { tree, sortedTree }\n\n    }\n  }\n\n    // Export the fromArray() and fromFile() functions\n  module.exports = {\n    fromArray: fromArray\n  }\n})()\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/merkle-tree-gen/index.js","module.exports = \"#define GLSLIFY 1\\nuniform float size;\\nuniform float scale;\\nuniform float uTime;\\nuniform sampler2D uColor;\\nuniform float pointCount;\\n\\nattribute float id;\\nvarying float display;\\n\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\n\\t// get color from texture\\n\\tvec4 sampleColor = texture2D(uColor, vec2((id / 3.0) / pointCount, 0.0));\\n\\n\\tfloat mod3 = mod(id, 3.0);\\n\\n\\tif (mod3 == 0.0) {\\n\\t\\tdisplay = float(sampleColor.r);\\n\\t}\\n\\tif (mod3 == 1.0) {\\n\\t\\tdisplay = float(sampleColor.g);\\n\\t}\\n\\tif (mod3 == 2.0) {\\n\\t\\tdisplay = float(sampleColor.b);\\n\\t}\\n\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/materials/PointsMaterial/PointsMaterial.vert\n// module id = 1084\n// module chunks = 1","import * as THREE from 'three'\r\nimport vertexShader from './BlockMaterial.vert'\r\nimport fragmentShader from './BlockMaterial.frag'\r\n\r\nexport default class BlockMaterial extends THREE.MeshStandardMaterial {\r\n  constructor (cfg) {\r\n    super(cfg)\r\n    this.type = 'ShaderMaterial'\r\n\r\n    this.uniforms = THREE.ShaderLib.standard.uniforms\r\n\r\n    this.uniforms.uRefractionRatio = {\r\n      type: 'f',\r\n      value: 0.8\r\n    }\r\n\r\n    this.uniforms.uFresnelBias = {\r\n      type: 'f',\r\n      value: 0.1\r\n    }\r\n\r\n    this.uniforms.uFresnelScale = {\r\n      type: 'f',\r\n      value: 0.1\r\n    }\r\n\r\n    this.uniforms.uFresnelPower = {\r\n      type: 'f',\r\n      value: 20.0\r\n    }\r\n\r\n    this.vertexShader = vertexShader\r\n    this.fragmentShader = fragmentShader\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/materials/BlockMaterial/BlockMaterial.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform float uTime;\\nuniform sampler2D uColor;\\n\\nvarying float display;\\n\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nfloat circle(in float dist, in float radius) {\\n\\treturn 1.0 - smoothstep(\\n\\t\\tradius - (radius * 10.0),\\n\\t\\tradius + (radius * 0.01),\\n        dot(dist, dist) * 3.0\\n\\t);\\n}\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n//\\t#include <alphatest_fragment>\\n\\n\\tvec2 uv = ( vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\n\\tvec2 pos = uv;\\n\\tpos -= 0.5;\\n\\n\\tfloat dist = length(pos);\\n\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tvec3 color = vec3(circle(dist, 0.9));\\n\\tcolor *= sin((dist * 100.0) - (uTime * 30.0));\\n\\tcolor *= diffuseColor.rgb;\\n\\tcolor *= display;\\n\\n\\tgl_FragColor = vec4( color, 1.0 );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t//#include <fog_fragment>\\n\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/materials/PointsMaterial/PointsMaterial.frag\n// module id = 2nw3\n// module chunks = 1","const RGBShiftShader = {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    amount: { value: 0.00065 },\r\n    angle: { value: 0.1 }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    uniform sampler2D tDiffuse;\r\n    uniform float amount;\r\n    uniform float angle;\r\n    varying vec2 vUv;\r\n    void main() {\r\n    vec2 offset = amount * vec2( cos(angle), sin(angle));\r\n    vec4 cr = texture2D(tDiffuse, vUv + offset);\r\n    vec4 cga = texture2D(tDiffuse, vUv);\r\n    vec4 cb = texture2D(tDiffuse, vUv - offset);\r\n    gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\r\n    }\r\n  `\r\n}\r\n\r\nexport default RGBShiftShader\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/RGBShift.js","'use strict'\r\n\r\nconst Config = {\r\n  daysEitherSide: 4,\r\n  showGUI: true,\r\n  scene: {\r\n    bgColor: 0x26263c,\r\n    shadowsOn: false,\r\n    fogFar: 0.00040,\r\n    antialias: true\r\n  },\r\n  postProcessing: {\r\n    effectDownscaleDivisor: 2\r\n  },\r\n  camera: {\r\n    fov: 80\r\n  }\r\n}\r\n\r\nexport default Config\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Config.js","import * as THREE from 'three'\r\n\r\nconst FXAAShader = {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    resolution: { value: new THREE.Vector2(1 / window.innerWidth, 1 / window.innerHeight) }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    precision highp float;\r\n\r\n    uniform sampler2D tDiffuse;\r\n\r\n    uniform vec2 resolution;\r\n\r\n    varying vec2 vUv;\r\n\r\n    // FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // SDK Version: v3.00\r\n    // Email:       gameworks@nvidia.com\r\n    // Site:        http://developer.nvidia.com/\r\n    //\r\n    // Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\r\n    //\r\n    // Redistribution and use in source and binary forms, with or without\r\n    // modification, are permitted provided that the following conditions\r\n    // are met:\r\n    //  * Redistributions of source code must retain the above copyright\r\n    //    notice, this list of conditions and the following disclaimer.\r\n    //  * Redistributions in binary form must reproduce the above copyright\r\n    //    notice, this list of conditions and the following disclaimer in the\r\n    //    documentation and/or other materials provided with the distribution.\r\n    //  * Neither the name of NVIDIA CORPORATION nor the names of its\r\n    //    contributors may be used to endorse or promote products derived\r\n    //    from this software without specific prior written permission.\r\n    //\r\n    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AS IS AND ANY,\r\n    // EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n    // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n    // PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n    // CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n    // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n    // PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n    // PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n    // OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n    //\r\n    //----------------------------------------------------------------------------------\r\n\r\n    #define FXAA_PC 1\r\n    #define FXAA_GLSL_100 1\r\n    #define FXAA_QUALITY_PRESET 12\r\n\r\n    #define FXAA_GREEN_AS_LUMA 1\r\n\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_PC_CONSOLE\r\n        //\r\n        // The console algorithm for PC is included\r\n        // for developers targeting really low spec machines.\r\n        // Likely better to just run FXAA_PC, and use a really low preset.\r\n        //\r\n        #define FXAA_PC_CONSOLE 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_GLSL_120\r\n        #define FXAA_GLSL_120 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_GLSL_130\r\n        #define FXAA_GLSL_130 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_HLSL_3\r\n        #define FXAA_HLSL_3 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_HLSL_4\r\n        #define FXAA_HLSL_4 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_HLSL_5\r\n        #define FXAA_HLSL_5 0\r\n    #endif\r\n    /*==========================================================================*/\r\n    #ifndef FXAA_GREEN_AS_LUMA\r\n        //\r\n        // For those using non-linear color,\r\n        // and either not able to get luma in alpha, or not wanting to,\r\n        // this enables FXAA to run using green as a proxy for luma.\r\n        // So with this enabled, no need to pack luma in alpha.\r\n        //\r\n        // This will turn off AA on anything which lacks some amount of green.\r\n        // Pure red and blue or combination of only R and B, will get no AA.\r\n        //\r\n        // Might want to lower the settings for both,\r\n        //    fxaaConsoleEdgeThresholdMin\r\n        //    fxaaQualityEdgeThresholdMin\r\n        // In order to insure AA does not get turned off on colors\r\n        // which contain a minor amount of green.\r\n        //\r\n        // 1 = On.\r\n        // 0 = Off.\r\n        //\r\n        #define FXAA_GREEN_AS_LUMA 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_EARLY_EXIT\r\n        //\r\n        // Controls algorithms early exit path.,\r\n        // On PS3 turning this ON adds 2 cycles to the shader.\r\n        // On 360 turning this OFF adds 10ths of a millisecond to the shader.\r\n        // Turning this off on console will result in a more blurry image.\r\n        // So this defaults to on.\r\n        //\r\n        // 1 = On.\r\n        // 0 = Off.\r\n        //\r\n        #define FXAA_EARLY_EXIT 1\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_DISCARD\r\n        //\r\n        // Only valid for PC OpenGL currently.\r\n        // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\r\n        //\r\n        // 1 = Use discard on pixels which dont need AA.,\r\n        //     For APIs which enable concurrent TEX+ROP from same surface.\r\n        // 0 = Return unchanged color on pixels which dont need AA.,\r\n        //\r\n        #define FXAA_DISCARD 0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_FAST_PIXEL_OFFSET\r\n        //\r\n        // Used for GLSL 120 only.\r\n        //\r\n        // 1 = GL API supports fast pixel offsets\r\n        // 0 = do not use fast pixel offsets\r\n        //\r\n        #ifdef GL_EXT_gpu_shader4\r\n            #define FXAA_FAST_PIXEL_OFFSET 1\r\n        #endif\r\n        #ifdef GL_NV_gpu_shader5\r\n            #define FXAA_FAST_PIXEL_OFFSET 1\r\n        #endif\r\n        #ifdef GL_ARB_gpu_shader5\r\n            #define FXAA_FAST_PIXEL_OFFSET 1\r\n        #endif\r\n        #ifndef FXAA_FAST_PIXEL_OFFSET\r\n            #define FXAA_FAST_PIXEL_OFFSET 0\r\n        #endif\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #ifndef FXAA_GATHER4_ALPHA\r\n        //\r\n        // 1 = API supports gather4 on alpha channel.\r\n        // 0 = API does not support gather4 on alpha channel.\r\n        //\r\n        #if (FXAA_HLSL_5 == 1)\r\n            #define FXAA_GATHER4_ALPHA 1\r\n        #endif\r\n        #ifdef GL_ARB_gpu_shader5\r\n            #define FXAA_GATHER4_ALPHA 1\r\n        #endif\r\n        #ifdef GL_NV_gpu_shader5\r\n            #define FXAA_GATHER4_ALPHA 1\r\n        #endif\r\n        #ifndef FXAA_GATHER4_ALPHA\r\n            #define FXAA_GATHER4_ALPHA 0\r\n        #endif\r\n    #endif\r\n\r\n\r\n    /*============================================================================\r\n                            FXAA QUALITY - TUNING KNOBS\r\n    ------------------------------------------------------------------------------\r\n    NOTE the other tuning knobs are now in the shader function inputs!\r\n    ============================================================================*/\r\n    #ifndef FXAA_QUALITY_PRESET\r\n        //\r\n        // Choose the quality preset.\r\n        // This needs to be compiled into the shader as it effects code.\r\n        // Best option to include multiple presets is to\r\n        // in each shader define the preset, then include this file.\r\n        //\r\n        // OPTIONS\r\n        // -----------------------------------------------------------------------\r\n        // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\r\n        // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\r\n        // 39       - no dither, very expensive\r\n        //\r\n        // NOTES\r\n        // -----------------------------------------------------------------------\r\n        // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\r\n        // 13 = about same speed as FXAA 3.9 and better than 12\r\n        // 23 = closest to FXAA 3.9 visually and performance wise\r\n        //  _ = the lowest digit is directly related to performance\r\n        // _  = the highest digit is directly related to style\r\n        //\r\n        #define FXAA_QUALITY_PRESET 12\r\n    #endif\r\n\r\n\r\n    /*============================================================================\r\n\r\n                               FXAA QUALITY - PRESETS\r\n\r\n    ============================================================================*/\r\n\r\n    /*============================================================================\r\n                         FXAA QUALITY - MEDIUM DITHER PRESETS\r\n    ============================================================================*/\r\n    #if (FXAA_QUALITY_PRESET == 10)\r\n        #define FXAA_QUALITY_PS 3\r\n        #define FXAA_QUALITY_P0 1.5\r\n        #define FXAA_QUALITY_P1 3.0\r\n        #define FXAA_QUALITY_P2 12.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 11)\r\n        #define FXAA_QUALITY_PS 4\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 3.0\r\n        #define FXAA_QUALITY_P3 12.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 12)\r\n        #define FXAA_QUALITY_PS 5\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 4.0\r\n        #define FXAA_QUALITY_P4 12.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 13)\r\n        #define FXAA_QUALITY_PS 6\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 4.0\r\n        #define FXAA_QUALITY_P5 12.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 14)\r\n        #define FXAA_QUALITY_PS 7\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 4.0\r\n        #define FXAA_QUALITY_P6 12.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 15)\r\n        #define FXAA_QUALITY_PS 8\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 2.0\r\n        #define FXAA_QUALITY_P6 4.0\r\n        #define FXAA_QUALITY_P7 12.0\r\n    #endif\r\n\r\n    /*============================================================================\r\n                         FXAA QUALITY - LOW DITHER PRESETS\r\n    ============================================================================*/\r\n    #if (FXAA_QUALITY_PRESET == 20)\r\n        #define FXAA_QUALITY_PS 3\r\n        #define FXAA_QUALITY_P0 1.5\r\n        #define FXAA_QUALITY_P1 2.0\r\n        #define FXAA_QUALITY_P2 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 21)\r\n        #define FXAA_QUALITY_PS 4\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 22)\r\n        #define FXAA_QUALITY_PS 5\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 23)\r\n        #define FXAA_QUALITY_PS 6\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 24)\r\n        #define FXAA_QUALITY_PS 7\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 3.0\r\n        #define FXAA_QUALITY_P6 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 25)\r\n        #define FXAA_QUALITY_PS 8\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 2.0\r\n        #define FXAA_QUALITY_P6 4.0\r\n        #define FXAA_QUALITY_P7 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 26)\r\n        #define FXAA_QUALITY_PS 9\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 2.0\r\n        #define FXAA_QUALITY_P6 2.0\r\n        #define FXAA_QUALITY_P7 4.0\r\n        #define FXAA_QUALITY_P8 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 27)\r\n        #define FXAA_QUALITY_PS 10\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 2.0\r\n        #define FXAA_QUALITY_P6 2.0\r\n        #define FXAA_QUALITY_P7 2.0\r\n        #define FXAA_QUALITY_P8 4.0\r\n        #define FXAA_QUALITY_P9 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 28)\r\n        #define FXAA_QUALITY_PS 11\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 2.0\r\n        #define FXAA_QUALITY_P6 2.0\r\n        #define FXAA_QUALITY_P7 2.0\r\n        #define FXAA_QUALITY_P8 2.0\r\n        #define FXAA_QUALITY_P9 4.0\r\n        #define FXAA_QUALITY_P10 8.0\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_QUALITY_PRESET == 29)\r\n        #define FXAA_QUALITY_PS 12\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.5\r\n        #define FXAA_QUALITY_P2 2.0\r\n        #define FXAA_QUALITY_P3 2.0\r\n        #define FXAA_QUALITY_P4 2.0\r\n        #define FXAA_QUALITY_P5 2.0\r\n        #define FXAA_QUALITY_P6 2.0\r\n        #define FXAA_QUALITY_P7 2.0\r\n        #define FXAA_QUALITY_P8 2.0\r\n        #define FXAA_QUALITY_P9 2.0\r\n        #define FXAA_QUALITY_P10 4.0\r\n        #define FXAA_QUALITY_P11 8.0\r\n    #endif\r\n\r\n    /*============================================================================\r\n                         FXAA QUALITY - EXTREME QUALITY\r\n    ============================================================================*/\r\n    #if (FXAA_QUALITY_PRESET == 39)\r\n        #define FXAA_QUALITY_PS 12\r\n        #define FXAA_QUALITY_P0 1.0\r\n        #define FXAA_QUALITY_P1 1.0\r\n        #define FXAA_QUALITY_P2 1.0\r\n        #define FXAA_QUALITY_P3 1.0\r\n        #define FXAA_QUALITY_P4 1.0\r\n        #define FXAA_QUALITY_P5 1.5\r\n        #define FXAA_QUALITY_P6 2.0\r\n        #define FXAA_QUALITY_P7 2.0\r\n        #define FXAA_QUALITY_P8 2.0\r\n        #define FXAA_QUALITY_P9 2.0\r\n        #define FXAA_QUALITY_P10 4.0\r\n        #define FXAA_QUALITY_P11 8.0\r\n    #endif\r\n\r\n\r\n\r\n    /*============================================================================\r\n\r\n                                    API PORTING\r\n\r\n    ============================================================================*/\r\n    #if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\r\n        #define FxaaBool bool\r\n        #define FxaaDiscard discard\r\n        #define FxaaFloat float\r\n        #define FxaaFloat2 vec2\r\n        #define FxaaFloat3 vec3\r\n        #define FxaaFloat4 vec4\r\n        #define FxaaHalf float\r\n        #define FxaaHalf2 vec2\r\n        #define FxaaHalf3 vec3\r\n        #define FxaaHalf4 vec4\r\n        #define FxaaInt2 ivec2\r\n        #define FxaaSat(x) clamp(x, 0.0, 1.0)\r\n        #define FxaaTex sampler2D\r\n    #else\r\n        #define FxaaBool bool\r\n        #define FxaaDiscard clip(-1)\r\n        #define FxaaFloat float\r\n        #define FxaaFloat2 float2\r\n        #define FxaaFloat3 float3\r\n        #define FxaaFloat4 float4\r\n        #define FxaaHalf half\r\n        #define FxaaHalf2 half2\r\n        #define FxaaHalf3 half3\r\n        #define FxaaHalf4 half4\r\n        #define FxaaSat(x) saturate(x)\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_GLSL_100 == 1)\r\n      #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\r\n      #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_GLSL_120 == 1)\r\n        // Requires,\r\n        //  #version 120\r\n        // And at least,\r\n        //  #extension GL_EXT_gpu_shader4 : enable\r\n        //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\r\n        #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\r\n        #if (FXAA_FAST_PIXEL_OFFSET == 1)\r\n            #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\r\n        #else\r\n            #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\r\n        #endif\r\n        #if (FXAA_GATHER4_ALPHA == 1)\r\n            // use #extension GL_ARB_gpu_shader5 : enable\r\n            #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\r\n            #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\r\n            #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\r\n            #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\r\n        #endif\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_GLSL_130 == 1)\r\n        // Requires \"#version 130\" or better\r\n        #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\r\n        #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\r\n        #if (FXAA_GATHER4_ALPHA == 1)\r\n            // use #extension GL_ARB_gpu_shader5 : enable\r\n            #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\r\n            #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\r\n            #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\r\n            #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\r\n        #endif\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_HLSL_3 == 1)\r\n        #define FxaaInt2 float2\r\n        #define FxaaTex sampler2D\r\n        #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\r\n        #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_HLSL_4 == 1)\r\n        #define FxaaInt2 int2\r\n        struct FxaaTex { SamplerState smpl; Texture2D tex; };\r\n        #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\r\n        #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\r\n    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n    #if (FXAA_HLSL_5 == 1)\r\n        #define FxaaInt2 int2\r\n        struct FxaaTex { SamplerState smpl; Texture2D tex; };\r\n        #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\r\n        #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\r\n        #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\r\n        #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\r\n        #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\r\n        #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\r\n    #endif\r\n\r\n\r\n    /*============================================================================\r\n                       GREEN AS LUMA OPTION SUPPORT FUNCTION\r\n    ============================================================================*/\r\n    #if (FXAA_GREEN_AS_LUMA == 0)\r\n        FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\r\n    #else\r\n        FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\r\n    #endif\r\n\r\n\r\n\r\n\r\n    /*============================================================================\r\n\r\n                                 FXAA3 QUALITY - PC\r\n\r\n    ============================================================================*/\r\n    #if (FXAA_PC == 1)\r\n    /*--------------------------------------------------------------------------*/\r\n    FxaaFloat4 FxaaPixelShader(\r\n        //\r\n        // Use noperspective interpolation here (turn off perspective interpolation).\r\n        // {xy} = center of pixel\r\n        FxaaFloat2 pos,\r\n        //\r\n        // Used only for FXAA Console, and not used on the 360 version.\r\n        // Use noperspective interpolation here (turn off perspective interpolation).\r\n        // {xy_} = upper left of pixel\r\n        // {_zw} = lower right of pixel\r\n        FxaaFloat4 fxaaConsolePosPos,\r\n        //\r\n        // Input color texture.\r\n        // {rgb_} = color in linear or perceptual color space\r\n        // if (FXAA_GREEN_AS_LUMA == 0)\r\n        //     {__a} = luma in perceptual color space (not linear)\r\n        FxaaTex tex,\r\n        //\r\n        // Only used on the optimized 360 version of FXAA Console.\r\n        // For everything but 360, just use the same input here as for \"tex\".\r\n        // For 360, same texture, just alias with a 2nd sampler.\r\n        // This sampler needs to have an exponent bias of -1.\r\n        FxaaTex fxaaConsole360TexExpBiasNegOne,\r\n        //\r\n        // Only used on the optimized 360 version of FXAA Console.\r\n        // For everything but 360, just use the same input here as for \"tex\".\r\n        // For 360, same texture, just alias with a 3nd sampler.\r\n        // This sampler needs to have an exponent bias of -2.\r\n        FxaaTex fxaaConsole360TexExpBiasNegTwo,\r\n        //\r\n        // Only used on FXAA Quality.\r\n        // This must be from a constant/uniform.\r\n        // {x_} = 1.0/screenWidthInPixels\r\n        // {_y} = 1.0/screenHeightInPixels\r\n        FxaaFloat2 fxaaQualityRcpFrame,\r\n        //\r\n        // Only used on FXAA Console.\r\n        // This must be from a constant/uniform.\r\n        // This effects sub-pixel AA quality and inversely sharpness.\r\n        //   Where N ranges between,\r\n        //     N = 0.50 (default)\r\n        //     N = 0.33 (sharper)\r\n        // {x__} = -N/screenWidthInPixels\r\n        // {_y_} = -N/screenHeightInPixels\r\n        // {_z_} =  N/screenWidthInPixels\r\n        // {__w} =  N/screenHeightInPixels\r\n        FxaaFloat4 fxaaConsoleRcpFrameOpt,\r\n        //\r\n        // Only used on FXAA Console.\r\n        // Not used on 360, but used on PS3 and PC.\r\n        // This must be from a constant/uniform.\r\n        // {x__} = -2.0/screenWidthInPixels\r\n        // {_y_} = -2.0/screenHeightInPixels\r\n        // {_z_} =  2.0/screenWidthInPixels\r\n        // {__w} =  2.0/screenHeightInPixels\r\n        FxaaFloat4 fxaaConsoleRcpFrameOpt2,\r\n        //\r\n        // Only used on FXAA Console.\r\n        // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\r\n        // This must be from a constant/uniform.\r\n        // {x__} =  8.0/screenWidthInPixels\r\n        // {_y_} =  8.0/screenHeightInPixels\r\n        // {_z_} = -4.0/screenWidthInPixels\r\n        // {__w} = -4.0/screenHeightInPixels\r\n        FxaaFloat4 fxaaConsole360RcpFrameOpt2,\r\n        //\r\n        // Only used on FXAA Quality.\r\n        // This used to be the FXAA_QUALITY_SUBPIX define.\r\n        // It is here now to allow easier tuning.\r\n        // Choose the amount of sub-pixel aliasing removal.\r\n        // This can effect sharpness.\r\n        //   1.00 - upper limit (softer)\r\n        //   0.75 - default amount of filtering\r\n        //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\r\n        //   0.25 - almost off\r\n        //   0.00 - completely off\r\n        FxaaFloat fxaaQualitySubpix,\r\n        //\r\n        // Only used on FXAA Quality.\r\n        // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\r\n        // It is here now to allow easier tuning.\r\n        // The minimum amount of local contrast required to apply algorithm.\r\n        //   0.333 - too little (faster)\r\n        //   0.250 - low quality\r\n        //   0.166 - default\r\n        //   0.125 - high quality\r\n        //   0.063 - overkill (slower)\r\n        FxaaFloat fxaaQualityEdgeThreshold,\r\n        //\r\n        // Only used on FXAA Quality.\r\n        // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\r\n        // It is here now to allow easier tuning.\r\n        // Trims the algorithm from processing darks.\r\n        //   0.0833 - upper limit (default, the start of visible unfiltered edges)\r\n        //   0.0625 - high quality (faster)\r\n        //   0.0312 - visible limit (slower)\r\n        // Special notes when using FXAA_GREEN_AS_LUMA,\r\n        //   Likely want to set this to zero.\r\n        //   As colors that are mostly not-green\r\n        //   will appear very dark in the green channel!\r\n        //   Tune by looking at mostly non-green content,\r\n        //   then start at zero and increase until aliasing is a problem.\r\n        FxaaFloat fxaaQualityEdgeThresholdMin,\r\n        //\r\n        // Only used on FXAA Console.\r\n        // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\r\n        // It is here now to allow easier tuning.\r\n        // This does not effect PS3, as this needs to be compiled in.\r\n        //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\r\n        //   Due to the PS3 being ALU bound,\r\n        //   there are only three safe values here: 2 and 4 and 8.\r\n        //   These options use the shaders ability to a free *|/ by 2|4|8.\r\n        // For all other platforms can be a non-power of two.\r\n        //   8.0 is sharper (default!!!)\r\n        //   4.0 is softer\r\n        //   2.0 is really soft (good only for vector graphics inputs)\r\n        FxaaFloat fxaaConsoleEdgeSharpness,\r\n        //\r\n        // Only used on FXAA Console.\r\n        // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\r\n        // It is here now to allow easier tuning.\r\n        // This does not effect PS3, as this needs to be compiled in.\r\n        //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\r\n        //   Due to the PS3 being ALU bound,\r\n        //   there are only two safe values here: 1/4 and 1/8.\r\n        //   These options use the shaders ability to a free *|/ by 2|4|8.\r\n        // The console setting has a different mapping than the quality setting.\r\n        // Other platforms can use other values.\r\n        //   0.125 leaves less aliasing, but is softer (default!!!)\r\n        //   0.25 leaves more aliasing, and is sharper\r\n        FxaaFloat fxaaConsoleEdgeThreshold,\r\n        //\r\n        // Only used on FXAA Console.\r\n        // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\r\n        // It is here now to allow easier tuning.\r\n        // Trims the algorithm from processing darks.\r\n        // The console setting has a different mapping than the quality setting.\r\n        // This only applies when FXAA_EARLY_EXIT is 1.\r\n        // This does not apply to PS3,\r\n        // PS3 was simplified to avoid more shader instructions.\r\n        //   0.06 - faster but more aliasing in darks\r\n        //   0.05 - default\r\n        //   0.04 - slower and less aliasing in darks\r\n        // Special notes when using FXAA_GREEN_AS_LUMA,\r\n        //   Likely want to set this to zero.\r\n        //   As colors that are mostly not-green\r\n        //   will appear very dark in the green channel!\r\n        //   Tune by looking at mostly non-green content,\r\n        //   then start at zero and increase until aliasing is a problem.\r\n        FxaaFloat fxaaConsoleEdgeThresholdMin,\r\n        //\r\n        // Extra constants for 360 FXAA Console only.\r\n        // Use zeros or anything else for other platforms.\r\n        // These must be in physical constant registers and NOT immedates.\r\n        // Immedates will result in compiler un-optimizing.\r\n        // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\r\n        FxaaFloat4 fxaaConsole360ConstDir\r\n    ) {\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat2 posM;\r\n        posM.x = pos.x;\r\n        posM.y = pos.y;\r\n        #if (FXAA_GATHER4_ALPHA == 1)\r\n            #if (FXAA_DISCARD == 0)\r\n                FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\r\n                #if (FXAA_GREEN_AS_LUMA == 0)\r\n                    #define lumaM rgbyM.w\r\n                #else\r\n                    #define lumaM rgbyM.y\r\n                #endif\r\n            #endif\r\n            #if (FXAA_GREEN_AS_LUMA == 0)\r\n                FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\r\n                FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\r\n            #else\r\n                FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\r\n                FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\r\n            #endif\r\n            #if (FXAA_DISCARD == 1)\r\n                #define lumaM luma4A.w\r\n            #endif\r\n            #define lumaE luma4A.z\r\n            #define lumaS luma4A.x\r\n            #define lumaSE luma4A.y\r\n            #define lumaNW luma4B.w\r\n            #define lumaN luma4B.z\r\n            #define lumaW luma4B.x\r\n        #else\r\n            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\r\n            #if (FXAA_GREEN_AS_LUMA == 0)\r\n                #define lumaM rgbyM.w\r\n            #else\r\n                #define lumaM rgbyM.y\r\n            #endif\r\n            #if (FXAA_GLSL_100 == 1)\r\n              FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\r\n            #else\r\n              FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\r\n            #endif\r\n        #endif\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat maxSM = max(lumaS, lumaM);\r\n        FxaaFloat minSM = min(lumaS, lumaM);\r\n        FxaaFloat maxESM = max(lumaE, maxSM);\r\n        FxaaFloat minESM = min(lumaE, minSM);\r\n        FxaaFloat maxWN = max(lumaN, lumaW);\r\n        FxaaFloat minWN = min(lumaN, lumaW);\r\n        FxaaFloat rangeMax = max(maxWN, maxESM);\r\n        FxaaFloat rangeMin = min(minWN, minESM);\r\n        FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\r\n        FxaaFloat range = rangeMax - rangeMin;\r\n        FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\r\n        FxaaBool earlyExit = range < rangeMaxClamped;\r\n    /*--------------------------------------------------------------------------*/\r\n        if(earlyExit)\r\n            #if (FXAA_DISCARD == 1)\r\n                FxaaDiscard;\r\n            #else\r\n                return rgbyM;\r\n            #endif\r\n    /*--------------------------------------------------------------------------*/\r\n        #if (FXAA_GATHER4_ALPHA == 0)\r\n            #if (FXAA_GLSL_100 == 1)\r\n              FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\r\n            #else\r\n              FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\r\n              FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\r\n            #endif\r\n        #else\r\n            FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\r\n            FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\r\n        #endif\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat lumaNS = lumaN + lumaS;\r\n        FxaaFloat lumaWE = lumaW + lumaE;\r\n        FxaaFloat subpixRcpRange = 1.0/range;\r\n        FxaaFloat subpixNSWE = lumaNS + lumaWE;\r\n        FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\r\n        FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat lumaNESE = lumaNE + lumaSE;\r\n        FxaaFloat lumaNWNE = lumaNW + lumaNE;\r\n        FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\r\n        FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat lumaNWSW = lumaNW + lumaSW;\r\n        FxaaFloat lumaSWSE = lumaSW + lumaSE;\r\n        FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\r\n        FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\r\n        FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\r\n        FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\r\n        FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\r\n        FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\r\n        FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\r\n        FxaaBool horzSpan = edgeHorz >= edgeVert;\r\n        FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\r\n    /*--------------------------------------------------------------------------*/\r\n        if(!horzSpan) lumaN = lumaW;\r\n        if(!horzSpan) lumaS = lumaE;\r\n        if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\r\n        FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat gradientN = lumaN - lumaM;\r\n        FxaaFloat gradientS = lumaS - lumaM;\r\n        FxaaFloat lumaNN = lumaN + lumaM;\r\n        FxaaFloat lumaSS = lumaS + lumaM;\r\n        FxaaBool pairN = abs(gradientN) >= abs(gradientS);\r\n        FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\r\n        if(pairN) lengthSign = -lengthSign;\r\n        FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat2 posB;\r\n        posB.x = posM.x;\r\n        posB.y = posM.y;\r\n        FxaaFloat2 offNP;\r\n        offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\r\n        offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\r\n        if(!horzSpan) posB.x += lengthSign * 0.5;\r\n        if( horzSpan) posB.y += lengthSign * 0.5;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat2 posN;\r\n        posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\r\n        posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\r\n        FxaaFloat2 posP;\r\n        posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\r\n        posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\r\n        FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\r\n        FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\r\n        FxaaFloat subpixE = subpixC * subpixC;\r\n        FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\r\n    /*--------------------------------------------------------------------------*/\r\n        if(!pairN) lumaNN = lumaSS;\r\n        FxaaFloat gradientScaled = gradient * 1.0/4.0;\r\n        FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\r\n        FxaaFloat subpixF = subpixD * subpixE;\r\n        FxaaBool lumaMLTZero = lumaMM < 0.0;\r\n    /*--------------------------------------------------------------------------*/\r\n        lumaEndN -= lumaNN * 0.5;\r\n        lumaEndP -= lumaNN * 0.5;\r\n        FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\r\n        FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\r\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\r\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\r\n        FxaaBool doneNP = (!doneN) || (!doneP);\r\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\r\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\r\n    /*--------------------------------------------------------------------------*/\r\n        if(doneNP) {\r\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n            doneN = abs(lumaEndN) >= gradientScaled;\r\n            doneP = abs(lumaEndP) >= gradientScaled;\r\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\r\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\r\n            doneNP = (!doneN) || (!doneP);\r\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\r\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\r\n    /*--------------------------------------------------------------------------*/\r\n            #if (FXAA_QUALITY_PS > 3)\r\n            if(doneNP) {\r\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                doneN = abs(lumaEndN) >= gradientScaled;\r\n                doneP = abs(lumaEndP) >= gradientScaled;\r\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\r\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\r\n                doneNP = (!doneN) || (!doneP);\r\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\r\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\r\n    /*--------------------------------------------------------------------------*/\r\n                #if (FXAA_QUALITY_PS > 4)\r\n                if(doneNP) {\r\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                    doneN = abs(lumaEndN) >= gradientScaled;\r\n                    doneP = abs(lumaEndP) >= gradientScaled;\r\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\r\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\r\n                    doneNP = (!doneN) || (!doneP);\r\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\r\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\r\n    /*--------------------------------------------------------------------------*/\r\n                    #if (FXAA_QUALITY_PS > 5)\r\n                    if(doneNP) {\r\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                        doneN = abs(lumaEndN) >= gradientScaled;\r\n                        doneP = abs(lumaEndP) >= gradientScaled;\r\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\r\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\r\n                        doneNP = (!doneN) || (!doneP);\r\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\r\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\r\n    /*--------------------------------------------------------------------------*/\r\n                        #if (FXAA_QUALITY_PS > 6)\r\n                        if(doneNP) {\r\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                            doneN = abs(lumaEndN) >= gradientScaled;\r\n                            doneP = abs(lumaEndP) >= gradientScaled;\r\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\r\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\r\n                            doneNP = (!doneN) || (!doneP);\r\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\r\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\r\n    /*--------------------------------------------------------------------------*/\r\n                            #if (FXAA_QUALITY_PS > 7)\r\n                            if(doneNP) {\r\n                                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                                doneN = abs(lumaEndN) >= gradientScaled;\r\n                                doneP = abs(lumaEndP) >= gradientScaled;\r\n                                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\r\n                                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\r\n                                doneNP = (!doneN) || (!doneP);\r\n                                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\r\n                                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\r\n    /*--------------------------------------------------------------------------*/\r\n        #if (FXAA_QUALITY_PS > 8)\r\n        if(doneNP) {\r\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n            doneN = abs(lumaEndN) >= gradientScaled;\r\n            doneP = abs(lumaEndP) >= gradientScaled;\r\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\r\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\r\n            doneNP = (!doneN) || (!doneP);\r\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\r\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\r\n    /*--------------------------------------------------------------------------*/\r\n            #if (FXAA_QUALITY_PS > 9)\r\n            if(doneNP) {\r\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                doneN = abs(lumaEndN) >= gradientScaled;\r\n                doneP = abs(lumaEndP) >= gradientScaled;\r\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\r\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\r\n                doneNP = (!doneN) || (!doneP);\r\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\r\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\r\n    /*--------------------------------------------------------------------------*/\r\n                #if (FXAA_QUALITY_PS > 10)\r\n                if(doneNP) {\r\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                    doneN = abs(lumaEndN) >= gradientScaled;\r\n                    doneP = abs(lumaEndP) >= gradientScaled;\r\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\r\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\r\n                    doneNP = (!doneN) || (!doneP);\r\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\r\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\r\n    /*--------------------------------------------------------------------------*/\r\n                    #if (FXAA_QUALITY_PS > 11)\r\n                    if(doneNP) {\r\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                        doneN = abs(lumaEndN) >= gradientScaled;\r\n                        doneP = abs(lumaEndP) >= gradientScaled;\r\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\r\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\r\n                        doneNP = (!doneN) || (!doneP);\r\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\r\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\r\n    /*--------------------------------------------------------------------------*/\r\n                        #if (FXAA_QUALITY_PS > 12)\r\n                        if(doneNP) {\r\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n                            doneN = abs(lumaEndN) >= gradientScaled;\r\n                            doneP = abs(lumaEndP) >= gradientScaled;\r\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\r\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\r\n                            doneNP = (!doneN) || (!doneP);\r\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\r\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\r\n    /*--------------------------------------------------------------------------*/\r\n                        }\r\n                        #endif\r\n    /*--------------------------------------------------------------------------*/\r\n                    }\r\n                    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n                }\r\n                #endif\r\n    /*--------------------------------------------------------------------------*/\r\n            }\r\n            #endif\r\n    /*--------------------------------------------------------------------------*/\r\n        }\r\n        #endif\r\n    /*--------------------------------------------------------------------------*/\r\n                            }\r\n                            #endif\r\n    /*--------------------------------------------------------------------------*/\r\n                        }\r\n                        #endif\r\n    /*--------------------------------------------------------------------------*/\r\n                    }\r\n                    #endif\r\n    /*--------------------------------------------------------------------------*/\r\n                }\r\n                #endif\r\n    /*--------------------------------------------------------------------------*/\r\n            }\r\n            #endif\r\n    /*--------------------------------------------------------------------------*/\r\n        }\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat dstN = posM.x - posN.x;\r\n        FxaaFloat dstP = posP.x - posM.x;\r\n        if(!horzSpan) dstN = posM.y - posN.y;\r\n        if(!horzSpan) dstP = posP.y - posM.y;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\r\n        FxaaFloat spanLength = (dstP + dstN);\r\n        FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\r\n        FxaaFloat spanLengthRcp = 1.0/spanLength;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaBool directionN = dstN < dstP;\r\n        FxaaFloat dst = min(dstN, dstP);\r\n        FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\r\n        FxaaFloat subpixG = subpixF * subpixF;\r\n        FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\r\n        FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\r\n    /*--------------------------------------------------------------------------*/\r\n        FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\r\n        FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\r\n        if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\r\n        if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\r\n        #if (FXAA_DISCARD == 1)\r\n            return FxaaTexTop(tex, posM);\r\n        #else\r\n            return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\r\n        #endif\r\n    }\r\n    /*==========================================================================*/\r\n    #endif\r\n\r\n    void main() {\r\n      gl_FragColor = FxaaPixelShader(\r\n        vUv,\r\n        vec4(0.0),\r\n        tDiffuse,\r\n        tDiffuse,\r\n        tDiffuse,\r\n        resolution,\r\n        vec4(0.0),\r\n        vec4(0.0),\r\n        vec4(0.0),\r\n        0.75,\r\n        0.166,\r\n        0.0833,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        vec4(0.0)\r\n      );\r\n\r\n      // TODO avoid querying texture twice for same texel\r\n      gl_FragColor.a = texture2D(tDiffuse, vUv).a;\r\n    }\r\n  `\r\n\r\n}\r\n\r\nexport default FXAAShader\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/FXAA.js","(function () {\n  'use strict'\n\n    // This module hashes the elements in an array and returns a FastMap of the hashes\n\n  // var hasha = require('hasha')\n  var FastMap = require('collections/fast-map')\n\n  var hashAlgorithm\n  var hashlist\n  var fastMap\n\n    /**\n     * Initialize the HashArray construtor\n     *\n     * @param {string} hA The hash function to be used\n     * @param {boolean} hL True if the array contains hashes, and false if\n     *                      and false by default (just a regular array)\n     *\n     */\n  function HashArray (hA = 'sha256', hL = false) {\n    hashAlgorithm = hA\n    hashlist = hL\n  }\n\n    /**\n     * Hashes each of the elements in an array\n     *\n     * @param {array} array The array containing all the elements to hash\n     * @param {callback} cb The callback containing the populated fastMap\n     *\n     */\n  HashArray.prototype.hashElements = function hashElements (array, cb) {\n    fastMap = new FastMap()\n\n    // If the array should be treated as a list of hashes\n    if (hashlist) {\n      // Iterate over each of the elements and add them to the fastMap\n      for (let index = 0; index < array.length; index++) {\n        const value = array[index]\n        fastMap.add(value, index)\n      }\n    } else {\n      // for (let index = 0; index < array.length; index++) {\n      //   const value = array[index]\n      //   fastMap.add(hasha(value, {algorithm: hashAlgorithm}), index)\n      // }\n    }\n\n    return fastMap\n  }\n\n  module.exports = HashArray\n})()\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/merkle-tree-gen/lib/hash-array.js","import * as THREE from 'three'\r\nimport vertexShader from './PointsMaterial.vert'\r\nimport fragmentShader from './PointsMaterial.frag'\r\n\r\nexport default class PointsMaterial extends THREE.PointsMaterial {\r\n  constructor (cfg) {\r\n    super(cfg)\r\n    this.type = 'ShaderMaterial'\r\n\r\n    this.uniforms = THREE.ShaderLib.points.uniforms\r\n\r\n    this.uniforms.uTime = {\r\n      type: 'f',\r\n      value: 0.0\r\n    }\r\n\r\n    this.uniforms.uColor = {\r\n      type: 't'\r\n    }\r\n\r\n    this.uniforms.pointCount = {\r\n      type: 'f'\r\n    }\r\n\r\n    this.vertexShader = vertexShader\r\n    this.fragmentShader = fragmentShader\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/materials/PointsMaterial/PointsMaterial.js","'use strict'\r\n\r\nimport * as THREE from 'three'\r\n\r\n// Geometry\r\nimport GenerateBlockGeometry from '../helpers/GenerateBlockGeometry'\r\n\r\nmodule.exports = function (self) {\r\n\r\n  self.addEventListener('message', function (e) {\r\n    let data = e.data\r\n    switch (data.cmd) {\r\n      case 'build':\r\n        let block = data.block\r\n\r\n        let feeToInputRatio = 0\r\n        if (block.fee && block.input) {\r\n          feeToInputRatio = block.fee / block.input\r\n        }\r\n        block.feeToInputRatio = feeToInputRatio\r\n\r\n        let geoData = GenerateBlockGeometry(block, true)\r\n        console.log( 'Result IS:', geoData.size )\r\n        let returnData = {\r\n          // vertices: geoData.treeVertices,\r\n          vertices: geoData.treeGeo.attributes.position.array,\r\n          size: geoData.size,\r\n          boxCenter: geoData.boxCenter,\r\n          offset: geoData.offset,\r\n          block,\r\n          endPoints: new Float32Array(geoData.endPoints)\r\n        }\r\n\r\n        self.postMessage(returnData)\r\n        break\r\n      case 'stop':\r\n        self.postMessage('WORKER STOPPED')\r\n        self.close()\r\n        break\r\n      default:\r\n        self.postMessage('Unknown command')\r\n    }\r\n\r\n    self.postMessage(e.data)\r\n  }, false)\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/workers/treeBuilder.js","import * as THREE from 'three'\r\nimport CopyShader from './CopyShader'\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\n /**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nconst EffectComposer = function (renderer, renderTarget) {\r\n  this.renderer = renderer\r\n\r\n  if (renderTarget === undefined) {\r\n    var parameters = {\r\n      minFilter: THREE.LinearFilter,\r\n      magFilter: THREE.LinearFilter,\r\n      format: THREE.RGBAFormat,\r\n      stencilBuffer: false\r\n    }\r\n\r\n    var size = renderer.getDrawingBufferSize()\r\n    renderTarget = new THREE.WebGLRenderTarget(size.width, size.height, parameters)\r\n    renderTarget.texture.name = 'EffectComposer.rt1'\r\n  }\r\n\r\n  this.renderTarget1 = renderTarget\r\n  this.renderTarget2 = renderTarget.clone()\r\n  this.renderTarget2.texture.name = 'EffectComposer.rt2'\r\n\r\n  this.writeBuffer = this.renderTarget1\r\n  this.readBuffer = this.renderTarget2\r\n\r\n  this.passes = []\r\n\r\n      // dependencies\r\n\r\n  if (CopyShader === undefined) {\r\n    console.error('THREE.EffectComposer relies on THREE.CopyShader')\r\n  }\r\n\r\n  if (ShaderPass === undefined) {\r\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass')\r\n  }\r\n\r\n  this.copyPass = new ShaderPass(CopyShader)\r\n}\r\n\r\nObject.assign(EffectComposer.prototype, {\r\n\r\n  swapBuffers: function () {\r\n    var tmp = this.readBuffer\r\n    this.readBuffer = this.writeBuffer\r\n    this.writeBuffer = tmp\r\n  },\r\n\r\n  addPass: function (pass) {\r\n    this.passes.push(pass)\r\n\r\n    var size = this.renderer.getDrawingBufferSize()\r\n    pass.setSize(size.width, size.height)\r\n  },\r\n\r\n  insertPass: function (pass, index) {\r\n    this.passes.splice(index, 0, pass)\r\n  },\r\n\r\n  render: function (delta) {\r\n    var maskActive = false\r\n\r\n    var pass, i, il = this.passes.length\r\n\r\n    for (i = 0; i < il; i++) {\r\n      pass = this.passes[ i ]\r\n\r\n      if (pass.enabled === false) continue\r\n\r\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive)\r\n\r\n      if (pass.needsSwap) {\r\n        if (maskActive) {\r\n          var context = this.renderer.context\r\n\r\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff)\r\n\r\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta)\r\n\r\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff)\r\n        }\r\n\r\n        this.swapBuffers()\r\n      }\r\n\r\n      if (THREE.MaskPass !== undefined) {\r\n        if (pass instanceof THREE.MaskPass) {\r\n          maskActive = true\r\n        } else if (pass instanceof THREE.ClearMaskPass) {\r\n          maskActive = false\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  reset: function (renderTarget) {\r\n    if (renderTarget === undefined) {\r\n      var size = this.renderer.getDrawingBufferSize()\r\n\r\n      renderTarget = this.renderTarget1.clone()\r\n      renderTarget.setSize(size.width, size.height)\r\n    }\r\n\r\n    this.renderTarget1.dispose()\r\n    this.renderTarget2.dispose()\r\n    this.renderTarget1 = renderTarget\r\n    this.renderTarget2 = renderTarget.clone()\r\n\r\n    this.writeBuffer = this.renderTarget1\r\n    this.readBuffer = this.renderTarget2\r\n  },\r\n\r\n  setSize: function (width, height) {\r\n    this.renderTarget1.setSize(width, height)\r\n    this.renderTarget2.setSize(width, height)\r\n\r\n    for (var i = 0; i < this.passes.length; i++) {\r\n      this.passes[i].setSize(width, height)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nconst Pass = function () {\r\n      // if set to true, the pass is processed by the composer\r\n  this.enabled = true\r\n\r\n      // if set to true, the pass indicates to swap read and write buffer after rendering\r\n  this.needsSwap = true\r\n\r\n      // if set to true, the pass clears its buffer before rendering\r\n  this.clear = false\r\n\r\n      // if set to true, the result of the pass is rendered to screen\r\n  this.renderToScreen = false\r\n}\r\n\r\nObject.assign(Pass.prototype, {\r\n\r\n  setSize: function (width, height) {},\r\n\r\n  render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\r\n    console.error('Pass: .render() must be implemented in derived pass.')\r\n  }\r\n\r\n})\r\n\r\nconst ShaderPass = function (shader, textureID) {\r\n  Pass.call(this)\r\n\r\n  this.textureID = (textureID !== undefined) ? textureID : 'tDiffuse'\r\n\r\n  if (shader instanceof THREE.ShaderMaterial) {\r\n    this.uniforms = shader.uniforms\r\n\r\n    this.material = shader\r\n  } else if (shader) {\r\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms)\r\n\r\n    this.material = new THREE.ShaderMaterial({\r\n\r\n      defines: shader.defines || {},\r\n      uniforms: this.uniforms,\r\n      vertexShader: shader.vertexShader,\r\n      fragmentShader: shader.fragmentShader\r\n\r\n    })\r\n  }\r\n\r\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1)\r\n  this.scene = new THREE.Scene()\r\n\r\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null)\r\n  this.quad.frustumCulled = false // Avoid getting clipped\r\n  this.scene.add(this.quad)\r\n}\r\n\r\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n\r\n  constructor: ShaderPass,\r\n\r\n  render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\r\n    if (this.uniforms[ this.textureID ]) {\r\n      this.uniforms[ this.textureID ].value = readBuffer.texture\r\n    }\r\n\r\n    this.quad.material = this.material\r\n\r\n    if (this.renderToScreen) {\r\n      renderer.render(this.scene, this.camera)\r\n    } else {\r\n      renderer.render(this.scene, this.camera, writeBuffer, this.clear)\r\n    }\r\n  }\r\n\r\n})\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nconst RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\r\n  Pass.call(this)\r\n\r\n  this.scene = scene\r\n  this.camera = camera\r\n\r\n  this.overrideMaterial = overrideMaterial\r\n\r\n  this.clearColor = clearColor\r\n  this.clearAlpha = (clearAlpha !== undefined) ? clearAlpha : 0\r\n\r\n  this.clear = true\r\n  this.clearDepth = false\r\n  this.needsSwap = false\r\n}\r\n\r\nRenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n\r\n  constructor: RenderPass,\r\n\r\n  render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\r\n    var oldAutoClear = renderer.autoClear\r\n    renderer.autoClear = false\r\n\r\n    this.scene.overrideMaterial = this.overrideMaterial\r\n\r\n    var oldClearColor, oldClearAlpha\r\n\r\n    if (this.clearColor) {\r\n      oldClearColor = renderer.getClearColor().getHex()\r\n      oldClearAlpha = renderer.getClearAlpha()\r\n\r\n      renderer.setClearColor(this.clearColor, this.clearAlpha)\r\n    }\r\n\r\n    if (this.clearDepth) {\r\n      renderer.clearDepth()\r\n    }\r\n\r\n    renderer.render(this.scene, this.camera, this.renderToScreen ? null : readBuffer, this.clear)\r\n\r\n    if (this.clearColor) {\r\n      renderer.setClearColor(oldClearColor, oldClearAlpha)\r\n    }\r\n\r\n    this.scene.overrideMaterial = null\r\n    renderer.autoClear = oldAutoClear\r\n  }\r\n\r\n})\r\n\r\n/**\r\n * @author bhouston / http://clara.io/\r\n *\r\n * Luminosity\r\n * http://en.wikipedia.org/wiki/Luminosity\r\n */\r\n\r\nconst LuminosityHighPassShader = {\r\n\r\n  shaderID: 'luminosityHighPass',\r\n\r\n  uniforms: {\r\n\r\n    'tDiffuse': { type: 't', value: null },\r\n    'luminosityThreshold': { type: 'f', value: 1.0 },\r\n    'smoothWidth': { type: 'f', value: 1.0 },\r\n    'defaultColor': { type: 'c', value: new THREE.Color(0x000000) },\r\n    'defaultOpacity': { type: 'f', value: 0.0 }\r\n\r\n  },\r\n\r\n  vertexShader: [\r\n\r\n    'varying vec2 vUv;',\r\n\r\n    'void main() {',\r\n\r\n    'vUv = uv;',\r\n\r\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n    '}'\r\n\r\n  ].join('\\n'),\r\n\r\n  fragmentShader: [\r\n\r\n    'uniform sampler2D tDiffuse;',\r\n    'uniform vec3 defaultColor;',\r\n    'uniform float defaultOpacity;',\r\n    'uniform float luminosityThreshold;',\r\n    'uniform float smoothWidth;',\r\n\r\n    'varying vec2 vUv;',\r\n\r\n    'void main() {',\r\n\r\n    'vec4 texel = texture2D( tDiffuse, vUv );',\r\n\r\n    'vec3 luma = vec3( 0.299, 0.587, 0.114 );',\r\n\r\n    'float v = dot( texel.xyz, luma );',\r\n\r\n    'vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\r\n\r\n    'float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\r\n\r\n    'gl_FragColor = mix( outputColor, texel, alpha );',\r\n\r\n    '}'\r\n\r\n  ].join('\\n')\r\n\r\n}\r\n\r\n/**\r\n * @author spidersharma / http://eduperiment.com/\r\n *\r\n * Inspired from Unreal Engine\r\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\r\n */\r\nconst UnrealBloomPass = function (resolution, strength, radius, threshold) {\r\n  Pass.call(this)\r\n\r\n  this.strength = (strength !== undefined) ? strength : 1\r\n  this.radius = radius\r\n  this.threshold = threshold\r\n  this.resolution = (resolution !== undefined) ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256)\r\n\r\n\t// render targets\r\n  var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat }\r\n  this.renderTargetsHorizontal = []\r\n  this.renderTargetsVertical = []\r\n  this.nMips = 5\r\n  var resx = Math.round(this.resolution.x / 2)\r\n  var resy = Math.round(this.resolution.y / 2)\r\n\r\n  this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars)\r\n  this.renderTargetBright.texture.name = 'UnrealBloomPass.bright'\r\n  this.renderTargetBright.texture.generateMipmaps = false\r\n\r\n  for (var i = 0; i < this.nMips; i++) {\r\n    var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars)\r\n\r\n    renderTarget.texture.name = 'UnrealBloomPass.h' + i\r\n    renderTarget.texture.generateMipmaps = false\r\n\r\n    this.renderTargetsHorizontal.push(renderTarget)\r\n\r\n    var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars)\r\n\r\n    renderTarget.texture.name = 'UnrealBloomPass.v' + i\r\n    renderTarget.texture.generateMipmaps = false\r\n\r\n    this.renderTargetsVertical.push(renderTarget)\r\n\r\n    resx = Math.round(resx / 2)\r\n\r\n    resy = Math.round(resy / 2)\r\n  }\r\n\r\n\t// luminosity high pass material\r\n\r\n  if (LuminosityHighPassShader === undefined) { console.error('UnrealBloomPass relies on LuminosityHighPassShader') }\r\n\r\n  var highPassShader = LuminosityHighPassShader\r\n  this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms)\r\n\r\n  this.highPassUniforms[ 'luminosityThreshold' ].value = threshold\r\n  this.highPassUniforms[ 'smoothWidth' ].value = 0.01\r\n\r\n  this.materialHighPassFilter = new THREE.ShaderMaterial({\r\n    uniforms: this.highPassUniforms,\r\n    vertexShader: highPassShader.vertexShader,\r\n    fragmentShader: highPassShader.fragmentShader,\r\n    defines: {}\r\n  })\r\n\r\n\t// Gaussian Blur Materials\r\n  this.separableBlurMaterials = []\r\n  var kernelSizeArray = [ 3, 5, 7, 9, 11 ]\r\n  var resx = Math.round(this.resolution.x / 2)\r\n  var resy = Math.round(this.resolution.y / 2)\r\n\r\n  for (var i = 0; i < this.nMips; i++) {\r\n    this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[ i ]))\r\n\r\n    this.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new THREE.Vector2(resx, resy)\r\n\r\n    resx = Math.round(resx / 2)\r\n\r\n    resy = Math.round(resy / 2)\r\n  }\r\n\r\n\t// Composite material\r\n  this.compositeMaterial = this.getCompositeMaterial(this.nMips)\r\n  this.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture\r\n  this.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture\r\n  this.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture\r\n  this.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture\r\n  this.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture\r\n  this.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength\r\n  this.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1\r\n  this.compositeMaterial.needsUpdate = true\r\n\r\n  var bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ]\r\n  this.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors\r\n  this.bloomTintColors = [ new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1),\r\n\t\t\t\t\t\t\t new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1) ]\r\n  this.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors\r\n\r\n\t// copy material\r\n  if (CopyShader === undefined) {\r\n    console.error('THREE.BloomPass relies on THREE.CopyShader')\r\n  }\r\n\r\n  var copyShader = CopyShader\r\n\r\n  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms)\r\n  this.copyUniforms[ 'opacity' ].value = 1.0\r\n\r\n  this.materialCopy = new THREE.ShaderMaterial({\r\n    uniforms: this.copyUniforms,\r\n    vertexShader: copyShader.vertexShader,\r\n    fragmentShader: copyShader.fragmentShader,\r\n    blending: THREE.AdditiveBlending,\r\n    depthTest: false,\r\n    depthWrite: false,\r\n    transparent: true\r\n  })\r\n\r\n  this.enabled = true\r\n  this.needsSwap = false\r\n\r\n  this.oldClearColor = new THREE.Color()\r\n  this.oldClearAlpha = 1\r\n\r\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1)\r\n  this.scene = new THREE.Scene()\r\n\r\n  this.basic = new THREE.MeshBasicMaterial()\r\n\r\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null)\r\n  this.quad.frustumCulled = false // Avoid getting clipped\r\n  this.scene.add(this.quad)\r\n}\r\n\r\nUnrealBloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n\r\n  constructor: UnrealBloomPass,\r\n\r\n  dispose: function () {\r\n    for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\r\n      this.renderTargetsHorizontal[ i ].dispose()\r\n    }\r\n\r\n    for (var i = 0; i < this.renderTargetsVertical.length; i++) {\r\n      this.renderTargetsVertical[ i ].dispose()\r\n    }\r\n\r\n    this.renderTargetBright.dispose()\r\n  },\r\n\r\n  setSize: function (width, height) {\r\n    var resx = Math.round(width / 2)\r\n    var resy = Math.round(height / 2)\r\n\r\n    this.renderTargetBright.setSize(resx, resy)\r\n\r\n    for (var i = 0; i < this.nMips; i++) {\r\n      this.renderTargetsHorizontal[ i ].setSize(resx, resy)\r\n      this.renderTargetsVertical[ i ].setSize(resx, resy)\r\n\r\n      this.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new THREE.Vector2(resx, resy)\r\n\r\n      resx = Math.round(resx / 2)\r\n      resy = Math.round(resy / 2)\r\n    }\r\n  },\r\n\r\n  render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\r\n    this.oldClearColor.copy(renderer.getClearColor())\r\n    this.oldClearAlpha = renderer.getClearAlpha()\r\n    var oldAutoClear = renderer.autoClear\r\n    renderer.autoClear = false\r\n\r\n    renderer.setClearColor(new THREE.Color(0, 0, 0), 0)\r\n\r\n    if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST)\r\n\r\n\t\t// Render input to screen\r\n\r\n    if (this.renderToScreen) {\r\n      this.quad.material = this.basic\r\n      this.basic.map = readBuffer.texture\r\n\r\n      renderer.render(this.scene, this.camera, undefined, true)\r\n    }\r\n\r\n\t\t// 1. Extract Bright Areas\r\n\r\n    this.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture\r\n    this.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold\r\n    this.quad.material = this.materialHighPassFilter\r\n\r\n    renderer.render(this.scene, this.camera, this.renderTargetBright, true)\r\n\r\n\t\t// 2. Blur All the mips progressively\r\n\r\n    var inputRenderTarget = this.renderTargetBright\r\n\r\n    for (var i = 0; i < this.nMips; i++) {\r\n      this.quad.material = this.separableBlurMaterials[ i ]\r\n\r\n      this.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture\r\n      this.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX\r\n      renderer.render(this.scene, this.camera, this.renderTargetsHorizontal[ i ], true)\r\n\r\n      this.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture\r\n      this.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY\r\n      renderer.render(this.scene, this.camera, this.renderTargetsVertical[ i ], true)\r\n\r\n      inputRenderTarget = this.renderTargetsVertical[ i ]\r\n    }\r\n\r\n\t\t// Composite All the mips\r\n\r\n    this.quad.material = this.compositeMaterial\r\n    this.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength\r\n    this.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius\r\n    this.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors\r\n\r\n    renderer.render(this.scene, this.camera, this.renderTargetsHorizontal[ 0 ], true)\r\n\r\n\t\t// Blend it additively over the input texture\r\n\r\n    this.quad.material = this.materialCopy\r\n    this.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture\r\n\r\n    if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST)\r\n\r\n    if (this.renderToScreen) {\r\n      renderer.render(this.scene, this.camera, undefined, false)\r\n    } else {\r\n      renderer.render(this.scene, this.camera, readBuffer, false)\r\n    }\r\n\r\n\t\t// Restore renderer settings\r\n\r\n    renderer.setClearColor(this.oldClearColor, this.oldClearAlpha)\r\n    renderer.autoClear = oldAutoClear\r\n  },\r\n\r\n  getSeperableBlurMaterial: function (kernelRadius) {\r\n    return new THREE.ShaderMaterial({\r\n\r\n      defines: {\r\n        'KERNEL_RADIUS': kernelRadius,\r\n        'SIGMA': kernelRadius\r\n      },\r\n\r\n      uniforms: {\r\n        'colorTexture': { value: null },\r\n        'texSize': { value: new THREE.Vector2(0.5, 0.5) },\r\n        'direction': { value: new THREE.Vector2(0.5, 0.5) }\r\n      },\r\n\r\n      vertexShader:\r\n\t\t\t\t'varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}',\r\n\r\n      fragmentShader:\r\n\t\t\t\t'#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\n\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat x = float(i);\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\r\n\t\t\t\t}'\r\n    })\r\n  },\r\n\r\n  getCompositeMaterial: function (nMips) {\r\n    return new THREE.ShaderMaterial({\r\n\r\n      defines: {\r\n        'NUM_MIPS': nMips\r\n      },\r\n\r\n      uniforms: {\r\n        'blurTexture1': { value: null },\r\n        'blurTexture2': { value: null },\r\n        'blurTexture3': { value: null },\r\n        'blurTexture4': { value: null },\r\n        'blurTexture5': { value: null },\r\n        'dirtTexture': { value: null },\r\n        'bloomStrength': { value: 1.0 },\r\n        'bloomFactors': { value: null },\r\n        'bloomTintColors': { value: null },\r\n        'bloomRadius': { value: 0.0 }\r\n      },\r\n\r\n      vertexShader:\r\n\t\t\t\t'varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}',\r\n\r\n      fragmentShader:\r\n\t\t\t\t'varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D blurTexture1;\\\r\n\t\t\t\tuniform sampler2D blurTexture2;\\\r\n\t\t\t\tuniform sampler2D blurTexture3;\\\r\n\t\t\t\tuniform sampler2D blurTexture4;\\\r\n\t\t\t\tuniform sampler2D blurTexture5;\\\r\n\t\t\t\tuniform sampler2D dirtTexture;\\\r\n\t\t\t\tuniform float bloomStrength;\\\r\n\t\t\t\tuniform float bloomRadius;\\\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\r\n\t\t\t\t}\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\r\n\t\t\t\t}'\r\n    })\r\n  }\r\n\r\n})\r\n\r\nUnrealBloomPass.BlurDirectionX = new THREE.Vector2(1.0, 0.0)\r\nUnrealBloomPass.BlurDirectionY = new THREE.Vector2(0.0, 1.0)\r\n\r\nexport {EffectComposer, ShaderPass, Pass, RenderPass, UnrealBloomPass}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/postprocessing/EffectComposer.js","const Film = {\r\n\r\n  uniforms: {\r\n\r\n    tDiffuse: { value: null },\r\n    time: { value: 0.0 },\r\n    nIntensity: { value: 0.05 },\r\n    sIntensity: { value: 0.0 },\r\n    sCount: { value: 0 },\r\n    grayscale: { value: 0 }\r\n\r\n  },\r\n\r\n  vertexShader: `\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    }\r\n\r\n  `,\r\n\r\n  fragmentShader: `\r\n\r\n    #include <common>\r\n\r\n    // control parameter\r\n    uniform float time;\r\n\r\n    uniform bool grayscale;\r\n\r\n    // noise effect intensity value (0 = no effect, 1 = full effect)\r\n    uniform float nIntensity;\r\n\r\n    // scanlines effect intensity value (0 = no effect, 1 = full effect)\r\n    uniform float sIntensity;\r\n\r\n    // scanlines effect count value (0 = no effect, 4096 = full effect)\r\n    uniform float sCount;\r\n\r\n    uniform sampler2D tDiffuse;\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n\r\n      // sample the source\r\n      vec4 cTextureScreen = texture2D( tDiffuse, vUv );\r\n\r\n      // make some noise\r\n      float dx = rand( vUv + time );\r\n\r\n      // add noise\r\n      vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\r\n\r\n      // get us a sine and cosine\r\n      vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\r\n\r\n      // add scanlines\r\n      cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\r\n\r\n      // interpolate between source and result by intensity\r\n      cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\r\n\r\n      // convert to grayscale if desired\r\n      if( grayscale ) {\r\n\r\n        cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\r\n\r\n      }\r\n\r\n      gl_FragColor =  vec4( cResult, cTextureScreen.a );\r\n\r\n    }\r\n\r\n  `\r\n\r\n}\r\n\r\nexport default Film\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/Film.js","'use strict'\r\n\r\nimport * as THREE from 'three'\r\nimport Config from '../Config'\r\nimport Tone from 'tone'\r\nimport _ from 'lodash'\r\nimport { map } from '../../utils/math'\r\n\r\nexport default class Audio {\r\n  constructor (camera, path) {\r\n    this.samplerLoaded = false\r\n    this.camera = camera\r\n    this.loops = []\r\n    this.quantize = 32\r\n    this.masterVol = -18 // db\r\n    this.ambienceVol = -10 // db\r\n    this.path = path\r\n    this.ambiencePath = path + 'sounds/ambience/mining.mp3'\r\n    this.bpm = 50\r\n    this.notes = {\r\n      55.000: 'A1',\r\n      58.270: 'A#1',\r\n      61.735: 'B1',\r\n      65.406: 'C1',\r\n      69.296: 'C#1',\r\n      73.416: 'D1',\r\n      77.782: 'D#1',\r\n      82.407: 'E1',\r\n      87.307: 'F1',\r\n      92.499: 'F#1',\r\n      97.999: 'G1',\r\n      103.826: 'G#1',\r\n      110.000: 'A2',\r\n      116.541: 'A#2',\r\n      123.471: 'B2',\r\n      130.813: 'C2',\r\n      138.591: 'C#2',\r\n      146.832: 'D2',\r\n      155.563: 'D#2',\r\n      164.814: 'E2',\r\n      174.614: 'F2',\r\n      184.997: 'F#2',\r\n      195.998: 'G2',\r\n      207.652: 'G#2',\r\n      220.000: 'A3',\r\n      233.082: 'A#3',\r\n      246.942: 'B3',\r\n      261.626: 'C3',\r\n      277.183: 'C#3',\r\n      293.665: 'D3',\r\n      311.127: 'D#3',\r\n      329.628: 'E3',\r\n      349.228: 'F3',\r\n      369.994: 'F#3',\r\n      391.995: 'G3',\r\n      415.305: 'G#3',\r\n      440.000: 'A4',\r\n      466.164: 'A#4',\r\n      493.883: 'B4',\r\n      523.251: 'C4'\r\n    }\r\n\r\n    this.pointColors = []\r\n\r\n    this.modes = {\r\n      'ionian': [\r\n        'C',\r\n        'D',\r\n        'E',\r\n        'F',\r\n        'G',\r\n        'A',\r\n        'B',\r\n        'C'\r\n      ],\r\n      'dorian': [\r\n        'C',\r\n        'D',\r\n        'D#',\r\n        'F',\r\n        'G',\r\n        'A',\r\n        'A#',\r\n        'C'\r\n      ],\r\n      'phrygian': [\r\n        'C',\r\n        'C#',\r\n        'D#',\r\n        'F',\r\n        'G',\r\n        'G#',\r\n        'A#',\r\n        'C'\r\n      ],\r\n      'lydian': [\r\n        'C',\r\n        'D',\r\n        'E',\r\n        'F#',\r\n        'G',\r\n        'A',\r\n        'B',\r\n        'C'\r\n      ],\r\n      'mixolydian': [\r\n        'C',\r\n        'D',\r\n        'E',\r\n        'F',\r\n        'G',\r\n        'A',\r\n        'A#',\r\n        'C'\r\n      ],\r\n      'aeolian': [\r\n        'C',\r\n        'D',\r\n        'D#',\r\n        'F',\r\n        'G',\r\n        'G#',\r\n        'A#',\r\n        'C'\r\n      ],\r\n      'locrian': [\r\n        'C',\r\n        'C#',\r\n        'D#',\r\n        'F',\r\n        'F#',\r\n        'G#',\r\n        'A#',\r\n        'C'\r\n      ]\r\n    }\r\n\r\n    this.audioLoader = new THREE.AudioLoader()\r\n  }\r\n\r\n  loadAmbience () {\r\n    return new Promise((resolve, reject) => {\r\n      this.ambienceFilter = new Tone.Filter({\r\n        type: 'lowpass',\r\n        Q: 5\r\n      }).chain(this.ambienceBus)\r\n\r\n      this.ambiencePlayer = new Tone.Player({\r\n        'url': this.ambiencePath,\r\n        'loop': true,\r\n        onload: () => {\r\n          resolve()\r\n        }\r\n      // }).chain(this.ambienceFilter)\r\n      }).chain(this.ambienceBus)\r\n\r\n      this.ambienceBus.volume.linearRampToValueAtTime(this.ambienceVol, 20)\r\n    })\r\n  }\r\n\r\n  setAmbienceFilterCutoff (value) {\r\n    // this.ambienceFilter.frequency.linearRampToValueAtTime(value, Tone.Transport.seconds + 5)\r\n  }\r\n\r\n  unloadSound () {\r\n    if (this.loops.length) {\r\n      for (let index = 0; index < this.loops.length; index++) {\r\n        const loop = this.loops[index]\r\n        loop.cancel()\r\n        loop.dispose()\r\n      }\r\n      this.loops = []\r\n    }\r\n  }\r\n\r\n  preloadNotes () {\r\n    return new Promise((resolve, reject) => {\r\n      let loadCount = 0\r\n      let self = this\r\n      resolve()\r\n      /* _.forIn(this.notes, (note, key) => {\r\n        this.audioLoader.load(\r\n          // resource URL\r\n          path + 'sounds/kalimba/' + note.replace('#', 'S') + '.mp3',\r\n          // Function when resource is loaded\r\n          function (audioBuffer) {\r\n            loadCount++\r\n            if (loadCount === Object.keys(self.notes).length) {\r\n              resolve()\r\n            }\r\n          }\r\n        )\r\n      }) */\r\n    })\r\n  }\r\n\r\n  preloadAmbience () {\r\n    return new Promise((resolve, reject) => {\r\n      resolve()\r\n     /* this.audioLoader.load(\r\n        this.ambiencePath,\r\n        function (audioBuffer) {\r\n          resolve()\r\n        }\r\n      ) */\r\n    })\r\n  }\r\n\r\n  preload () {\r\n    return new Promise((resolve, reject) => {\r\n      this.preloadNotes().then(() => {\r\n        this.preloadAmbience().then(() => {\r\n          console.log('sound loaded')\r\n          resolve()\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  init () {\r\n    return new Promise((resolve, reject) => {\r\n      this.masterBus = new Tone.Volume(this.masterVol).toMaster()\r\n      this.ambienceBus = new Tone.Volume(-96).toMaster()\r\n\r\n      /* this.convolver = new Tone.Convolver(path + 'sounds/IR/r1_ortf.wav')\r\n      this.convolver.set('wet', 1.0) */\r\n\r\n      // this.pingPong = new Tone.PingPongDelay('16n', 0.85)\r\n\r\n      Tone.Transport.bpm.value = this.bpm\r\n\r\n      /* Tone.Listener.setPosition(this.camera.position.x, this.camera.position.y, this.camera.position.z)\r\n\r\n      document.addEventListener('cameraMove', function () {\r\n        Tone.Listener.setPosition(this.camera.position.x, this.camera.position.y, this.camera.position.z)\r\n      }.bind(this), false) */\r\n\r\n      /* let cameraForwardVector = new THREE.Vector3()\r\n      let quaternion = new THREE.Quaternion()\r\n      cameraForwardVector.set(0, 0, -1).applyQuaternion(quaternion)\r\n\r\n      Tone.Listener.setOrientation(cameraForwardVector.x, cameraForwardVector.y, cameraForwardVector.z, this.camera.up.x, this.camera.up.y, this.camera.up.z) */\r\n\r\n      // this.preload().then(() => {\r\n      this.loadAmbience().then(() => {\r\n        this.ambiencePlayer.start()\r\n        Tone.Transport.start()\r\n        resolve()\r\n      })\r\n      // })\r\n    })\r\n  }\r\n\r\n  loadSampler () {\r\n    this.sampler = new Tone.Sampler({\r\n      'A1': this.path + 'sounds/kalimba/A1.mp3',\r\n      'A#1': this.path + 'sounds/kalimba/AS1.mp3',\r\n      'B1': this.path + 'sounds/kalimba/B1.mp3',\r\n      'C1': this.path + 'sounds/kalimba/C1.mp3',\r\n      'C#1': this.path + 'sounds/kalimba/CS1.mp3',\r\n      'D1': this.path + 'sounds/kalimba/D1.mp3',\r\n      'D#1': this.path + 'sounds/kalimba/DS1.mp3',\r\n      'E1': this.path + 'sounds/kalimba/E1.mp3',\r\n      'F1': this.path + 'sounds/kalimba/F1.mp3',\r\n      'F#1': this.path + 'sounds/kalimba/FS1.mp3',\r\n      'G1': this.path + 'sounds/kalimba/G1.mp3',\r\n      'G#1': this.path + 'sounds/kalimba/GS1.mp3',\r\n      'A2': this.path + 'sounds/kalimba/A2.mp3',\r\n      'A#2': this.path + 'sounds/kalimba/AS2.mp3',\r\n      'B2': this.path + 'sounds/kalimba/B2.mp3',\r\n      'C2': this.path + 'sounds/kalimba/C2.mp3',\r\n      'C#2': this.path + 'sounds/kalimba/CS2.mp3',\r\n      'D2': this.path + 'sounds/kalimba/D2.mp3',\r\n      'D#2': this.path + 'sounds/kalimba/DS2.mp3',\r\n      'E2': this.path + 'sounds/kalimba/E2.mp3',\r\n      'F2': this.path + 'sounds/kalimba/F2.mp3',\r\n      'F#2': this.path + 'sounds/kalimba/FS2.mp3',\r\n      'G2': this.path + 'sounds/kalimba/G2.mp3',\r\n      'G#2': this.path + 'sounds/kalimba/GS2.mp3',\r\n      'A3': this.path + 'sounds/kalimba/A3.mp3',\r\n      'A#3': this.path + 'sounds/kalimba/AS3.mp3',\r\n      'B3': this.path + 'sounds/kalimba/B3.mp3',\r\n      'C3': this.path + 'sounds/kalimba/C3.mp3',\r\n      'C#3': this.path + 'sounds/kalimba/CS3.mp3',\r\n      'D3': this.path + 'sounds/kalimba/D3.mp3',\r\n      'D#3': this.path + 'sounds/kalimba/DS3.mp3',\r\n      'E3': this.path + 'sounds/kalimba/E3.mp3',\r\n      'F3': this.path + 'sounds/kalimba/F3.mp3',\r\n      'F#3': this.path + 'sounds/kalimba/FS3.mp3',\r\n      'G3': this.path + 'sounds/kalimba/G3.mp3',\r\n      'G#3': this.path + 'sounds/kalimba/GS3.mp3'\r\n  /*    'A4': this.path + 'sounds/kalimba/A4.mp3',\r\n      'A#4': this.path + 'sounds/kalimba/AS4.mp3',\r\n      'B4': this.path + 'sounds/kalimba/B4.mp3',\r\n      'C4': this.path + 'sounds/kalimba/C4.mp3' */\r\n    }).chain(this.masterBus)\r\n  }\r\n\r\n  generateMerkleSound (positionsArray, blockObjectPosition, block, pointsMaterial, pointsMesh) {\r\n    if (!this.samplerLoaded) {\r\n      this.loadSampler()\r\n    }\r\n\r\n    this.samplerLoaded = true\r\n\r\n    this.loopMap = []\r\n\r\n    this.black = new THREE.Color(0x000000)\r\n    this.white = new THREE.Color(0xffffff)\r\n\r\n    this.pointsMaterial = pointsMaterial\r\n\r\n    let minTime = Number.MAX_SAFE_INTEGER\r\n    let maxTime = 0\r\n\r\n    for (let index = 0; index < block.transactions.length; index++) {\r\n      const transaction = block.transactions[index]\r\n      minTime = Math.min(transaction.time, minTime)\r\n      maxTime = Math.max(transaction.time, maxTime)\r\n    }\r\n\r\n    block.transactions.sort((a, b) => {\r\n      return a.time > b.time\r\n    })\r\n\r\n    this.pointColors = []\r\n    for (let index = 0; index < positionsArray.length * 3; index++) {\r\n      this.pointColors.push(0)\r\n    }\r\n\r\n    for (let index = 0; index < positionsArray.length; index++) {\r\n      const point = positionsArray[index]\r\n\r\n      /**\r\n       * Map transaction time to new range\r\n       */\r\n      if (typeof block.transactions[index] !== 'undefined') {\r\n        const transaction = block.transactions[index]\r\n        let time = map(transaction.time, minTime, maxTime, 0, 30) + 1.0\r\n\r\n        // noteCount++\r\n\r\n        // get closest note\r\n        let minDiff = Number.MAX_SAFE_INTEGER\r\n        let note = 'C1'\r\n\r\n        let mode = this.modes.aeolian\r\n        for (var frequency in this.notes) {\r\n          if (this.notes.hasOwnProperty(frequency)) {\r\n            let noteName = this.notes[frequency].replace(/[0-9]/g, '')\r\n            if (mode.indexOf(noteName) !== -1) { // filter out notes not in mode\r\n              let diff = Math.abs((point * 2.0) - frequency)\r\n              if (diff < minDiff) {\r\n                minDiff = diff\r\n                note = this.notes[frequency]\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        let that = this\r\n        let loop\r\n\r\n        let timeLowRes = time.toFixed(1)\r\n\r\n        if (typeof this.loopMap[timeLowRes] === 'undefined') {\r\n          loop = new Tone.Loop(\r\n            () => {\r\n              this.sampler.triggerAttack(note, '@' + that.quantize + 'n', 1.0)\r\n              this.pointColors[index * 3] = 255\r\n              setTimeout(() => {\r\n                this.pointColors[index * 3] = 0\r\n              }, 500)\r\n            },\r\n            '1m'\r\n          ).start(Tone.Transport.seconds + time)\r\n        } else {\r\n          loop = new Tone.Loop(\r\n            () => {\r\n              this.pointColors[index * 3] = 255\r\n              setTimeout(() => {\r\n                this.pointColors[index * 3] = 0\r\n              }, 500)\r\n            },\r\n              '1m'\r\n          ).start(Tone.Transport.seconds + time)\r\n        }\r\n        loop.humanize = '64n'\r\n        this.loops.push(loop)\r\n        this.loopMap[timeLowRes] = true\r\n      }\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/audio/audio.js","import * as THREE from 'three'\r\nimport BlockMaterial from '../BlockMaterial/BlockMaterial'\r\nimport vertexShader from './MerkleMaterial.vert'\r\nimport fragmentShader from './MerkleMaterial.frag'\r\n\r\nexport default class MerkleMaterial extends BlockMaterial {\r\n  constructor (cfg) {\r\n    super(cfg)\r\n    this.type = 'ShaderMaterial'\r\n\r\n    this.uniforms = THREE.ShaderLib.standard.uniforms\r\n\r\n    this.uniforms.uTime = {\r\n      type: 'f'\r\n    //  value: 0.0\r\n    }\r\n\r\n    this.uniforms.uAnimTime = {\r\n      type: 'f'\r\n   //   value: 0.0\r\n    }\r\n\r\n    this.vertexShader = vertexShader\r\n    this.fragmentShader = vertexShader\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/materials/MerkleMaterial/MerkleMaterial.js","'use strict'\r\n\r\nimport * as THREE from 'three'\r\n\r\n// Geometry\r\nimport GenerateBlockGeometry from '../helpers/GenerateBlockGeometry'\r\n\r\nmodule.exports = function (self) {\r\n\r\n  self.addEventListener('message', function (e) {\r\n    let data = e.data\r\n    switch (data.cmd) {\r\n      case 'build':\r\n        let blocks = data.blocks\r\n\r\n        let returnData = {\r\n          // sizes: [],\r\n          blockCount: blocks.length,\r\n          dayIndex: data.dayIndex,\r\n          blocks: data.blocks,\r\n          timeStamp: data.timeStamp,\r\n          focusOnBlock: data.focusOnBlock\r\n        }\r\n\r\n        console.time('blocks')\r\n        for (let index = 0; index < blocks.length; index++) {\r\n          let block = blocks[index]\r\n\r\n          let feeToInputRatio = 0\r\n          if (block.fee && block.input) {\r\n            feeToInputRatio = block.fee / block.input\r\n          }\r\n          block.feeToInputRatio = feeToInputRatio\r\n\r\n          let { size } = GenerateBlockGeometry(block)\r\n          // returnData.sizes.push(blockGeoData.boxDimensions)\r\n\r\n          returnData.blocks[index].feeToInputRatio = feeToInputRatio\r\n          returnData.blocks[index].size = size\r\n        }\r\n        console.timeEnd('blocks')\r\n        self.postMessage(returnData)\r\n        break\r\n      case 'stop':\r\n        self.postMessage('WORKER STOPPED')\r\n        self.close()\r\n        break\r\n      default:\r\n        self.postMessage('Unknown command')\r\n    }\r\n\r\n    // self.postMessage(e.data)\r\n  }, false)\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/workers/dayBuilder.js","(function () {\n  'use strict'\n\n    /**\n     * genMerkle()\n     *\n     * This generates a Merkle Tree from a FastMap of leaves.\n     *\n     * @param {object} fastMap The FastMap of leaves, passed in from\n     *                          the array hash or the file hash functions.\n     * @param {string} hashalgo The hash algorithm to use\n     * @param {callback} cb The Merkle Tree object\n     *\n     */\n  function genMerkle (fastMap, hashalgo, cb) {\n    var Deque = require('collections/deque')\n    var deque1 = new Deque()\n    var deque2 = new Deque()\n    var tree = {}\n\n    var i\n    var j\n    var left\n    var right\n    var len2\n    var chash      // the concatenated hashes\n    var nextval\n\n    var currentlevel = 0\n    var nl = fastMap.length\n\n    // tree.root = ''\n    // tree.hashalgo = hashalgo\n    // tree.leaves = nl\n    // tree.levels = ''\n\n        // Push all of the leaves onto the main queue\n    for (i = 0; i < nl; i++) {\n      nextval = fastMap.get(i)\n\n      // Add the leaves to the 'tree' object\n      tree[nextval] = {\n        'type': 'leaf',\n        'level': currentlevel,\n        'left': 'data',\n        'right': 'data',\n        'parent': ''\n      }\n\n      deque1.push(nextval)\n    }\n\n    currentlevel++\n\n        // While the main queue has more than one value left (the root)\n    while (deque1.length > 1) {\n            // Get the two first-pushed values off of the queue and hash them\n      left = deque1.shift()\n      right = deque1.shift()\n      chash = left + right// hasha(left + right, {algorithm: hashalgo});\n\n            // Add the hash and nodes to the 'tree' object\n      tree[chash] = {\n        'type': 'node',\n        'level': currentlevel,\n        'left': left,\n        'right': right,\n        'parent': ''\n      }\n\n      tree[right].parent = chash\n      tree[left].parent = chash\n\n            // push the result onto a second queue\n      deque2.push(chash)\n\n            // If there are an odd number of leaves (only one hash left),\n    // pop the last value, concatenate it with itself, and hash that\n      if (deque1.length === 1) {\n        right = deque1.pop()\n        chash = left + right// hasha(right + right, {algorithm: hashalgo});\n\n        // Add the hash and nodes to the 'tree' object\n        tree[chash] = {\n          'type': 'node',\n          'level': currentlevel,\n          'left': right,\n          'right': right,\n          'parent': ''\n        }\n\n        tree[right].parent = chash\n\n        deque2.push(chash)\n      }\n\n      // If everything is off of the main queue (deque1) but the copy\n      // queue (deque2) is not empty, there is another level in the tree\n      // and more values to hash. Pop them and push them back to the main\n      // queue.\n      if ((deque1.length === 0) && (deque2.length !== 0)) {\n        currentlevel++\n\n        len2 = deque2.length\n\n        for (j = 0; j < len2; j++) {\n          deque1.push(deque2.shift())\n        }\n      }\n    }\n\n    // Set the number of levels, the root node value, and the root node type & parent\n    // tree.levels = currentlevel\n    const root = deque1.pop()\n    tree[root].type = 'root'\n    // tree[tree.root].parent = 'root'\n\n    // return tree\n    // cb(tree);\n    return tree\n  }\n\n    // Export the genMerkle() function\n  module.exports = genMerkle\n})()\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/merkle-tree-gen/lib/merkle-gen.js","const HueSaturationShader = {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    hue: { value: 0 },\r\n    saturation: { value: 0.5 }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    uniform sampler2D tDiffuse;\r\n    uniform float hue;\r\n    uniform float saturation;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      gl_FragColor = texture2D( tDiffuse, vUv );\r\n\r\n        // hue\r\n      float angle = hue * 3.14159265;\r\n      float s = sin(angle), c = cos(angle);\r\n      vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\r\n      float len = length(gl_FragColor.rgb);\r\n      gl_FragColor.rgb = vec3(\r\n      dot(gl_FragColor.rgb, weights.xyz),\r\n      dot(gl_FragColor.rgb, weights.zxy),\r\n      dot(gl_FragColor.rgb, weights.yzx)\r\n      );\r\n\r\n        // saturation\r\n      float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\r\n      if (saturation > 0.0) {\r\n        gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\r\n      } else {\r\n        gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\r\n      }\r\n\r\n    }\r\n  `\r\n}\r\n\r\nexport default HueSaturationShader\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/HueSaturation.js","/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Vignette shader\r\n * based on PaintEffect postprocess from ro.me\r\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\r\n */\r\n\r\nconst Vignette = {\r\n\r\n  uniforms: {\r\n\r\n    tDiffuse: { value: null },\r\n    offset: { value: 1.0 },\r\n    darkness: { value: 1.4 }\r\n\r\n  },\r\n\r\n  vertexShader: `\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    }\r\n\r\n  `,\r\n\r\n  fragmentShader: `\r\n\r\n    uniform float offset;\r\n    uniform float darkness;\r\n\r\n    uniform sampler2D tDiffuse;\r\n\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n\r\n        // Eskils vignette\r\n\r\n    vec4 texel = texture2D( tDiffuse, vUv );\r\n    vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\r\n    gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\r\n\r\n        /*\r\n        // alternative version from glfx.js\r\n        // this one makes more \"dusty\" look (as opposed to \"burned\")\r\n\r\n        \"vec4 color = texture2D( tDiffuse, vUv );\",\r\n        \"float dist = distance( vUv, vec2( 0.5 ) );\",\r\n        \"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\r\n        \"gl_FragColor = color;\",\r\n        */\r\n\r\n    }\r\n\r\n  `\r\n\r\n}\r\n\r\nexport default Vignette\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/Vignette.js","export const PI = Math.PI\nexport const PI2 = PI * 2\nexport const HALF_PI = PI * 0.5\nexport const DEG2RAD = PI / 180.0\nexport const RAD2DEG = 180.0 / PI\n\n// Be aware GLSL order\nexport const step = (edge, val) => val < edge ? 0 : 1\nexport const clamp = (val, min, max) => val < min ? min : val > max ? max : val\nexport const mix = (min, max, ratio) => min + (max - min) * ratio\nexport const cMix = (min, max, ratio) => min + (max - min) * clamp(ratio, 0, 1)\nexport const unMix = (min, max, val) => (val - min) / (max - min)\nexport const cUnMix = (min, max, val) => clamp((val - min) / (max - min), 0, 1)\n\n/*\n * Linearly maps n from range [ a, b ] -> [ x, y ]\n */\nexport const map = (n, a, b, x, y) => x + (n - a) * (y - x) / (b - a)\n\n/*\n * Linearly maps n from range [ a, b ] -> [ 0, 1 ]\n */\nexport const normalize = (n, a, b) => map(n, a, b, 0, 1)\n\nexport const smoothstep = (edge0, edge1, val) => {\n  val = cUnMix(edge0, edge1, val)\n  return val * val * (3 - val * 2)\n}\nexport const fract = (val) => val - Math.floor(val)\nexport const hash = (val) => fract(Math.sin(val) * 43758.5453123)\nexport const hash2 = (val1, val2) => fract(Math.sin(val1 * 12.9898 + val2 * 4.1414) * 43758.5453)\nexport const sign = (val) => val ? val < 0 ? -1 : 1 : 0\nexport const isPowerOfTwo = (val) => (val & -val) === val\nexport const powerTwoCeilingBase = (val) => Math.ceil(Math.log(val) / Math.log(2))\nexport const powerTwoCeiling = (val) => {\n  if (isPowerOfTwo(val)) return val\n  return 1 << powerTwoCeilingBase(val)\n}\nexport const latLngBearing = (lat1, lng1, lat2, lng2) => {\n  // lat lng are in rad\n  // http://www.movable-type.co.uk/scripts/latlong.html\n  let y = Math.sin(lng2 - lng1) * Math.cos(lat2)\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lng2 - lng1)\n  return Math.atan2(y, x)\n}\nexport const distanceTo = (dX, dY) => Math.sqrt(dX * dX + dY * dY)\nexport const distanceSqrTo = (dX, dY) => dX * dX + dY * dY\nexport const distanceTo3 = (dX, dY, dZ) => Math.sqrt(dX * dX + dY * dY + dZ * dZ)\nexport const distanceSqrTo3 = (dX, dY, dZ) => dX * dX + dY * dY + dZ * dZ\nexport const latLngDistance = (lat1, lng1, lat2, lng2) => {\n  // lat lng are in rad\n  // http://www.movable-type.co.uk/scripts/latlong.html\n  let tLat = Math.sin((lat2 - lat1) / 2)\n  let tLng = Math.sin((lng2 - lng1) / 2)\n  let a = tLat * tLat + Math.cos(lat1) * Math.cos(lat2) * tLng * tLng\n  return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n}\nexport const cubicBezier = (p0, p1, p2, p3, t) => {\n  let c = (p1 - p0) * 3\n  let b = (p2 - p1) * 3 - c\n  let a = p3 - p0 - c - b\n  let t2 = t * t\n  let t3 = t2 * t\n  return a * t3 + b * t2 + c * t + p0\n}\nexport const cubicBezierFn = (p0, p1, p2, p3) => {\n  let c = (p1 - p0) * 3\n  let b = (p2 - p1) * 3 - c\n  let a = p3 - p0 - c - b\n  return (t) => {\n    let t2 = t * t\n    let t3 = t2 * t\n    return a * t3 + b * t2 + c * t + p0\n  }\n}\n\nexport const safeMod = (val, mod) => {\n  let absVal = Math.abs(val)\n  val = val < 0 ? Math.ceil(absVal / mod) * mod - absVal : val\n  return Math.abs(val % mod)\n}\n\nexport const loop = (val, min, max) => {\n  return safeMod(val - min, max - min) + min\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/math.js","module.exports = \"#define GLSLIFY 1\\nuniform float uRefractionRatio;\\nuniform float uFresnelBias;\\nuniform float uFresnelScale;\\nuniform float uFresnelPower;\\n\\nvarying vec3 vReflect;\\nvarying vec3 vRefract[3];\\n//varying float vReflectionFactor;\\n\\n#define PHYSICAL\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n\\t// vec3 I = worldPosition.xyz - cameraPosition;\\n\\n\\t//vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\n\\t//vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\\t//vRefract[0] = refract( normalize( I ), worldNormal, uRefractionRatio );\\n\\t//vRefract[1] = refract( normalize( I ), worldNormal, uRefractionRatio * 0.99 );\\n\\t//vRefract[2] = refract( normalize( I ), worldNormal, uRefractionRatio * 0.98 );\\n\\n\\t//vReflectionFactor = uFresnelBias + uFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), uFresnelPower );\\n\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/materials/BlockMaterial/BlockMaterial.vert\n// module id = cNRb\n// module chunks = 1","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n * - \"r\" parameter control where \"focused\" horizontal line lies\n */\n\nconst HorizontalTiltShiftShader = {\n\n  uniforms: {\n\n    'tDiffuse': { value: null },\n    'h': { value: 1.0 / 512.0 },\n    'r': { value: 0.35 }\n\n  },\n\n  vertexShader: [\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    'vUv = uv;',\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}'\n\n  ].join('\\n'),\n\n  fragmentShader: [\n\n    'uniform sampler2D tDiffuse;',\n    'uniform float h;',\n    'uniform float r;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    'vec4 sum = vec4( 0.0 );',\n\n    'float hh = h * abs( r - vUv.y );',\n\n    'sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;',\n    'sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;',\n\n    'gl_FragColor = sum;',\n\n    '}'\n\n  ].join('\\n')\n\n}\n\nexport default HorizontalTiltShiftShader\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/shaders/HorizontalTiltShiftShader.js","/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\r\n\r\nconst CopyShader = {\r\n\r\n  uniforms: {\r\n\r\n    'tDiffuse': { value: null },\r\n    'opacity': { value: 1.0 }\r\n\r\n  },\r\n\r\n  vertexShader: [\r\n\r\n    'varying vec2 vUv;',\r\n\r\n    'void main() {',\r\n\r\n    'vUv = uv;',\r\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n    '}'\r\n\r\n  ].join('\\n'),\r\n\r\n  fragmentShader: [\r\n\r\n    'uniform float opacity;',\r\n\r\n    'uniform sampler2D tDiffuse;',\r\n\r\n    'varying vec2 vUv;',\r\n\r\n    'void main() {',\r\n\r\n    'vec4 texel = texture2D( tDiffuse, vUv );',\r\n    'gl_FragColor = opacity * texel;',\r\n\r\n    '}'\r\n\r\n  ].join('\\n')\r\n\r\n}\r\n\r\nexport default CopyShader\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/postprocessing/CopyShader.js","'use strict'\r\n\r\n// libs\r\nimport * as THREE from 'three'\r\nimport { map } from '../../utils/math'\r\nimport moment from 'moment'\r\nimport EventEmitter from 'eventemitter3'\r\nimport _ from 'lodash'\r\n\r\n// Global config\r\nimport Config from '../Config'\r\n\r\n// Audio\r\nimport Audio from '../audio/audio'\r\n\r\n// API\r\nimport API from '../api/btc'\r\n\r\n// Custom Materials\r\nimport BlockMaterial from '../materials/BlockMaterial/BlockMaterial'\r\nimport PointsMaterial from '../materials/PointsMaterial/PointsMaterial'\r\nimport MerkleMaterial from '../materials/MerkleMaterial/MerkleMaterial'\r\n\r\nconst dat = require('dat-gui')\r\n\r\nconst work = require('webworkify-webpack')\r\n\r\nconst DayBuilderWorker = work(require.resolve('../workers/dayBuilder.js'))\r\nconst TreeBuilderWorker = work(require.resolve('../workers/treeBuilder.js'))\r\nconst TWEEN = require('@tweenjs/tween.js')\r\n\r\nexport default class MainScene extends EventEmitter {\r\n  constructor ({ stage, path = './static/assets/' }) {\r\n    super()\r\n    // this.params = params\r\n\r\n    this.cubeCamera = null\r\n\r\n    this.api = new API()\r\n\r\n    this.allBlocksObj3d = new Map()\r\n    this.allBlocks = new Map()\r\n    this.lastHoveredBlock = null\r\n\r\n    this.stage = stage // reference to the stage\r\n\r\n    this.initProperties() // class properties\r\n    this.initState()\r\n    this.addInteraction()\r\n\r\n    this.audio = new Audio(this.stage.camera, path)\r\n\r\n    this.audio.init()\r\n\r\n    this.addEvents()\r\n    this.setupMaterials(path)\r\n    this.initGui()\r\n\r\n    this.initReflection()\r\n\r\n    this.clock = new THREE.Clock()\r\n\r\n    DayBuilderWorker.addEventListener('message', this.addBlocksToStage.bind(this), false)\r\n  }\r\n\r\n  // start(){ console.warn(\"'start' method yet to be implemented\") }\r\n  destroy () {\r\n    document.removeEventListener('preUpdate', this.onUpdateBound, false)\r\n    cancelAnimationFrame(this.stage.reqID)\r\n    const scene = this.stage.scene\r\n\r\n    // const traverse = (obj, callback) => {\r\n    //   obj.children.forEach(child => traverse(child, callback))\r\n    //   callback(obj)\r\n    // }\r\n\r\n    const dispose = function (object) {\r\n      if (object.geometry) object.geometry.dispose()\r\n      if (object.material) {\r\n        if (object.material.map) object.material.map.dispose()\r\n        object.material.dispose()\r\n      }\r\n      // if( object.parent ) object.parent.remove(object)\r\n    }\r\n\r\n    this.stage.scene.traverse(dispose)\r\n  }\r\n\r\n  setDate (date, focusOnBlock = false) {\r\n    if (this.state.currentDate === null) {\r\n      this.state.currentDate = date\r\n    }\r\n    let currentDate = moment(this.state.currentDate)\r\n\r\n    let inputDate = moment(date)\r\n\r\n    let dayIndex = currentDate.diff(inputDate, 'days')\r\n\r\n    // move camera\r\n    let newOffset = this.dayZOffset * dayIndex\r\n    this.stage.targetCameraLookAt.z = newOffset\r\n    this.stage.targetCameraPos.z = newOffset + this.stage.defaultCameraPos.z\r\n\r\n    this.state.closestDayIndex = dayIndex\r\n\r\n    this.loadBlocks(inputDate.valueOf(), dayIndex, focusOnBlock, dayIndex)\r\n  }\r\n\r\n  initReflection () {\r\n\r\n  }\r\n\r\n  initGui () {\r\n    if (!Config.showGUI) {\r\n      return\r\n    }\r\n\r\n    this.gui = new dat.GUI({ width: 300 })\r\n    this.gui.open()\r\n\r\n    let param = {\r\n      blockMetalness: 0.9,\r\n      blockRoughness: 0.2,\r\n      blockColor: this.blockMaterialFront.color.getHex(),\r\n      blockEmissive: this.blockMaterialFront.emissive.getHex(),\r\n      blockLightIntesity: 5.0,\r\n      //\r\n      merkleMetalness: 0.9,\r\n      merkleRoughness: 0.1,\r\n      merkleColor: this.merkleMaterial.color.getHex(),\r\n      merkleEmissive: this.merkleMaterial.emissive.getHex(),\r\n      //\r\n      backgroundColor: Config.scene.bgColor,\r\n      vignetteAmount: 1.4,\r\n      cameraFOV: Config.camera.fov\r\n    }\r\n\r\n    /**\r\n     * Create a GUI for a material\r\n     */\r\n    const createGuiForMaterial = (mat, title) => {\r\n      let f = this.gui.addFolder(title)\r\n      f.add(mat, 'metalness', 0.0, 1.0).step(0.01)\r\n      f.add(mat, 'roughness', 0.0, 1.0).step(0.01)\r\n      f.add(mat, 'bumpScale', 0.0, 1.0).step(0.01)\r\n      f.add(mat, 'opacity', 0.0, 1.0).step(0.01)\r\n      if (mat.reflectivity) f.add(mat, 'reflectivity', 0.0, 1.0).step(0.01)\r\n      f.addColor({color: mat.color.getHex()}, 'color').onChange(val => mat.color.setHex(val))\r\n      f.addColor({emissive: mat.emissive.getHex()}, 'emissive').onChange(val => mat.emissive.setHex(val))\r\n    }\r\n\r\n     /**\r\n     * Gui for Material\r\n     */\r\n    // createGuiForMaterial(this.centralBlockMaterial, 'Central Block Material')\r\n    // createGuiForMaterial(this.blockMaterialFront, 'Block Material')\r\n    // createGuiForMaterial(this.merkleMaterial, 'Merkle Block Material')\r\n\r\n    /*\r\n      Light GUI\r\n    */\r\n    let lightFolder = this.gui.addFolder('Lighting')\r\n    lightFolder.add(this.stage.pointLight, 'intensity', 0.0, 10.0).step(0.01)\r\n\r\n    /**\r\n     * Scene\r\n     */\r\n    let sceneFolder = this.gui.addFolder('Scene')\r\n    sceneFolder.addColor(param, 'backgroundColor').onChange(function (val) {\r\n      this.stage.scene.background = new THREE.Color(val)\r\n      this.stage.scene.fog.color = new THREE.Color(val)\r\n    }.bind(this))\r\n\r\n    sceneFolder.add(param, 'vignetteAmount', 1.0, 2.0).step(0.01).onChange(function (val) {\r\n      this.stage.VignettePass.uniforms.darkness.value = val\r\n    }.bind(this))\r\n\r\n    sceneFolder.add(param, 'cameraFOV', 45.0, 100.0).step(0.01).onChange(function (val) {\r\n      this.stage.camera.fov = val\r\n      this.stage.camera.updateProjectionMatrix()\r\n    }.bind(this))\r\n  }\r\n\r\n  initState (blocks, currentDate) {\r\n    this.state = {\r\n      frameCount: 0,\r\n      currentDate: null,\r\n      dayGroups: [],\r\n      loadDayRequested: false,\r\n      currentBlock: null,\r\n      currentBlockObject: null,\r\n      view: 'day', // can be 'day' or 'block'\r\n      dayData: [], // all blocks grouped by day\r\n      currentDay: null, // which day is the camera closest to\r\n      blocksToAnimate: [],\r\n      closestDayIndex: 0,\r\n      minCameraZPos: 0,\r\n      maxCameraZPos: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load in blocks for one day\r\n   */\r\n  loadBlocks (date, dayIndex = 0, focusOnBlock = false) {\r\n    this.state.loadDayRequested = true\r\n\r\n    // prune days too far away from viewer\r\n    for (const key in this.state.dayData) {\r\n      if (this.state.dayData.hasOwnProperty(key)) {\r\n        if (Math.abs(key - this.state.closestDayIndex) > Config.daysEitherSide) {\r\n          delete this.state.dayData[key]\r\n          this.stage.scene.remove(this.state.dayGroups[key])\r\n          delete this.state.dayGroups[key]\r\n        }\r\n      }\r\n    }\r\n\r\n    if (window.Worker) {\r\n      const fromDate = moment(date).startOf('day').toDate()\r\n      const toDate = moment(date).endOf('day').toDate()\r\n      const timeStamp = fromDate.valueOf()\r\n\r\n      this.api.getBlocksSince(fromDate, toDate).then((blocks) => {\r\n        const day = {\r\n          blocks: blocks,\r\n          timeStamp: timeStamp\r\n        }\r\n\r\n        DayBuilderWorker.postMessage({\r\n          cmd: 'build',\r\n          blocks: day.blocks,\r\n          timeStamp: day.timeStamp,\r\n          dayIndex: dayIndex,\r\n          focusOnBlock: focusOnBlock\r\n        })\r\n      })\r\n    } else {\r\n      console.log('Webworkers not supported. Sad')\r\n    }\r\n  }\r\n\r\n  addBlocksToStage ({ data }) {\r\n    // if (typeof e.data.sizes === 'undefined') {\r\n    //   return\r\n    // }\r\n\r\n    const that = this\r\n\r\n    try {\r\n      // let workerData = e.data\r\n      const { sizes, blockCount, timeStamp, dayIndex, blocks, focusOnBlock } = data\r\n      // let sizes = workerData.sizes\r\n      // let blockCount = workerData.blockCount\r\n      // let timeStamp = workerData.timeStamp\r\n      // let dayIndex = workerData.dayIndex\r\n      // let blocks = workerData.blocks\r\n      // let focusOnBlock = workerData.focusOnBlock\r\n\r\n      this.state.dayData[dayIndex] = {\r\n        blocks,\r\n        timeStamp,\r\n        blockMaterialFront: this.blockMaterialFront.clone(), // each day has it's own material\r\n        blockMaterialBack: this.blockMaterialBack.clone(),\r\n        merkleMaterial: this.merkleMaterial.clone(),\r\n        visibleCount: 0\r\n      }\r\n\r\n      let group = new THREE.Group()\r\n      this.state.dayGroups[dayIndex] = group\r\n      this.stage.scene.add(group)\r\n      this.blocksToAnimate = []\r\n\r\n      for (let index = 0; index < blocks.length; index++) {\r\n        // const size = sizes[index]\r\n        const block = blocks[index]\r\n        const size = block.size\r\n\r\n        if (\r\n          size.x === 0 ||\r\n          size.y === 0 ||\r\n          size.z === 0\r\n        ) {\r\n          continue\r\n        }\r\n\r\n        // make box size slightly larger than the merkle tree it contains\r\n        /* size.x += 20.0\r\n        size.y += 20.0\r\n        size.z += 20.0 */\r\n\r\n        let front = new THREE.Mesh(this.boxGeometry, this.state.dayData[dayIndex].blockMaterialFront)\r\n        let back = new THREE.Mesh(this.boxGeometry, this.state.dayData[dayIndex].blockMaterialBack)\r\n        front.name = 'front'\r\n        back.name = 'back'\r\n\r\n        back.renderOrder = ((index - 1 * -dayIndex) + 1000000)\r\n        front.renderOrder = ((index * -dayIndex) + 1000000)\r\n\r\n        front.scale.set(size.x, size.y, size.z)\r\n        back.scale.set(size.x, size.y, size.z)\r\n\r\n        // align all front faces\r\n        // blockMeshFront.translateZ(-(size.z / 2))\r\n        // blockMeshBack.translateZ(-(size.z / 2))\r\n\r\n        let rotation = -(((25 * Math.PI) / 200) * index)\r\n\r\n        block.dayIndex = dayIndex\r\n\r\n        // blockMeshFront.rotation.z = rotation\r\n        // blockMeshFront.translateY(800 + (index))\r\n        // blockMeshFront.rotation.z += Math.PI / 2\r\n        // blockMeshFront.translateZ((index * 30))\r\n\r\n        // blockMeshBack.rotation.z = rotation\r\n        // blockMeshBack.translateY(800 + (index))\r\n        // blockMeshBack.rotation.z += Math.PI / 2\r\n        // blockMeshBack.translateZ((index * 30))\r\n        // lockMeshBack.blockchainData = block\r\n\r\n        /* let edgeGeo = new THREE.EdgesGeometry(blockMesh.geometry)\r\n        let wireframe = new THREE.LineSegments(edgeGeo, this.blockMaterialOutline)\r\n        blockMesh.add(wireframe) */\r\n\r\n        let blockGroup = new THREE.Group()\r\n        blockGroup.materials = {\r\n          front: this.state.dayData[dayIndex].blockMaterialFront,\r\n          back: this.state.dayData[dayIndex].blockMaterialBack\r\n        }\r\n        blockGroup.front = front\r\n        blockGroup.back = back\r\n\r\n        blockGroup.blockchainData = block\r\n        blockGroup.rotation.z = rotation\r\n        blockGroup.translateY(800 + (index))\r\n        blockGroup.rotation.z += Math.PI / 2\r\n        blockGroup.translateZ((index * 30))\r\n        // blockGroup.name = block.hash\r\n        this.allBlocksObj3d.set(block.hash, blockGroup)\r\n        this.allBlocks.set(blockGroup, block)\r\n        blockGroup.visible = false\r\n\r\n        blockGroup.add(back)\r\n        blockGroup.add(front)\r\n\r\n        group.add(blockGroup)\r\n      }\r\n\r\n      let zPos = this.dayZOffset * dayIndex\r\n      group.translateZ(zPos)\r\n      this.state.dayData[dayIndex].zPos = zPos\r\n      this.state.loadDayRequested = false\r\n\r\n      let that = this\r\n      Object.keys(this.state.dayGroups).forEach(function (key) {\r\n        let group = that.state.dayGroups[key]\r\n        that.stage.scene.remove(group)\r\n      })\r\n\r\n      Object.keys(this.state.dayGroups).reverse().forEach(function (key) {\r\n        let group = that.state.dayGroups[key]\r\n        that.stage.scene.add(group)\r\n      })\r\n\r\n      // if (this.treeGroup) {\r\n      //   that.stage.scene.remove(this.treeGroup)\r\n      //   that.stage.scene.add(this.treeGroup)\r\n      // }\r\n\r\n      if (focusOnBlock) {\r\n        for (let index = 0; index < this.state.dayGroups[dayIndex].children.length; index++) {\r\n          const mesh = this.state.dayGroups[dayIndex].children[index]\r\n          if (mesh.blockchainData.hash === this.state.currentHash) {\r\n            this.focusOnBlock(mesh)\r\n            break\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  initProperties () {\r\n    this.boxGeometry = new THREE.BoxBufferGeometry(1.0, 1.0, 1.0) // block geo instance\r\n    this.dayZOffset = -5500 // offset for each day on z-axis\r\n    this.treeGroup = null\r\n    this.blockLoadZThreshold = 10000 // how far away from the last block until we load in another?\r\n    this.crystalOpacity = 0.5\r\n    this.pointLightTarget = new THREE.Vector3(0.0, 0.0, 0.0)\r\n    this.cameraBlockFocusDistance = 300\r\n  }\r\n\r\n  addInteraction () {\r\n    this.raycaster = new THREE.Raycaster()\r\n    this.intersected = null\r\n  }\r\n\r\n  addEvents () {\r\n    this.onUpdateBound = this.onUpdate.bind(this)\r\n    document.addEventListener('preUpdate', this.onUpdateBound, false)\r\n    document.addEventListener('cameraMove', this.onCameraMove.bind(this), false)\r\n\r\n    this.selectBlock = new Event('selectBlock')\r\n\r\n    this.dayChangedEvent = document.createEvent('CustomEvent')\r\n\r\n    document.addEventListener('mousedown', this.onDocumentMouseDown.bind(this), false)\r\n\r\n    document.addEventListener('touchend', this.onDocumentMouseDown.bind(this), false)\r\n\r\n    if (window.Worker) {\r\n      this.treeBuilderWorker = TreeBuilderWorker\r\n      this.treeBuilderWorker.addEventListener('message', this.addTreeToStage.bind(this), false)\r\n    }\r\n  }\r\n\r\n  addTreeToStage ({ data }) {\r\n    const { boxCenter, offset, sie, vertices, endPoints, block } = data\r\n    if (!vertices) return\r\n\r\n    /*\r\n      Remove existing Trees\r\n    */\r\n    if (this.state.currentBlockObject) {\r\n      this.state.currentBlockObject.remove(this.state.currentBlockObject.tree)\r\n      this.audio.unloadSound()\r\n    }\r\n\r\n    // this.treeGroup = new THREE.Group()\r\n    // this.stage.scene.add(this.treeGroup)\r\n\r\n    let blockObjectPosition = this.state.currentBlockObject.getWorldPosition().clone()\r\n    // let rotation = this.state.currentBlockObject.getWorldRotation().clone()\r\n\r\n    let treeGeo = new THREE.BufferGeometry()\r\n    treeGeo.addAttribute('position', new THREE.BufferAttribute(vertices, 3))\r\n    treeGeo.computeVertexNormals()\r\n    treeGeo.computeFaceNormals()\r\n\r\n    /*\r\n      Tree Mesh\r\n    */\r\n    let mesh = new THREE.Mesh(treeGeo, this.state.dayData[block.dayIndex].merkleMaterial)\r\n    mesh.position.add(offset)\r\n    mesh.renderOrder = 10000000\r\n    mesh.onBeforeRender = renderer => renderer.clearDepth()\r\n\r\n    /*\r\n      Sound Wave Geometry\r\n    */\r\n    let positions = new THREE.BufferAttribute(endPoints, 3, 1)\r\n    const indices = new Array(endPoints.length / 3).fill(0).map((a, i) => i)\r\n\r\n    let geometry = new THREE.BufferGeometry()\r\n    geometry.addAttribute('position', positions)\r\n    geometry.addAttribute('id', new THREE.BufferAttribute(new Float32Array(indices), 1, 1))\r\n    // per instance data\r\n\r\n    let pointsMesh = new THREE.Points(geometry, this.pointsMaterial)\r\n    pointsMesh.position.add(offset)\r\n\r\n    const blockObj3D = this.allBlocksObj3d.get(block.hash)\r\n    blockObj3D.add(pointsMesh)\r\n    blockObj3D.add(mesh)\r\n    blockObj3D.tree = mesh\r\n\r\n    // start animation\r\n    this.merkleMaterial.uniforms.uAnimTime.value = 0.0\r\n\r\n    // this.treeGroup.rotation.set(rotation.x, rotation.y, rotation.z)\r\n    // this.treeGroup.position.set(blockObjectPosition.x, blockObjectPosition.y, blockObjectPosition.z)\r\n\r\n    this.audio.generateMerkleSound(endPoints, blockObjectPosition, block, this.pointsMaterial, pointsMesh)\r\n  }\r\n\r\n  resetDayView () {\r\n    if (this.state.isAnimating) {\r\n      return\r\n    }\r\n\r\n    // this.removeTrees()\r\n    this.audio.unloadSound()\r\n\r\n    if (this.state.currentBlockObject) {\r\n      this.state.currentBlockObject.remove(this.state.currentBlockObject.tree)\r\n      // this.animateBlockOut(this.state.currentBlockObject.parent.children[0])\r\n      this.animateBlockOut(this.state.currentBlockObject).then(() => {\r\n        this.state.currentBlockObject = null\r\n        this.state.view = 'day'\r\n      })\r\n    } else {\r\n      this.state.view = 'day'\r\n    }\r\n  }\r\n\r\n  // removeTrees () {\r\n  //   debugger;\r\n  //   if (typeof this.treeGroup !== 'undefined') {\r\n  //     this.stage.scene.remove(this.treeGroup)\r\n  //     this.treeGroup = null\r\n  //   }\r\n  //   this.audio.unloadSound()\r\n  // }\r\n\r\n  onDocumentMouseDown (event) {\r\n    event.preventDefault()\r\n    if (document.querySelector('.dg.ac').contains(event.target)) return\r\n    if (this.state.isAnimating) return\r\n\r\n    const { intersected } = this.getIntersections()\r\n\r\n    // if( intersected ){\r\n    if (!intersected || intersected === this.state.currentBlockObject) this.resetDayView()\r\n    else this.focusOnBlock(intersected)\r\n\r\n    // for (const key in this.state.dayGroups) {\r\n    //   if (this.state.dayGroups.hasOwnProperty(key)) {\r\n    //     const group = this.state.dayGroups[key]\r\n\r\n    //     for (let index = 0; index < group.children.length; index++) {\r\n    //       const blockGroup = group.children[index]\r\n\r\n    //       let intersects = this.raycaster.intersectObjects(blockGroup.children)\r\n    //       if (intersects.length > 0) {\r\n    //         if (\r\n    //           intersects[0].object === this.state.currentBlockObject ||\r\n    //           intersects[1].object === this.state.currentBlockObject\r\n    //         ) {\r\n    //           this.resetDayView()\r\n    //           return\r\n    //         }\r\n\r\n    //         // this.removeTrees()\r\n\r\n    //         let blockObject = intersects[0].object\r\n    //         this.focusOnBlock(blockObject)\r\n    //         return\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  createCubeMap (position, dayIndex) {\r\n    if (typeof this.state.dayData[dayIndex] !== 'undefined') {\r\n      this.stage.scene.background = this.bgMap\r\n      this.state.dayData[dayIndex].blockMaterialFront.color.setHex(0xffffff)\r\n      let cubeCamera = new THREE.CubeCamera(100.0, 5000, 1024)\r\n      cubeCamera.position.set(position.x, position.y, position.z)\r\n      cubeCamera.renderTarget.texture.minFilter = THREE.LinearMipMapLinearFilter\r\n      cubeCamera.update(this.stage.renderer, this.stage.scene)\r\n\r\n      this.state.dayData[dayIndex].blockMaterialFront.envMap = cubeCamera.renderTarget.texture\r\n      this.state.dayData[dayIndex].blockMaterialBack.envMap = cubeCamera.renderTarget.texture\r\n      this.state.dayData[dayIndex].merkleMaterial.envMap = cubeCamera.renderTarget.texture\r\n\r\n      this.stage.scene.background = new THREE.Color(Config.scene.bgColor)\r\n    }\r\n  }\r\n\r\n  animateBlock (blockObject, fromPos, fromQuaternion, toPos, toQuaternion, duration) {\r\n    return new Promise((resolve, reject) => {\r\n      this.state.isAnimating = true\r\n      let moveQuaternion = new THREE.Quaternion()\r\n      blockObject.quaternion.set(moveQuaternion)\r\n\r\n      this.easing = TWEEN.Easing.Quartic.InOut\r\n\r\n      // let tweenVars = {\r\n      //   blockPosX: fromPos.x,\r\n      //   blockPosY: fromPos.y,\r\n      //   time: 0\r\n      // }\r\n\r\n      // let that = this\r\n\r\n      new TWEEN.Tween(blockObject.position)\r\n        .to(toPos, duration)\r\n        .easing(this.easing)\r\n        .onComplete(() => {\r\n          this.state.isAnimating = false\r\n          resolve()\r\n        })\r\n        .start()\r\n\r\n      new TWEEN.Tween({time: 0})\r\n        .to({time: 1}, duration)\r\n        .onUpdate(function ({ time }) {\r\n          // slerp to target rotation\r\n          THREE.Quaternion.slerp(fromQuaternion, toQuaternion, moveQuaternion, time)\r\n          blockObject.quaternion.set(moveQuaternion.x, moveQuaternion.y, moveQuaternion.z, moveQuaternion.w)\r\n        })\r\n        .easing(this.easing)\r\n        .start()\r\n    })\r\n  }\r\n\r\n  animateBlockOut (blockObject) {\r\n    return new Promise((resolve, reject) => {\r\n      if (blockObject) {\r\n        let fromPos = blockObject.position.clone()\r\n        let toPos = blockObject.initialPosition.clone()\r\n\r\n        let targetRotation = blockObject.initialRotation.clone()\r\n        let fromQuaternion = new THREE.Quaternion().copy(blockObject.quaternion)\r\n        let toQuaternion = new THREE.Quaternion().setFromEuler(targetRotation)\r\n\r\n        this.animateBlock(\r\n          blockObject,\r\n          fromPos,\r\n          fromQuaternion,\r\n          toPos,\r\n          toQuaternion,\r\n          500\r\n        ).then(() => {\r\n          resolve()\r\n        })\r\n      } else {\r\n        resolve()\r\n      }\r\n    })\r\n  }\r\n\r\n  animateBlockIn (blockObject) {\r\n    return new Promise((resolve, reject) => {\r\n      let blockPos = blockObject.position.clone()\r\n\r\n      let targetRotation = new THREE.Euler(0.0, 0.0, 0.0)\r\n      let fromQuaternion = new THREE.Quaternion().copy(blockObject.quaternion)\r\n      let toQuaternion = new THREE.Quaternion().setFromEuler(targetRotation)\r\n\r\n      blockObject.initialPosition = blockObject.position.clone()\r\n      blockObject.initialRotation = blockObject.rotation.clone()\r\n\r\n      // focus camera on block\r\n      let blockWorldPos = blockObject.getWorldPosition()\r\n\r\n      this.stage.targetCameraLookAt.z = blockWorldPos.z\r\n      this.stage.targetCameraPos.z = blockWorldPos.z + this.cameraBlockFocusDistance\r\n      const toPos = new THREE.Vector3()\r\n      toPos.z = blockObject.position.z\r\n\r\n      this.animateBlock(\r\n        blockObject,\r\n        blockPos,\r\n        fromQuaternion,\r\n        // this.stage.targetCameraLookAt,\r\n        toPos,\r\n        toQuaternion,\r\n        2000,\r\n        true\r\n      ).then(() => {\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  buildTree (blockObject) {\r\n    let block = blockObject.blockchainData\r\n    if (this.state.currentBlockObject) {\r\n      this.state.currentBlockObject.remove(this.state.currentBlockObject.tree)\r\n      this.audio.unloadSound()\r\n    }\r\n    this.state.currentBlock = block\r\n    // this.removeTrees()\r\n\r\n    this.api.getTransactionsForBlock(block.hash)\r\n      .then((transactions) => {\r\n        block.transactions = transactions\r\n        console.log('Building Tree for', block.hash)\r\n        this.treeBuilderWorker.postMessage(\r\n          {\r\n            cmd: 'build',\r\n            block: block\r\n          }\r\n        )\r\n      }).catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  setupMaterials (path) {\r\n    this.cubeMapUrls = [\r\n      'px.png',\r\n      'nx.png',\r\n      'py.png',\r\n      'ny.png',\r\n      'pz.png',\r\n      'nz.png'\r\n    ]\r\n\r\n    let map = new THREE.TextureLoader().load(path + 'textures/Marble068_COL_1K.jpg')\r\n    let metalnessMap = new THREE.TextureLoader().load(path + 'textures/Marble068_REFL_1K.jpg')\r\n    let roughnessMap = new THREE.TextureLoader().load(path + 'textures/Marble068_GLOSS_1K.jpg')\r\n    let glossMap = new THREE.TextureLoader().load(path + 'textures/Marble068_GLOSS_1K.jpg')\r\n    let normalMap = new THREE.TextureLoader().load(path + 'textures/Marble068_NRM_1K.jpg')\r\n    let bumpMap = new THREE.TextureLoader().load(path + 'textures/IceBlock008_OVERLAY_1K.jpg')\r\n    this.bgMap = new THREE.CubeTextureLoader().setPath(path + 'textures/').load(this.cubeMapUrls)\r\n    // this.stage.scene.background = this.bgMap\r\n\r\n    this.blockMaterialBack = new BlockMaterial({\r\n      color: 0xeeeeee,\r\n      emissive: 0x000000,\r\n      metalness: 0.9,\r\n      roughness: 0.2,\r\n      opacity: 0.5,\r\n      transparent: true,\r\n      side: THREE.BackSide,\r\n      envMap: this.bgMap,\r\n      bumpMap,\r\n      bumpScale: 0.03\r\n    })\r\n\r\n    this.blockMaterialFront = new BlockMaterial({\r\n      color: 0xeeeeee,\r\n      emissive: 0x330000,\r\n      metalness: 0.9,\r\n      roughness: 0.2,\r\n      opacity: 0.5,\r\n      transparent: true,\r\n      side: THREE.FrontSide,\r\n      envMap: this.bgMap,\r\n      bumpMap,\r\n      bumpScale: 0.03\r\n    })\r\n\r\n    this.centralBlockMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xffffff,\r\n      emissive: 0x333333,\r\n      metalness: 0.8,\r\n      roughness: 0.2,\r\n      opacity: 0.5,\r\n      transparent: true,\r\n      side: THREE.DoubleSide,\r\n      envMap: this.bgMap,\r\n      envMapIntensity: 2.3,\r\n      // bumpMap,\r\n      // bumpScale: 0.03,\r\n      roughnessMap,\r\n      metalnessMap,\r\n      normalMap,\r\n      premultipliedAlpha: true\r\n      // map\r\n    })\r\n\r\n    this.blockMaterialOutline = new THREE.LineBasicMaterial({\r\n      color: 0xaaaaaa,\r\n      transparent: true,\r\n      opacity: 0.5\r\n    })\r\n\r\n    this.blockMaterialHighlight = new THREE.MeshPhysicalMaterial({\r\n      color: 0xffffff,\r\n      emissive: 0xffffff,\r\n      metalness: 0.9,\r\n      roughness: 0.2,\r\n      opacity: 0.8,\r\n      transparent: true,\r\n      side: THREE.DoubleSide\r\n    })\r\n\r\n    this.merkleMaterial = new MerkleMaterial({\r\n      color: 0xffffff,\r\n      emissive: 0x444444,\r\n      flatShading: true,\r\n      metalness: 0.8,\r\n      roughness: 0.3,\r\n      opacity: 0.3,\r\n      /* depthTest: false,\r\n      depthWrite: false, */\r\n      transparent: true,\r\n      side: THREE.DoubleSide,\r\n      envMap: this.bgMap\r\n    })\r\n\r\n    this.pointsMaterial = new PointsMaterial({\r\n      color: 0xfff900,\r\n      size: 30.0,\r\n      // alphaTest: 0.0001,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      opacity: 1.0,\r\n      depthTest: false\r\n      // depthWrite: false,\r\n      // vertexColors: THREE.VertexColors\r\n    })\r\n  }\r\n\r\n  getIntersections () {\r\n    var vector = new THREE.Vector3(this.stage.targetMousePos.x, this.stage.targetMousePos.y, 0.5)\r\n    vector.unproject(this.stage.camera)\r\n    var raycaster = new THREE.Raycaster(this.stage.camera.position, vector.sub(this.stage.camera.position).normalize())\r\n\r\n    const allBlocks = Array.from(this.allBlocksObj3d.values())\r\n\r\n    const boxes = allBlocks\r\n      // .filter(box => box !== this.state.currentBlockObject)\r\n      .map(group => group.children[0])\r\n      .filter(box => box && box.visible) // Filter to only those with non null refs\r\n\r\n    const intersections = raycaster.intersectObjects(boxes, false)\r\n    const intersected = intersections[0] && intersections[0].object.parent\r\n\r\n    return { intersections, allBlocks, intersected }\r\n  }\r\n\r\n  checkMouseIntersection () {\r\n    const { intersected, allBlocks } = this.getIntersections()\r\n    /*\r\n      Doing own intersection test as we don't need it recursive or to check front/back objects\r\n    */\r\n    // const intersections = Array.from(this.state.dayGroups)\r\n      // .map(group => raycase.intersectObject(group.children[0], false ))\r\n      // .sort(( a, b ) => a.distance - b.distance)\r\n\r\n    // // const nearestIntersectedBlock = intersections[0]\r\n\r\n    // For Each block\r\n    allBlocks.forEach(block => {\r\n      // Set the front/back materials to their default\r\n      // block.children.forEach((child, i) => child.material = block.materials[i])\r\n      block.front.material = block.materials.front\r\n      block.back.material = block.materials.back\r\n    })\r\n\r\n    /*\r\n      If an intersection occured but not on the selected block, set a highlight\r\n    */\r\n    if (intersected && intersected !== this.state.currentBlockObject) {\r\n      intersected.children.forEach(child => child.material = this.blockMaterialHighlight)\r\n      if( intersected !== this.lastHoveredBlock ){\r\n        this.lastHoveredBlock = intersected\r\n        this.emit('blockHovered', this.allBlocks.get(intersected))\r\n      }\r\n      this.pointLightTarget = intersected.position\r\n    }\r\n\r\n    // for (const dayIndex in this.state.dayGroups) {\r\n    //   if (this.state.dayGroups.hasOwnProperty(dayIndex)) {\r\n    //     const group = this.state.dayGroups[dayIndex]\r\n\r\n    //     for (let index = 0; index < group.children.length; index++) {\r\n    //       const blockGroup = group.children[index]\r\n\r\n    //       let intersects = ray.intersectObjects(blockGroup.children)\r\n    //       if (intersects.length > 0) {\r\n    //         if ( intersects[0].object !== this.intersected && intersects[0].object !== this.state.currentBlockObject ) {\r\n    //           if ( this.intersected && typeof this.state.dayData[dayIndex] !== 'undefined' // this.intersected.material.uuid !== this.centralBlockMaterial.uuid && ) {\r\n    //             this.intersected.material = this.state.dayData[dayIndex].blockMaterialFront\r\n    //           }\r\n\r\n    //           this.intersected = intersects[0].object\r\n\r\n    //           if (this.intersected.material.uuid !== this.centralBlockMaterial.uuid) {\r\n    //             this.intersected.material = this.blockMaterialHighlight\r\n    //           }\r\n\r\n    //           const blockWorldPos = this.intersected.getWorldPosition()\r\n\r\n    //           this.pointLightTarget = blockWorldPos\r\n    //         }\r\n    //         return\r\n    //       } else {\r\n    //         if (\r\n    //         this.intersected &&\r\n    //         // this.intersected.material.uuid !== this.centralBlockMaterial.uuid &&\r\n    //         typeof this.state.dayData[dayIndex] !== 'undefined'\r\n    //       ) {\r\n    //           this.intersected.material = this.state.dayData[dayIndex].blockMaterialFront\r\n    //         }\r\n    //         this.intersected = null\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  onCameraMove () {\r\n    if (typeof this.state.dayData[0] === 'undefined') {\r\n      return\r\n    }\r\n\r\n    // which day are we closest to?\r\n    let closest = Number.MAX_VALUE\r\n    let closestDayIndex = 0\r\n\r\n    for (const dayIndex in this.state.dayData) {\r\n      if (this.state.dayData.hasOwnProperty(dayIndex)) {\r\n        const day = this.state.dayData[dayIndex]\r\n        let dist = Math.abs(day.zPos - (this.stage.camera.position.z) + 1000.0)\r\n        if (dist < closest) {\r\n          closest = dist\r\n          closestDayIndex = parseInt(dayIndex)\r\n        }\r\n      }\r\n    }\r\n\r\n    const blocks = this.state.dayData[closestDayIndex].blocks\r\n    const time = blocks[0].time * 1000\r\n    const date = moment(time).startOf('day').toDate()\r\n    const day = {\r\n      date,\r\n      input: blocks.reduce((a, b) => a + b.input, 0),\r\n      output: blocks.reduce((a, b) => a + b.output, 0),\r\n      fee: blocks.reduce((a, b) => a + b.fee, 0)\r\n    }\r\n\r\n    // bubble up event\r\n    if (this.state.currentDay === null) {\r\n      \r\n      this.emit('firstDayLoaded')\r\n      this.emit('dayChanged', day)\r\n    } else {\r\n      if (this.state.closestDayIndex !== closestDayIndex) {\r\n        this.emit('dayChanged', day)\r\n      }\r\n    }\r\n\r\n    this.state.currentDay = this.state.dayData[closestDayIndex]\r\n\r\n    this.state.closestDayIndex = closestDayIndex\r\n\r\n    if (\r\n      this.state.loadDayRequested === false &&\r\n      typeof this.state.currentDay !== 'undefined'\r\n    ) {\r\n      for (let index = 0; index <= Config.daysEitherSide; index++) {\r\n        let dayLoading = false\r\n\r\n        for (let innerIndex = 0; innerIndex <= 1; innerIndex++) {\r\n          let signedIndex = parseFloat(index)\r\n          if (innerIndex === 1 && index !== 0) {\r\n            signedIndex = index * -1\r\n          }\r\n\r\n          if (typeof this.state.dayData[closestDayIndex + signedIndex] === 'undefined') {\r\n            let day = moment(this.state.currentDay.timeStamp).subtract(signedIndex, 'day').format('YYYY-MM-DD')\r\n            this.loadDay(day, closestDayIndex, signedIndex)\r\n            dayLoading = true\r\n            break\r\n          }\r\n        }\r\n\r\n        if (dayLoading) {\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    /* this.state.hashRate = this.state.currentDay.hashRate\r\n    this.state.audioFreqCutoff = map(this.state.hashRate, 0.0, 20000000.0, 50.0, 15000) // TODO: set upper bound to max hashrate from blockchain.info\r\n\r\n    console.log(this.state.audioFreqCutoff) */\r\n\r\n   // this.state.audioFreqCutoff = 20000\r\n\r\n    // this.audio.setAmbienceFilterCutoff(this.state.audioFreqCutoff)\r\n  }\r\n\r\n  loadDay (day, closestDayIndex, index) {\r\n    this.loadBlocks(day, (closestDayIndex + index))\r\n    let latestDayIndex = Number.MAX_SAFE_INTEGER\r\n    let earliestDayIndex = 0\r\n\r\n    for (const key in this.state.dayData) {\r\n      if (this.state.dayData.hasOwnProperty(key)) {\r\n        const data = this.state.dayData[key]\r\n        if (data.blocks.length > 0) {\r\n          latestDayIndex = Math.min(latestDayIndex, parseInt(key))\r\n          earliestDayIndex = Math.max(earliestDayIndex, parseInt(key))\r\n        }\r\n      }\r\n    }\r\n\r\n    if (\r\n      typeof this.state.dayData[latestDayIndex] !== 'undefined' &&\r\n      typeof this.state.dayData[earliestDayIndex] !== 'undefined'\r\n    ) {\r\n      this.state.maxCameraZPos = this.state.dayData[latestDayIndex].zPos + this.stage.defaultCameraPos.z\r\n      this.state.minCameraZPos = this.state.dayData[earliestDayIndex].zPos + 1000.0\r\n    }\r\n  }\r\n\r\n  async goToBlock (blockhash) {\r\n    if(!blockhash) return\r\n    const existingBlock = Array.from(this.allBlocks.values()).find(({ hash }) => hash === blockhash)\r\n    // console.log( existingBlock )\r\n    let block = existingBlock\r\n    if(!existingBlock) block = await this.api.getBlock(hash)\r\n    let day = moment(block.time * 1000).format('YYYY-MM-DD')\r\n    this.state.currentHash = block.hash\r\n    this.setDate(day, true)\r\n  }\r\n\r\n  focusOnBlock (blockGroup) {\r\n    // let blockGroup = blockObject//.parent\r\n    blockGroup.visible = true\r\n    this.state.view = 'block'\r\n\r\n    // if (this.state.currentBlockObject) {\r\n    //   this.animateBlockOut(this.state.currentBlockObject/*.parent.children[0]*/)\r\n    // }\r\n    this.animateBlockOut(this.state.currentBlockObject).then(() => {\r\n      // this.animateBlockIn(blockGroup.children[0])\r\n      if (this.state.currentBlockObject) {\r\n        this.state.currentBlockObject.remove(this.state.currentBlockObject.tree)\r\n        this.audio.unloadSound()\r\n      }\r\n\r\n      this.state.currentBlockObject = blockGroup\r\n\r\n      this.animateBlockIn(this.state.currentBlockObject).then(() => {\r\n        this.buildTree(this.state.currentBlockObject)\r\n        this.state.isAnimating = false\r\n        // console.log('BLOCK SELECTED')\r\n        const block = this.state.currentBlockObject.blockchainData\r\n        this.emit('blockSelected', { ...block, time: new Date(block.time * 1000)})\r\n      })\r\n    })\r\n  }\r\n\r\n  animateTree () {\r\n    // if (this.state.view === 'block') {\r\n    //   if (this.treeGroup) {\r\n    //     this.state.currentBlockObject.rotation.y += 0.001\r\n    //     this.state.currentBlockObject.parent.children[0].rotation.y += 0.001\r\n    //     this.treeGroup.rotation.y += 0.001\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  animateBlockVisibility () {\r\n    for (const dayIndex in this.state.dayGroups) {\r\n      if (this.state.dayGroups.hasOwnProperty(dayIndex)) {\r\n        const dayGroup = this.state.dayGroups[dayIndex]\r\n        if (typeof this.state.dayData[dayIndex] !== 'undefined') {\r\n          if (this.state.dayData[dayIndex].visibleCount < dayGroup.children.length) {\r\n            for (let meshIndex = 0; meshIndex < dayGroup.children.length; meshIndex++) {\r\n              const mesh = dayGroup.children[meshIndex]\r\n              if (mesh.visible === false) {\r\n                mesh.visible = true\r\n                this.state.dayData[dayIndex].visibleCount++\r\n                break\r\n              }\r\n            }\r\n            if (this.state.dayData[dayIndex].visibleCount === dayGroup.children.length) {\r\n              // take a cube map of blocks once all are visible\r\n              this.createCubeMap(\r\n                dayGroup.getWorldPosition(),\r\n                dayIndex\r\n              )\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  updateLights () {\r\n    this.stage.pointLight.position.lerp(this.pointLightTarget, 0.5)\r\n  }\r\n\r\n  onUpdate () {\r\n    this.state.frameCount++\r\n    TWEEN.update()\r\n    this.updateLights()\r\n    this.checkMouseIntersection()\r\n    this.animateTree()\r\n    this.animateBlockVisibility()\r\n\r\n    this.uTime = this.clock.getElapsedTime()\r\n\r\n    this.pointsMaterial.uniforms.uTime.value = this.uTime\r\n\r\n    if (this.merkleMaterial) {\r\n      this.merkleMaterial.uniforms.uAnimTime.value += 0.01\r\n      this.merkleMaterial.uniforms.uTime.value = this.uTime\r\n    }\r\n\r\n    if (\r\n      typeof this.audio.pointColors !== 'undefined' &&\r\n      this.audio.pointColors.length > 0\r\n    ) {\r\n      let pointColors = Uint8Array.from(this.audio.pointColors)\r\n      let pointColorsTexture = new THREE.DataTexture(pointColors, pointColors.length / 3, 1, THREE.RGBFormat)\r\n\r\n      pointColorsTexture.minFilter = THREE.NearestFilter\r\n      pointColorsTexture.magFilter = THREE.NearestFilter\r\n\r\n      pointColorsTexture.needsUpdate = true\r\n\r\n      this.pointsMaterial.uniforms.uColor.value = pointColorsTexture\r\n      this.pointsMaterial.uniforms.pointCount.value = pointColors.length / 3\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/scenes/MainScene.js","import * as THREE from 'three'\n\nexport const merge = function ( aGeom, geometry ) {\n\n    if ( geometry instanceof THREE.BufferGeometry === false ) {\n\n        console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n        return;\n\n    }\n\n    var attributes = aGeom.attributes;\n\n    if( aGeom.index ){\n\n        var indices = geometry.index.array;\n\n        var offset = attributes[ 'position' ].count;\n\n        for( var i = 0, il = indices.length; i < il; i++ ) {\n\n            indices[i] = offset + indices[i];\n\n        }\n\n        aGeom.index.array = Uint32ArrayConcat( aGeom.index.array, indices );\n\n    }\n\n    for ( var key in attributes ) {\n\n        if ( geometry.attributes[ key ] === undefined ) continue;\n\n        attributes[ key ].array = Float32ArrayConcat( attributes[ key ].array, geometry.attributes[ key ].array );\n\n    }\n\n    return aGeom;\n\n    /***\n     * @param {Float32Array} first\n     * @param {Float32Array} second\n     * @returns {Float32Array}\n     * @constructor\n     */\n    function Float32ArrayConcat(first, second)\n    {\n        var firstLength = first.length,\n            result = new Float32Array(firstLength + second.length);\n\n        result.set(first);\n        result.set(second, firstLength);\n\n        return result;\n    }\n\n    /**\n     * @param {Uint32Array} first\n     * @param {Uint32Array} second\n     * @returns {Uint32Array}\n     * @constructor\n     */\n    function Uint32ArrayConcat(first, second)\n    {\n        var firstLength = first.length,\n            result = new Uint32Array(firstLength + second.length);\n\n        result.set(first);\n        result.set(second, firstLength);\n\n        return result;\n    }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/helpers/BufferGeometryUtils.js","module.exports = \"#define GLSLIFY 1\\nuniform float uTime;\\nuniform float uAnimTime;\\n\\nvarying float distanceFromCenter;\\n\\nfloat random_1_0 (vec2 st_1_1) {\\n    return fract(sin(dot(st_1_1.xy, vec2(12.9898,78.233))) * 43758.5453123);\\n}\\n\\n\\n\\n\\n#define PHYSICAL\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\tdistanceFromCenter = distance(transformed.xyz, vec3(0.0, 0.0, 0.0)) + (random_1_0(transformed.xy) * 100.0 );\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/materials/MerkleMaterial/MerkleMaterial.vert\n// module id = k78l\n// module chunks = 1","import * as THREE from 'three'\nimport merkle from '../merkle-tree-gen'\n// import _ from 'lodash'\nimport { merge as mergeBufferGeometry } from './BufferGeometryUtils'\n\nlet seedrandom = require('seedrandom')\n\nconst path = new THREE.LineCurve3()\nconst tmpVec3 = new THREE.Vector3()\nconst tmpVec3_2 = new THREE.Vector3()\nconst tmpQuat = new THREE.Quaternion()\nconst DEG2RAD = Math.PI / 180\n\nconst X = new THREE.Vector3(1, 0, 0)\nconst Y = new THREE.Vector3(0, 1, 0)\nconst Z = new THREE.Vector3(0, 0, 1)\nconst UP = new THREE.Vector3(0, 1, 0)\n\nconst xPosRotation = new THREE.Quaternion()\nconst xNegRotation = new THREE.Quaternion()\nconst yPosRotation = new THREE.Quaternion()\nconst yNegRotation = new THREE.Quaternion()\nconst yReverseRotation = new THREE.Quaternion()\nconst zPosRotation = new THREE.Quaternion()\nconst zNegRotation = new THREE.Quaternion()\n\nexport default ({ n_tx, output, hash, feeToInputRatio }, visualise = false) =>  {\n  // const { n_tx } = block\n\n  // const block = block\n\n  const treeGeo = new THREE.Geometry()\n\n  let signatureAngle = 5.0 + (output % 85)\n  signatureAngle = Math.ceil(signatureAngle / 5) * 5\n\n  let angle = signatureAngle // get unique structure for this block\n\n  const path = new THREE.LineCurve3()\n\n  // const treeVertices = new Float32Array()\n\n  xPosRotation.setFromAxisAngle(X, DEG2RAD * angle)\n  xNegRotation.setFromAxisAngle(X, DEG2RAD * -angle)\n  yPosRotation.setFromAxisAngle(Y, DEG2RAD * angle)\n  yNegRotation.setFromAxisAngle(Y, DEG2RAD * -angle)\n  yReverseRotation.setFromAxisAngle(Y, DEG2RAD * 180)\n  zPosRotation.setFromAxisAngle(Z, DEG2RAD * angle)\n  zNegRotation.setFromAxisAngle(Z, DEG2RAD * -angle)\n\n  // Generate an incremental array of `n_tx` length [0, 1, 2, 3, 4, ...n_tx]\n  const array = new Array(n_tx).fill(0).map((v, i) => i.toString())\n\n  let { tree, sortedTree } = merkle.fromArray({ array })\n  let baseAngle = 0\n\n  tree[0].direction = new THREE.Vector3(0, 1, 0)\n  tree[0].startPosition = new THREE.Vector3(0, 0, 0)\n  // tree[0].angle = angle\n  const direction = new THREE.Vector3(UP)\n  const axis = Y\n  const geos = []\n  const points = []\n  const endPoints = []\n\n  const min = new THREE.Vector3()\n  const max = new THREE.Vector3()\n\n  // console.log(feeToInputRatio)\n\n  let magnitude, endPosition\n\n  let levels = tree[0].level\n  const seeded = new Array(levels).fill(0).map(v => seedrandom(hash + v))\n  \n  const N = tree.length\n  let i = 0\n  let node\n  while(i < N ){\n    node = tree[i++]\n    direction.copy(UP)\n    if( node.parent ){\n\n      node.startPosition = node.parent.endPosition\n      \n      // add some randomness based on block network health\n      let rng = seeded[node.level]//seedrandom(hash + node.level)\n      // let rng = seedrandom(hash + node.level)\n      let random = rng.quick()\n      let randomness = ((random * 10000) - 5000) * feeToInputRatio\n\n      baseAngle += randomness\n      // angle += randomness\n\n      direction.copy(node.parent.endPosition).sub(node.parent.startPosition)\n      const isLeft = node.parent.children.left === node\n      // console.log( isLeft )\n      direction.applyQuaternion(isLeft ? zPosRotation : zNegRotation )      \n      direction.applyQuaternion(tmpQuat.setFromAxisAngle(axis, DEG2RAD * baseAngle))\n      \n    }\n\n    magnitude = ((node.level + 1) * 5)\n    direction.normalize().multiplyScalar(magnitude)\n    node.endPosition = node.startPosition.clone().add(direction)\n\n    // Get the bounds\n    max.max(node.endPosition)\n    min.min(node.endPosition)\n    points.push(node.endPosition.clone())\n    points.push(node.startPosition.clone())\n\n    if(visualise) {\n      if (node.level === 0) {\n        endPoints.push(node.endPosition.x, node.endPosition.y, node.endPosition.z)\n      }\n      path.v1.copy(node.startPosition)\n      path.v2.copy(node.endPosition)\n      // debugger\n      // geos.push( new THREE.TubeBufferGeometry(path, 1, magnitude / 20, 6, false))\n      const tubeGeo = new THREE.TubeGeometry(path, 1, magnitude / 20, 6, false)\n      \n      treeGeo.merge(tubeGeo)\n      // debugger;\n    }\n\n    if (node.level === 1) {\n      endPoints.push(node.endPosition.x, node.endPosition.y, node.endPosition.z)\n    }\n\n  }\n\n  // const startingPosition = new THREE.Vector3(0, 0, 0)\n  // const direction = new THREE.Vector3(0, 1, 0)\n\n  // let endPoints = []\n  // let points = []\n  // debugger\n  // build(sortedTree, startingPosition, direction, visualise, hash, feeToInputRatio, treeGeo, angle, points, endPoints)\n\n  let box = new THREE.Box3().setFromPoints(points)\n  let size = /*new THREE.Vector3().subVectors( max, min )//*/box.getSize()\n  let boxCenter = box.getCenter()//new THREE.Vector3().addVectors( min, max ).multiplyScalar( 0.5 )\n  const offset = new THREE.Vector3().sub(min).sub(size.clone().multiplyScalar(0.5))\n  // const baseGeo = new THREE.BufferGeometry()\n  // const baseGeo = new THREE.Geometry()\n  // baseGeo.setIndex( [] );\n  // baseGeo.addAttribute( 'position', new THREE.Float32BufferAttribute( [], 3 ) );\n  // baseGeo.addAttribute( 'normal', new THREE.Float32BufferAttribute( [], 3 ) );\n  // baseGeo.addAttribute( 'uv', new THREE.Float32BufferAttribute( [], 2 ) );\n\n\n  // const treeGeo = geos.reduce((a, b) => a.merge(, baseGeo)\n  \n  // if(visualise){\n    \n    // const positions = geos.reduce((arr, {attributes}) => arr.concat(Array.from(attributes.position.array)), [])\n    // const normal = geos.reduce((arr, {attributes}) => arr.concat(Array.from(attributes.normal.array)), [])\n    // const uv = geos.reduce((arr, {attributes}) => arr.concat(Array.from(attributes.uv.array)), [])  \n    \n  // }\n\n  const treeBuffer = new THREE.BufferGeometry()\n  if (visualise) {\n    // let bufferTreeGeometry = new THREE.BufferGeometry()\n    treeBuffer.fromGeometry(treeGeo)\n    // treeBuffer = bufferTreeGeometry\n  }\n\n  return { size, offset, boxCenter:min/*:new THREE.Vector3(size.clone().multiplyScalar(0.5)).add(min)*/, endPoints, treeGeo: treeBuffer }\n\n  \n\n  // return returnData\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/helpers/GenerateBlockGeometry.js","var map = {\n\t\"./af\": \"3CJN\",\n\t\"./af.js\": \"3CJN\",\n\t\"./ar\": \"3MVc\",\n\t\"./ar-dz\": \"tkWw\",\n\t\"./ar-dz.js\": \"tkWw\",\n\t\"./ar-kw\": \"j8cJ\",\n\t\"./ar-kw.js\": \"j8cJ\",\n\t\"./ar-ly\": \"wPpW\",\n\t\"./ar-ly.js\": \"wPpW\",\n\t\"./ar-ma\": \"dURR\",\n\t\"./ar-ma.js\": \"dURR\",\n\t\"./ar-sa\": \"7OnE\",\n\t\"./ar-sa.js\": \"7OnE\",\n\t\"./ar-tn\": \"BEem\",\n\t\"./ar-tn.js\": \"BEem\",\n\t\"./ar.js\": \"3MVc\",\n\t\"./az\": \"eHwN\",\n\t\"./az.js\": \"eHwN\",\n\t\"./be\": \"3hfc\",\n\t\"./be.js\": \"3hfc\",\n\t\"./bg\": \"lOED\",\n\t\"./bg.js\": \"lOED\",\n\t\"./bm\": \"hng5\",\n\t\"./bm.js\": \"hng5\",\n\t\"./bn\": \"aM0x\",\n\t\"./bn.js\": \"aM0x\",\n\t\"./bo\": \"w2Hs\",\n\t\"./bo.js\": \"w2Hs\",\n\t\"./br\": \"OSsP\",\n\t\"./br.js\": \"OSsP\",\n\t\"./bs\": \"aqvp\",\n\t\"./bs.js\": \"aqvp\",\n\t\"./ca\": \"wIgY\",\n\t\"./ca.js\": \"wIgY\",\n\t\"./cs\": \"ssxj\",\n\t\"./cs.js\": \"ssxj\",\n\t\"./cv\": \"N3vo\",\n\t\"./cv.js\": \"N3vo\",\n\t\"./cy\": \"ZFGz\",\n\t\"./cy.js\": \"ZFGz\",\n\t\"./da\": \"YBA/\",\n\t\"./da.js\": \"YBA/\",\n\t\"./de\": \"DOkx\",\n\t\"./de-at\": \"8v14\",\n\t\"./de-at.js\": \"8v14\",\n\t\"./de-ch\": \"Frex\",\n\t\"./de-ch.js\": \"Frex\",\n\t\"./de.js\": \"DOkx\",\n\t\"./dv\": \"rIuo\",\n\t\"./dv.js\": \"rIuo\",\n\t\"./el\": \"CFqe\",\n\t\"./el.js\": \"CFqe\",\n\t\"./en-au\": \"Sjoy\",\n\t\"./en-au.js\": \"Sjoy\",\n\t\"./en-ca\": \"Tqun\",\n\t\"./en-ca.js\": \"Tqun\",\n\t\"./en-gb\": \"hPuz\",\n\t\"./en-gb.js\": \"hPuz\",\n\t\"./en-ie\": \"ALEw\",\n\t\"./en-ie.js\": \"ALEw\",\n\t\"./en-nz\": \"dyB6\",\n\t\"./en-nz.js\": \"dyB6\",\n\t\"./eo\": \"Nd3h\",\n\t\"./eo.js\": \"Nd3h\",\n\t\"./es\": \"LT9G\",\n\t\"./es-do\": \"7MHZ\",\n\t\"./es-do.js\": \"7MHZ\",\n\t\"./es-us\": \"INcR\",\n\t\"./es-us.js\": \"INcR\",\n\t\"./es.js\": \"LT9G\",\n\t\"./et\": \"XlWM\",\n\t\"./et.js\": \"XlWM\",\n\t\"./eu\": \"sqLM\",\n\t\"./eu.js\": \"sqLM\",\n\t\"./fa\": \"2pmY\",\n\t\"./fa.js\": \"2pmY\",\n\t\"./fi\": \"nS2h\",\n\t\"./fi.js\": \"nS2h\",\n\t\"./fo\": \"OVPi\",\n\t\"./fo.js\": \"OVPi\",\n\t\"./fr\": \"tzHd\",\n\t\"./fr-ca\": \"bXQP\",\n\t\"./fr-ca.js\": \"bXQP\",\n\t\"./fr-ch\": \"VK9h\",\n\t\"./fr-ch.js\": \"VK9h\",\n\t\"./fr.js\": \"tzHd\",\n\t\"./fy\": \"g7KF\",\n\t\"./fy.js\": \"g7KF\",\n\t\"./gd\": \"nLOz\",\n\t\"./gd.js\": \"nLOz\",\n\t\"./gl\": \"FuaP\",\n\t\"./gl.js\": \"FuaP\",\n\t\"./gom-latn\": \"+27R\",\n\t\"./gom-latn.js\": \"+27R\",\n\t\"./gu\": \"rtsW\",\n\t\"./gu.js\": \"rtsW\",\n\t\"./he\": \"Nzt2\",\n\t\"./he.js\": \"Nzt2\",\n\t\"./hi\": \"ETHv\",\n\t\"./hi.js\": \"ETHv\",\n\t\"./hr\": \"V4qH\",\n\t\"./hr.js\": \"V4qH\",\n\t\"./hu\": \"xne+\",\n\t\"./hu.js\": \"xne+\",\n\t\"./hy-am\": \"GrS7\",\n\t\"./hy-am.js\": \"GrS7\",\n\t\"./id\": \"yRTJ\",\n\t\"./id.js\": \"yRTJ\",\n\t\"./is\": \"upln\",\n\t\"./is.js\": \"upln\",\n\t\"./it\": \"FKXc\",\n\t\"./it.js\": \"FKXc\",\n\t\"./ja\": \"ORgI\",\n\t\"./ja.js\": \"ORgI\",\n\t\"./jv\": \"JwiF\",\n\t\"./jv.js\": \"JwiF\",\n\t\"./ka\": \"RnJI\",\n\t\"./ka.js\": \"RnJI\",\n\t\"./kk\": \"j+vx\",\n\t\"./kk.js\": \"j+vx\",\n\t\"./km\": \"5j66\",\n\t\"./km.js\": \"5j66\",\n\t\"./kn\": \"gEQe\",\n\t\"./kn.js\": \"gEQe\",\n\t\"./ko\": \"eBB/\",\n\t\"./ko.js\": \"eBB/\",\n\t\"./ky\": \"6cf8\",\n\t\"./ky.js\": \"6cf8\",\n\t\"./lb\": \"z3hR\",\n\t\"./lb.js\": \"z3hR\",\n\t\"./lo\": \"nE8X\",\n\t\"./lo.js\": \"nE8X\",\n\t\"./lt\": \"/6P1\",\n\t\"./lt.js\": \"/6P1\",\n\t\"./lv\": \"jxEH\",\n\t\"./lv.js\": \"jxEH\",\n\t\"./me\": \"svD2\",\n\t\"./me.js\": \"svD2\",\n\t\"./mi\": \"gEU3\",\n\t\"./mi.js\": \"gEU3\",\n\t\"./mk\": \"Ab7C\",\n\t\"./mk.js\": \"Ab7C\",\n\t\"./ml\": \"oo1B\",\n\t\"./ml.js\": \"oo1B\",\n\t\"./mr\": \"5vPg\",\n\t\"./mr.js\": \"5vPg\",\n\t\"./ms\": \"ooba\",\n\t\"./ms-my\": \"G++c\",\n\t\"./ms-my.js\": \"G++c\",\n\t\"./ms.js\": \"ooba\",\n\t\"./mt\": \"oCzW\",\n\t\"./mt.js\": \"oCzW\",\n\t\"./my\": \"F+2e\",\n\t\"./my.js\": \"F+2e\",\n\t\"./nb\": \"FlzV\",\n\t\"./nb.js\": \"FlzV\",\n\t\"./ne\": \"/mhn\",\n\t\"./ne.js\": \"/mhn\",\n\t\"./nl\": \"3K28\",\n\t\"./nl-be\": \"Bp2f\",\n\t\"./nl-be.js\": \"Bp2f\",\n\t\"./nl.js\": \"3K28\",\n\t\"./nn\": \"C7av\",\n\t\"./nn.js\": \"C7av\",\n\t\"./pa-in\": \"pfs9\",\n\t\"./pa-in.js\": \"pfs9\",\n\t\"./pl\": \"7LV+\",\n\t\"./pl.js\": \"7LV+\",\n\t\"./pt\": \"ZoSI\",\n\t\"./pt-br\": \"AoDM\",\n\t\"./pt-br.js\": \"AoDM\",\n\t\"./pt.js\": \"ZoSI\",\n\t\"./ro\": \"wT5f\",\n\t\"./ro.js\": \"wT5f\",\n\t\"./ru\": \"ulq9\",\n\t\"./ru.js\": \"ulq9\",\n\t\"./sd\": \"fW1y\",\n\t\"./sd.js\": \"fW1y\",\n\t\"./se\": \"5Omq\",\n\t\"./se.js\": \"5Omq\",\n\t\"./si\": \"Lgqo\",\n\t\"./si.js\": \"Lgqo\",\n\t\"./sk\": \"OUMt\",\n\t\"./sk.js\": \"OUMt\",\n\t\"./sl\": \"2s1U\",\n\t\"./sl.js\": \"2s1U\",\n\t\"./sq\": \"V0td\",\n\t\"./sq.js\": \"V0td\",\n\t\"./sr\": \"f4W3\",\n\t\"./sr-cyrl\": \"c1x4\",\n\t\"./sr-cyrl.js\": \"c1x4\",\n\t\"./sr.js\": \"f4W3\",\n\t\"./ss\": \"7Q8x\",\n\t\"./ss.js\": \"7Q8x\",\n\t\"./sv\": \"Fpqq\",\n\t\"./sv.js\": \"Fpqq\",\n\t\"./sw\": \"DSXN\",\n\t\"./sw.js\": \"DSXN\",\n\t\"./ta\": \"+7/x\",\n\t\"./ta.js\": \"+7/x\",\n\t\"./te\": \"Nlnz\",\n\t\"./te.js\": \"Nlnz\",\n\t\"./tet\": \"gUgh\",\n\t\"./tet.js\": \"gUgh\",\n\t\"./th\": \"XzD+\",\n\t\"./th.js\": \"XzD+\",\n\t\"./tl-ph\": \"3LKG\",\n\t\"./tl-ph.js\": \"3LKG\",\n\t\"./tlh\": \"m7yE\",\n\t\"./tlh.js\": \"m7yE\",\n\t\"./tr\": \"k+5o\",\n\t\"./tr.js\": \"k+5o\",\n\t\"./tzl\": \"iNtv\",\n\t\"./tzl.js\": \"iNtv\",\n\t\"./tzm\": \"FRPF\",\n\t\"./tzm-latn\": \"krPU\",\n\t\"./tzm-latn.js\": \"krPU\",\n\t\"./tzm.js\": \"FRPF\",\n\t\"./uk\": \"ntHu\",\n\t\"./uk.js\": \"ntHu\",\n\t\"./ur\": \"uSe8\",\n\t\"./ur.js\": \"uSe8\",\n\t\"./uz\": \"XU1s\",\n\t\"./uz-latn\": \"/bsm\",\n\t\"./uz-latn.js\": \"/bsm\",\n\t\"./uz.js\": \"XU1s\",\n\t\"./vi\": \"0X8Q\",\n\t\"./vi.js\": \"0X8Q\",\n\t\"./x-pseudo\": \"e/KL\",\n\t\"./x-pseudo.js\": \"e/KL\",\n\t\"./yo\": \"YXlc\",\n\t\"./yo.js\": \"YXlc\",\n\t\"./zh-cn\": \"Vz2w\",\n\t\"./zh-cn.js\": \"Vz2w\",\n\t\"./zh-hk\": \"ZUyn\",\n\t\"./zh-hk.js\": \"ZUyn\",\n\t\"./zh-tw\": \"BbgG\",\n\t\"./zh-tw.js\": \"BbgG\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"uslO\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/moment/locale ^\\.\\/.*$\n// module id = uslO\n// module chunks = 1","import axios from 'axios'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\n/**\n * API methods for interacting with data store\n */\nexport default class BTC {\n  constructor () {\n    this.init()\n  }\n\n  init () {\n    this.initDataStore()\n  }\n\n  initDataStore () {\n    firebase.initializeApp({\n      apiKey: 'AIzaSyCkC_zpHJhgYkS-IbN_OwvZSjb4NfcN28g',\n      projectId: 'iohk-orpheus'\n      // authDomain: '### FIREBASE AUTH DOMAIN ###',\n    })\n\n    // Initialize Cloud Firestore through Firebase\n    this.blocks = firebase.firestore().collection('block')\n  }\n\n  formatTimeSeries ({ data }) {\n    const times = []\n    const values = []\n    data.values.forEach(({ x, y }) => {\n      times.push(x)\n      values.push(y)\n    })\n    return { times, values }\n  }\n\n  /**\n   * Get a list of BTC transaction over a time period\n   */\n  getTransactionFeesOverTime (start, end) {\n    axios.get('https://api.blockchain.info/charts/transaction-fees?timespan=all&format=json&cors=true')\n    .then(this.formatTimeSeries)\n  }\n\n  getTransactionVolumeOverTime (start, end) {\n    axios.get('https://api.blockchain.info/charts/estimated-transaction-volume?format=json&cors=true')\n    .then(this.formatTimeSeries)\n  }\n\n  /**\n   * Get hash rate to nearest day\n   */\n  getHashRateforDay (startTimestamp) {\n    axios.get(`https://api.blockchain.info/charts/hash-rate?timespan=1days&format=json&start=${startTimestamp}&cors=true`)\n      .then((data) => {\n        let hashRates = this.formatTimeSeries(data)\n        return hashRates && hashRates.values[0] !== undefined && hashRates.values[0]\n      })\n  }\n\n/**\n * Attach hash rates to days array\n */\n  assignHashRates (daysArray) {\n    let numberOfDays = daysArray.length\n    let daysProcessed = 0\n    return new Promise((resolve, reject) => {\n      daysArray.forEach((dayData) => {\n        let timestampInMs = dayData.timeStamp / 1000\n        this.getHashRateforDay(timestampInMs)\n      .then((hashRate) => {\n        dayData.hashRate = hashRate\n        daysProcessed++\n        if (daysProcessed === numberOfDays) {\n          // add hash rate from previous day to current day if it doesn't exist\n          if (daysArray[0].hashRate === null) {\n            daysArray[0].hashRate = daysArray[1].hashRate\n          }\n          resolve()\n        }\n      })\n      .catch((error) => {\n        daysProcessed++\n        dayData.hashRate = null\n        console.log(error)\n      })\n      })\n    })\n  }\n\n  /**\n   * Returns a block from a given hash\n   */\n  getBlock (hash) {\n    return this.blocks.where('hash', '==', hash)\n      .get()\n      .then(({docs}) => docs[0].data())\n  }\n\n  /**\n   * Returns all the blocks that occured on the current date 00:01 - 00:00\n   */\n  getBlocksOnDay (date, sortDateAsc) {\n    const fromDay = new Date(date)\n    fromDay.setMilliseconds(0)\n    fromDay.setSeconds(0)\n    fromDay.setMinutes(0)\n    fromDay.setHours(0)\n\n    const toDay = new Date(fromDay.getTime())\n    toDay.setHours(toDay.getHours() + 24)\n\n    return this.getBlocksSince(fromDay, toDay)\n  }\n\n  getBlocksSince (fromDate, toDate = new Date()) {\n    return this.blocks\n      .orderBy('time', 'asc')\n      .startAt(fromDate / 1000)\n      .endAt(toDate / 1000)\n      .get()\n      .then(({ docs }) => docs.map(doc => doc.data()))\n  }\n\n  getDay (date, toDate = new Date()) {\n    return this.getBlocksSince(date, toDate).then((blocks) => {\n      const fee = blocks.reduce((a, { fee }) => a + fee, 0) || 0\n      const input = blocks.reduce((a, { input }) => a + input, 0) || 0\n      const output = blocks.reduce((a, { output }) => a + output, 0) || 0\n      // const value = blocks.reduce((a, b => a + b.value, 0))\n      return { date, blocks, fee, input, output }\n    })\n  }\n\n  getLatestBlock () {\n    this.blocks.orderBy('time', 'desc')\n      .limit(1)\n      .get()\n      .then(({ docs }) => docs[0].data())\n  }\n\n  getTransactionsForBlock (hash, tryCount = 0) {\n    return new Promise((resolve, reject) => {\n      this.blocks.where('hash', '==', hash).get()\n        .then(({docs}) => docs[0].ref.collection('metadata').get())\n        .then((transactions) => {\n          try {\n            resolve(transactions.docs[0].data().transaction)\n          } catch (error) {\n            console.log('Block: ' + hash + ' has no transactions in the DB!')\n            reject(error)\n          }\n        }).catch((error) => {\n          if (tryCount < 5) {\n            console.log('Couldn\\'t get transactions for block, retrying...')\n            this.getTransactionsForBlock(hash, tryCount + 1).catch((error) => {\n              reject(error)\n            })\n          } else {\n            console.log('Couldn\\'t get transactions for block, retry limit reached')\n            reject(error)\n          }\n        })\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/api/btc.js","module.exports = \"#define GLSLIFY 1\\nvarying vec3 vReflect;\\nvarying vec3 vRefract[3];\\n//varying float vReflectionFactor;\\nvarying vec3 worldNormal;\\n\\n#define PHYSICAL\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\tgl_FragColor = vec4( outgoingLight.rgb, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/materials/BlockMaterial/BlockMaterial.frag\n// module id = w1qT\n// module chunks = 1","'use strict'\r\nimport * as THREE from 'three'\r\nimport Stage from './Stage'\r\nimport MainScene from './scenes/MainScene'\r\n\r\nconst orpheusApp = function (params = {}) {\r\n  const stage = new Stage()\r\n  return new MainScene({...params, stage})\r\n}\r\n\r\norpheusApp.canRun = window.WebGLRenderingContext !== null && window.Worker !== null\r\norpheusApp.preload = _ => orpheusApp.textureLoader = new THREE.TextureLoader()\r\n\r\nwindow.orpheusApp = orpheusApp\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/main.js"],"sourceRoot":""}